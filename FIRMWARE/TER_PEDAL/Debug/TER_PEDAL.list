
TER_PEDAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005288  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08005394  08005394  00006394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053c0  080053c0  0000700c  2**0
                  CONTENTS
  4 .ARM          00000000  080053c0  080053c0  0000700c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080053c0  080053c0  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053c0  080053c0  000063c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080053c4  080053c4  000063c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080053c8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c8  20000040  080053d4  00007040  2**6
                  ALLOC
 10 ._user_heap_stack 00000600  20000308  080053d4  00007308  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000187cd  00000000  00000000  00007035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003494  00000000  00000000  0001f802  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001fb8  00000000  00000000  00022c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001854  00000000  00000000  00024c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ac05  00000000  00000000  000264a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bc00  00000000  00000000  000410a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098944  00000000  00000000  0005cca9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f55ed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008974  00000000  00000000  000f5630  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  000fdfa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000040 	.word	0x20000040
 8000128:	00000000 	.word	0x00000000
 800012c:	0800537c 	.word	0x0800537c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000044 	.word	0x20000044
 8000148:	0800537c 	.word	0x0800537c

0800014c <bytestowrite>:
/*****************************************************************************************************************************************/
uint8_t bytes_temp[4];

// function to determine the remaining bytes
uint16_t bytestowrite (uint16_t size, uint16_t offset)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	460a      	mov	r2, r1
 8000156:	80fb      	strh	r3, [r7, #6]
 8000158:	4613      	mov	r3, r2
 800015a:	80bb      	strh	r3, [r7, #4]
	if ((size+offset)<PAGE_SIZE) return size;
 800015c:	88fa      	ldrh	r2, [r7, #6]
 800015e:	88bb      	ldrh	r3, [r7, #4]
 8000160:	4413      	add	r3, r2
 8000162:	2b3f      	cmp	r3, #63	@ 0x3f
 8000164:	dc01      	bgt.n	800016a <bytestowrite+0x1e>
 8000166:	88fb      	ldrh	r3, [r7, #6]
 8000168:	e003      	b.n	8000172 <bytestowrite+0x26>
	else return PAGE_SIZE-offset;
 800016a:	88bb      	ldrh	r3, [r7, #4]
 800016c:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8000170:	b29b      	uxth	r3, r3
}
 8000172:	4618      	mov	r0, r3
 8000174:	370c      	adds	r7, #12
 8000176:	46bd      	mov	sp, r7
 8000178:	bc80      	pop	{r7}
 800017a:	4770      	bx	lr

0800017c <EEPROM_Write>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the pointer to the data to write in bytes
 * @size is the size of the data
 */
void EEPROM_Write (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	b08e      	sub	sp, #56	@ 0x38
 8000180:	af04      	add	r7, sp, #16
 8000182:	60ba      	str	r2, [r7, #8]
 8000184:	461a      	mov	r2, r3
 8000186:	4603      	mov	r3, r0
 8000188:	81fb      	strh	r3, [r7, #14]
 800018a:	460b      	mov	r3, r1
 800018c:	81bb      	strh	r3, [r7, #12]
 800018e:	4613      	mov	r3, r2
 8000190:	80fb      	strh	r3, [r7, #6]
	// Find out the number of bit, where the page addressing starts
	int paddrposition = log(PAGE_SIZE)/log(2);
 8000192:	2306      	movs	r3, #6
 8000194:	61fb      	str	r3, [r7, #28]

	// calculate the start page and the end page
	uint16_t startPage = page;
 8000196:	89fb      	ldrh	r3, [r7, #14]
 8000198:	84fb      	strh	r3, [r7, #38]	@ 0x26
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 800019a:	88fa      	ldrh	r2, [r7, #6]
 800019c:	89bb      	ldrh	r3, [r7, #12]
 800019e:	4413      	add	r3, r2
 80001a0:	2b00      	cmp	r3, #0
 80001a2:	da00      	bge.n	80001a6 <EEPROM_Write+0x2a>
 80001a4:	333f      	adds	r3, #63	@ 0x3f
 80001a6:	119b      	asrs	r3, r3, #6
 80001a8:	b29a      	uxth	r2, r3
 80001aa:	89fb      	ldrh	r3, [r7, #14]
 80001ac:	4413      	add	r3, r2
 80001ae:	837b      	strh	r3, [r7, #26]

	// number of pages to be written
	uint16_t numofpages = (endPage-startPage) + 1;
 80001b0:	8b7a      	ldrh	r2, [r7, #26]
 80001b2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80001b4:	1ad3      	subs	r3, r2, r3
 80001b6:	b29b      	uxth	r3, r3
 80001b8:	3301      	adds	r3, #1
 80001ba:	833b      	strh	r3, [r7, #24]
	uint16_t pos=0;
 80001bc:	2300      	movs	r3, #0
 80001be:	84bb      	strh	r3, [r7, #36]	@ 0x24

	// write the data
	for (int i=0; i<numofpages; i++)
 80001c0:	2300      	movs	r3, #0
 80001c2:	623b      	str	r3, [r7, #32]
 80001c4:	e034      	b.n	8000230 <EEPROM_Write+0xb4>
	{
		/* calculate the address of the memory location
		 * Here we add the page address with the byte address
		 */
		uint16_t MemAddress = startPage<<paddrposition | offset;
 80001c6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80001c8:	69fb      	ldr	r3, [r7, #28]
 80001ca:	fa02 f303 	lsl.w	r3, r2, r3
 80001ce:	b21a      	sxth	r2, r3
 80001d0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80001d4:	4313      	orrs	r3, r2
 80001d6:	b21b      	sxth	r3, r3
 80001d8:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset);  // calculate the remaining bytes to be written
 80001da:	89ba      	ldrh	r2, [r7, #12]
 80001dc:	88fb      	ldrh	r3, [r7, #6]
 80001de:	4611      	mov	r1, r2
 80001e0:	4618      	mov	r0, r3
 80001e2:	f7ff ffb3 	bl	800014c <bytestowrite>
 80001e6:	4603      	mov	r3, r0
 80001e8:	82bb      	strh	r3, [r7, #20]

		HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);  // write the data to the EEPROM
 80001ea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80001ec:	68ba      	ldr	r2, [r7, #8]
 80001ee:	4413      	add	r3, r2
 80001f0:	8af9      	ldrh	r1, [r7, #22]
 80001f2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80001f6:	9202      	str	r2, [sp, #8]
 80001f8:	8aba      	ldrh	r2, [r7, #20]
 80001fa:	9201      	str	r2, [sp, #4]
 80001fc:	9300      	str	r3, [sp, #0]
 80001fe:	2302      	movs	r3, #2
 8000200:	460a      	mov	r2, r1
 8000202:	21a0      	movs	r1, #160	@ 0xa0
 8000204:	480f      	ldr	r0, [pc, #60]	@ (8000244 <EEPROM_Write+0xc8>)
 8000206:	f003 f80d 	bl	8003224 <HAL_I2C_Mem_Write>

		startPage += 1;  // increment the page, so that a new page address can be selected for further write
 800020a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800020c:	3301      	adds	r3, #1
 800020e:	84fb      	strh	r3, [r7, #38]	@ 0x26
		offset=0;   // since we will be writing to a new page, so offset will be 0
 8000210:	2300      	movs	r3, #0
 8000212:	81bb      	strh	r3, [r7, #12]
		size = size-bytesremaining;  // reduce the size of the bytes
 8000214:	88fa      	ldrh	r2, [r7, #6]
 8000216:	8abb      	ldrh	r3, [r7, #20]
 8000218:	1ad3      	subs	r3, r2, r3
 800021a:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;  // update the position for the data buffer
 800021c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800021e:	8abb      	ldrh	r3, [r7, #20]
 8000220:	4413      	add	r3, r2
 8000222:	84bb      	strh	r3, [r7, #36]	@ 0x24

		HAL_Delay (5);  // Write cycle delay (5ms)
 8000224:	2005      	movs	r0, #5
 8000226:	f001 f869 	bl	80012fc <HAL_Delay>
	for (int i=0; i<numofpages; i++)
 800022a:	6a3b      	ldr	r3, [r7, #32]
 800022c:	3301      	adds	r3, #1
 800022e:	623b      	str	r3, [r7, #32]
 8000230:	8b3b      	ldrh	r3, [r7, #24]
 8000232:	6a3a      	ldr	r2, [r7, #32]
 8000234:	429a      	cmp	r2, r3
 8000236:	dbc6      	blt.n	80001c6 <EEPROM_Write+0x4a>
	}
}
 8000238:	bf00      	nop
 800023a:	bf00      	nop
 800023c:	3728      	adds	r7, #40	@ 0x28
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}
 8000242:	bf00      	nop
 8000244:	20000190 	.word	0x20000190

08000248 <EEPROM_Read>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the pointer to the data to write in bytes
 * @size is the size of the data
 */
void EEPROM_Read (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b08e      	sub	sp, #56	@ 0x38
 800024c:	af04      	add	r7, sp, #16
 800024e:	60ba      	str	r2, [r7, #8]
 8000250:	461a      	mov	r2, r3
 8000252:	4603      	mov	r3, r0
 8000254:	81fb      	strh	r3, [r7, #14]
 8000256:	460b      	mov	r3, r1
 8000258:	81bb      	strh	r3, [r7, #12]
 800025a:	4613      	mov	r3, r2
 800025c:	80fb      	strh	r3, [r7, #6]
	int paddrposition = log(PAGE_SIZE)/log(2);
 800025e:	2306      	movs	r3, #6
 8000260:	61fb      	str	r3, [r7, #28]

	uint16_t startPage = page;
 8000262:	89fb      	ldrh	r3, [r7, #14]
 8000264:	84fb      	strh	r3, [r7, #38]	@ 0x26
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 8000266:	88fa      	ldrh	r2, [r7, #6]
 8000268:	89bb      	ldrh	r3, [r7, #12]
 800026a:	4413      	add	r3, r2
 800026c:	2b00      	cmp	r3, #0
 800026e:	da00      	bge.n	8000272 <EEPROM_Read+0x2a>
 8000270:	333f      	adds	r3, #63	@ 0x3f
 8000272:	119b      	asrs	r3, r3, #6
 8000274:	b29a      	uxth	r2, r3
 8000276:	89fb      	ldrh	r3, [r7, #14]
 8000278:	4413      	add	r3, r2
 800027a:	837b      	strh	r3, [r7, #26]

	uint16_t numofpages = (endPage-startPage) + 1;
 800027c:	8b7a      	ldrh	r2, [r7, #26]
 800027e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000280:	1ad3      	subs	r3, r2, r3
 8000282:	b29b      	uxth	r3, r3
 8000284:	3301      	adds	r3, #1
 8000286:	833b      	strh	r3, [r7, #24]
	uint16_t pos=0;
 8000288:	2300      	movs	r3, #0
 800028a:	84bb      	strh	r3, [r7, #36]	@ 0x24

	for (int i=0; i<numofpages; i++)
 800028c:	2300      	movs	r3, #0
 800028e:	623b      	str	r3, [r7, #32]
 8000290:	e031      	b.n	80002f6 <EEPROM_Read+0xae>
	{
		uint16_t MemAddress = startPage<<paddrposition | offset;
 8000292:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000294:	69fb      	ldr	r3, [r7, #28]
 8000296:	fa02 f303 	lsl.w	r3, r2, r3
 800029a:	b21a      	sxth	r2, r3
 800029c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80002a0:	4313      	orrs	r3, r2
 80002a2:	b21b      	sxth	r3, r3
 80002a4:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset);
 80002a6:	89ba      	ldrh	r2, [r7, #12]
 80002a8:	88fb      	ldrh	r3, [r7, #6]
 80002aa:	4611      	mov	r1, r2
 80002ac:	4618      	mov	r0, r3
 80002ae:	f7ff ff4d 	bl	800014c <bytestowrite>
 80002b2:	4603      	mov	r3, r0
 80002b4:	82bb      	strh	r3, [r7, #20]
		HAL_I2C_Mem_Read(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);
 80002b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80002b8:	68ba      	ldr	r2, [r7, #8]
 80002ba:	4413      	add	r3, r2
 80002bc:	8af9      	ldrh	r1, [r7, #22]
 80002be:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80002c2:	9202      	str	r2, [sp, #8]
 80002c4:	8aba      	ldrh	r2, [r7, #20]
 80002c6:	9201      	str	r2, [sp, #4]
 80002c8:	9300      	str	r3, [sp, #0]
 80002ca:	2302      	movs	r3, #2
 80002cc:	460a      	mov	r2, r1
 80002ce:	21a0      	movs	r1, #160	@ 0xa0
 80002d0:	480d      	ldr	r0, [pc, #52]	@ (8000308 <EEPROM_Read+0xc0>)
 80002d2:	f003 f8a1 	bl	8003418 <HAL_I2C_Mem_Read>
		startPage += 1;
 80002d6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80002d8:	3301      	adds	r3, #1
 80002da:	84fb      	strh	r3, [r7, #38]	@ 0x26
		offset=0;
 80002dc:	2300      	movs	r3, #0
 80002de:	81bb      	strh	r3, [r7, #12]
		size = size-bytesremaining;
 80002e0:	88fa      	ldrh	r2, [r7, #6]
 80002e2:	8abb      	ldrh	r3, [r7, #20]
 80002e4:	1ad3      	subs	r3, r2, r3
 80002e6:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;
 80002e8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80002ea:	8abb      	ldrh	r3, [r7, #20]
 80002ec:	4413      	add	r3, r2
 80002ee:	84bb      	strh	r3, [r7, #36]	@ 0x24
	for (int i=0; i<numofpages; i++)
 80002f0:	6a3b      	ldr	r3, [r7, #32]
 80002f2:	3301      	adds	r3, #1
 80002f4:	623b      	str	r3, [r7, #32]
 80002f6:	8b3b      	ldrh	r3, [r7, #24]
 80002f8:	6a3a      	ldr	r2, [r7, #32]
 80002fa:	429a      	cmp	r2, r3
 80002fc:	dbc9      	blt.n	8000292 <EEPROM_Read+0x4a>
	}
}
 80002fe:	bf00      	nop
 8000300:	bf00      	nop
 8000302:	3728      	adds	r7, #40	@ 0x28
 8000304:	46bd      	mov	sp, r7
 8000306:	bd80      	pop	{r7, pc}
 8000308:	20000190 	.word	0x20000190

0800030c <initCAN>:
uint8_t msgIndex = 0; //Hasta 255 mensajes
/* -------------------------------------------------------------------------- */

struct TeR_t TeR;

uint8_t initCAN(CAN_HandleTypeDef *hcan, TIM_HandleTypeDef *htim) {
 800030c:	b580      	push	{r7, lr}
 800030e:	b082      	sub	sp, #8
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
 8000314:	6039      	str	r1, [r7, #0]
	//Inicializacion del periferico CAN
	can = hcan;
 8000316:	4a0d      	ldr	r2, [pc, #52]	@ (800034c <initCAN+0x40>)
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	6013      	str	r3, [r2, #0]
	tim = htim;
 800031c:	4a0c      	ldr	r2, [pc, #48]	@ (8000350 <initCAN+0x44>)
 800031e:	683b      	ldr	r3, [r7, #0]
 8000320:	6013      	str	r3, [r2, #0]
	//Arranque del periferico y la interrupcion
	HAL_CAN_Start(can); //Activamos el can
 8000322:	4b0a      	ldr	r3, [pc, #40]	@ (800034c <initCAN+0x40>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	4618      	mov	r0, r3
 8000328:	f001 fde7 	bl	8001efa <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(can, CAN_IT_RX_FIFO0_MSG_PENDING); //Activamos notificación de mensaje pendiente a lectura
 800032c:	4b07      	ldr	r3, [pc, #28]	@ (800034c <initCAN+0x40>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	2102      	movs	r1, #2
 8000332:	4618      	mov	r0, r3
 8000334:	f002 f849 	bl	80023ca <HAL_CAN_ActivateNotification>
	HAL_TIM_Base_Start_IT(tim); //Arranca el envio temporizado
 8000338:	4b05      	ldr	r3, [pc, #20]	@ (8000350 <initCAN+0x44>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	4618      	mov	r0, r3
 800033e:	f004 fb95 	bl	8004a6c <HAL_TIM_Base_Start_IT>
	return 1;
 8000342:	2301      	movs	r3, #1
}
 8000344:	4618      	mov	r0, r3
 8000346:	3708      	adds	r7, #8
 8000348:	46bd      	mov	sp, r7
 800034a:	bd80      	pop	{r7, pc}
 800034c:	2000005c 	.word	0x2000005c
 8000350:	20000060 	.word	0x20000060

08000354 <HAL_TIM_PeriodElapsedCallback>:

//Envío temporizado
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { //Envio temporizado
 8000354:	b580      	push	{r7, lr}
 8000356:	b082      	sub	sp, #8
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
	if (htim == tim) { //Si es nuestro timer(Da igual si solo hay 1)
 800035c:	4b06      	ldr	r3, [pc, #24]	@ (8000378 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	687a      	ldr	r2, [r7, #4]
 8000362:	429a      	cmp	r2, r3
 8000364:	d103      	bne.n	800036e <HAL_TIM_PeriodElapsedCallback+0x1a>
		readSensors(); //Lee los sensores
 8000366:	f000 fc83 	bl	8000c70 <readSensors>
		sendCAN();
 800036a:	f000 f83d 	bl	80003e8 <sendCAN>
	}
}
 800036e:	bf00      	nop
 8000370:	3708      	adds	r7, #8
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	20000060 	.word	0x20000060

0800037c <HAL_CAN_RxFifo0MsgPendingCallback>:

//Recepción asincrona
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) { //No hay distinción de bus
 800037c:	b580      	push	{r7, lr}
 800037e:	b082      	sub	sp, #8
 8000380:	af00      	add	r7, sp, #0
 8000382:	6078      	str	r0, [r7, #4]
	if (hcan == can) { //Si es nuestro can (Da igual si solo hay 1)
 8000384:	4b0a      	ldr	r3, [pc, #40]	@ (80003b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	687a      	ldr	r2, [r7, #4]
 800038a:	429a      	cmp	r2, r3
 800038c:	d10c      	bne.n	80003a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>
		HAL_CAN_GetRxMessage(can, CAN_RX_FIFO0, &RxHeader, RxData); //Recoge el mensaje
 800038e:	4b08      	ldr	r3, [pc, #32]	@ (80003b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000390:	6818      	ldr	r0, [r3, #0]
 8000392:	4b08      	ldr	r3, [pc, #32]	@ (80003b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8000394:	4a08      	ldr	r2, [pc, #32]	@ (80003b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8000396:	2100      	movs	r1, #0
 8000398:	f001 fef6 	bl	8002188 <HAL_CAN_GetRxMessage>
		decodeMsg(RxHeader.StdId, RxData); //llama a la decodificación
 800039c:	4b06      	ldr	r3, [pc, #24]	@ (80003b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	4904      	ldr	r1, [pc, #16]	@ (80003b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 80003a2:	4618      	mov	r0, r3
 80003a4:	f000 f80a 	bl	80003bc <decodeMsg>
	}
}
 80003a8:	bf00      	nop
 80003aa:	3708      	adds	r7, #8
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	2000005c 	.word	0x2000005c
 80003b4:	200000a4 	.word	0x200000a4
 80003b8:	20000088 	.word	0x20000088

080003bc <decodeMsg>:
/* -------------------------------------------------------------------------- */

//Función de decodificación del CAN, si quieres que la ecu disponga de una señal hay que añadirla aquí.
uint8_t decodeMsg(uint32_t canId, uint8_t *data) {
 80003bc:	b580      	push	{r7, lr}
 80003be:	b082      	sub	sp, #8
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
 80003c4:	6039      	str	r1, [r7, #0]

	switch (canId) {
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	2b01      	cmp	r3, #1
 80003ca:	d107      	bne.n	80003dc <decodeMsg+0x20>
	//Attend the command
	case TER_COMMAND_FRAME_ID:
		command(data[0]); //Llama a la interpretación del comando
 80003cc:	683b      	ldr	r3, [r7, #0]
 80003ce:	781b      	ldrb	r3, [r3, #0]
 80003d0:	4618      	mov	r0, r3
 80003d2:	f000 f875 	bl	80004c0 <command>
		break;
 80003d6:	bf00      	nop
	default:
		return -1;
		break;

	}
	return 1;
 80003d8:	2301      	movs	r3, #1
 80003da:	e000      	b.n	80003de <decodeMsg+0x22>
		return -1;
 80003dc:	23ff      	movs	r3, #255	@ 0xff
}
 80003de:	4618      	mov	r0, r3
 80003e0:	3708      	adds	r7, #8
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}
	...

080003e8 <sendCAN>:

//Función de envío de mensajes
uint8_t sendCAN(void) {
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0
	TxHeader.IDE = CAN_ID_STD;
 80003ec:	4b2b      	ldr	r3, [pc, #172]	@ (800049c <sendCAN+0xb4>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 80003f2:	4b2a      	ldr	r3, [pc, #168]	@ (800049c <sendCAN+0xb4>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	60da      	str	r2, [r3, #12]
	if (HAL_CAN_GetTxMailboxesFreeLevel(can) > 0) { // Hay un slot para nuestro mensaje
 80003f8:	4b29      	ldr	r3, [pc, #164]	@ (80004a0 <sendCAN+0xb8>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	4618      	mov	r0, r3
 80003fe:	f001 fe8f 	bl	8002120 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000402:	4603      	mov	r3, r0
 8000404:	2b00      	cmp	r3, #0
 8000406:	d046      	beq.n	8000496 <sendCAN+0xae>
		switch (msgIndex++) {
 8000408:	4b26      	ldr	r3, [pc, #152]	@ (80004a4 <sendCAN+0xbc>)
 800040a:	781b      	ldrb	r3, [r3, #0]
 800040c:	1c5a      	adds	r2, r3, #1
 800040e:	b2d1      	uxtb	r1, r2
 8000410:	4a24      	ldr	r2, [pc, #144]	@ (80004a4 <sendCAN+0xbc>)
 8000412:	7011      	strb	r1, [r2, #0]
 8000414:	2b02      	cmp	r3, #2
 8000416:	d01e      	beq.n	8000456 <sendCAN+0x6e>
 8000418:	2b02      	cmp	r3, #2
 800041a:	dc28      	bgt.n	800046e <sendCAN+0x86>
 800041c:	2b00      	cmp	r3, #0
 800041e:	d002      	beq.n	8000426 <sendCAN+0x3e>
 8000420:	2b01      	cmp	r3, #1
 8000422:	d00c      	beq.n	800043e <sendCAN+0x56>
 8000424:	e023      	b.n	800046e <sendCAN+0x86>

		case 0: //APPS
			TxHeader.StdId = TER_APPS_FRAME_ID;
 8000426:	4b1d      	ldr	r3, [pc, #116]	@ (800049c <sendCAN+0xb4>)
 8000428:	2203      	movs	r2, #3
 800042a:	601a      	str	r2, [r3, #0]
			TxHeader.DLC = TER_APPS_LENGTH;
 800042c:	4b1b      	ldr	r3, [pc, #108]	@ (800049c <sendCAN+0xb4>)
 800042e:	2208      	movs	r2, #8
 8000430:	611a      	str	r2, [r3, #16]
			ter_apps_pack(TxData, &TeR.apps, sizeof(TxData)); //Empaquetamos
 8000432:	2208      	movs	r2, #8
 8000434:	491c      	ldr	r1, [pc, #112]	@ (80004a8 <sendCAN+0xc0>)
 8000436:	481d      	ldr	r0, [pc, #116]	@ (80004ac <sendCAN+0xc4>)
 8000438:	f000 fe49 	bl	80010ce <ter_apps_pack>
			break;
 800043c:	e01c      	b.n	8000478 <sendCAN+0x90>
		case 1: //BPPS
			TxHeader.StdId = TER_BPPS_FRAME_ID;
 800043e:	4b17      	ldr	r3, [pc, #92]	@ (800049c <sendCAN+0xb4>)
 8000440:	2204      	movs	r2, #4
 8000442:	601a      	str	r2, [r3, #0]
			TxHeader.DLC = TER_BPPS_LENGTH;
 8000444:	4b15      	ldr	r3, [pc, #84]	@ (800049c <sendCAN+0xb4>)
 8000446:	2201      	movs	r2, #1
 8000448:	611a      	str	r2, [r3, #16]
			ter_bpps_pack(TxData, &TeR.bpps, sizeof(TxData)); //Empaquetamos
 800044a:	2208      	movs	r2, #8
 800044c:	4918      	ldr	r1, [pc, #96]	@ (80004b0 <sendCAN+0xc8>)
 800044e:	4817      	ldr	r0, [pc, #92]	@ (80004ac <sendCAN+0xc4>)
 8000450:	f000 fe95 	bl	800117e <ter_bpps_pack>
			break;
 8000454:	e010      	b.n	8000478 <sendCAN+0x90>

		case 2: //STEER
			TxHeader.StdId = TER_STEER_FRAME_ID;
 8000456:	4b11      	ldr	r3, [pc, #68]	@ (800049c <sendCAN+0xb4>)
 8000458:	2205      	movs	r2, #5
 800045a:	601a      	str	r2, [r3, #0]
			TxHeader.DLC = TER_STEER_LENGTH;
 800045c:	4b0f      	ldr	r3, [pc, #60]	@ (800049c <sendCAN+0xb4>)
 800045e:	2208      	movs	r2, #8
 8000460:	611a      	str	r2, [r3, #16]
			ter_steer_pack(TxData, &TeR.steer, sizeof(TxData)); //Empaquetamos
 8000462:	2208      	movs	r2, #8
 8000464:	4913      	ldr	r1, [pc, #76]	@ (80004b4 <sendCAN+0xcc>)
 8000466:	4811      	ldr	r0, [pc, #68]	@ (80004ac <sendCAN+0xc4>)
 8000468:	f000 feae 	bl	80011c8 <ter_steer_pack>
			break;
 800046c:	e004      	b.n	8000478 <sendCAN+0x90>

		default: //Esto evita tener que contar mensajes
			msgIndex = 0; //cualquier otro valor retorna al ultimo mensaje
 800046e:	4b0d      	ldr	r3, [pc, #52]	@ (80004a4 <sendCAN+0xbc>)
 8000470:	2200      	movs	r2, #0
 8000472:	701a      	strb	r2, [r3, #0]
			return 1; //Evita que se envíe un mensaje doble terminando la funcion
 8000474:	2301      	movs	r3, #1
 8000476:	e00f      	b.n	8000498 <sendCAN+0xb0>
			break;
		}
		if (HAL_CAN_AddTxMessage(can, &TxHeader, TxData, &TxMailbox)
 8000478:	4b09      	ldr	r3, [pc, #36]	@ (80004a0 <sendCAN+0xb8>)
 800047a:	6818      	ldr	r0, [r3, #0]
 800047c:	4b0e      	ldr	r3, [pc, #56]	@ (80004b8 <sendCAN+0xd0>)
 800047e:	4a0b      	ldr	r2, [pc, #44]	@ (80004ac <sendCAN+0xc4>)
 8000480:	4906      	ldr	r1, [pc, #24]	@ (800049c <sendCAN+0xb4>)
 8000482:	f001 fd7e 	bl	8001f82 <HAL_CAN_AddTxMessage>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d004      	beq.n	8000496 <sendCAN+0xae>
				!= HAL_OK) {
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1); //Indicate Error with light
 800048c:	2201      	movs	r2, #1
 800048e:	2108      	movs	r1, #8
 8000490:	480a      	ldr	r0, [pc, #40]	@ (80004bc <sendCAN+0xd4>)
 8000492:	f002 fd6b 	bl	8002f6c <HAL_GPIO_WritePin>
		}
	}
	return 1;
 8000496:	2301      	movs	r3, #1
}
 8000498:	4618      	mov	r0, r3
 800049a:	bd80      	pop	{r7, pc}
 800049c:	20000064 	.word	0x20000064
 80004a0:	2000005c 	.word	0x2000005c
 80004a4:	200000ac 	.word	0x200000ac
 80004a8:	200000b0 	.word	0x200000b0
 80004ac:	2000007c 	.word	0x2000007c
 80004b0:	200000b4 	.word	0x200000b4
 80004b4:	200000b6 	.word	0x200000b6
 80004b8:	20000084 	.word	0x20000084
 80004bc:	40010800 	.word	0x40010800

080004c0 <command>:

//Implementa aqui los comandos que se han de ejecutar
uint8_t command(uint8_t cmd) {
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	4603      	mov	r3, r0
 80004c8:	71fb      	strb	r3, [r7, #7]
	switch (cmd) {
 80004ca:	79fb      	ldrb	r3, [r7, #7]
 80004cc:	3b01      	subs	r3, #1
 80004ce:	2b05      	cmp	r3, #5
 80004d0:	d848      	bhi.n	8000564 <command+0xa4>
 80004d2:	a201      	add	r2, pc, #4	@ (adr r2, 80004d8 <command+0x18>)
 80004d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004d8:	080004f1 	.word	0x080004f1
 80004dc:	08000513 	.word	0x08000513
 80004e0:	08000565 	.word	0x08000565
 80004e4:	08000565 	.word	0x08000565
 80004e8:	0800054d 	.word	0x0800054d
 80004ec:	08000535 	.word	0x08000535
	case TER_COMMAND_CMD_CALIBRATE_APPS_MIN_CHOICE: //Calibrate ACC 0% Pos and Store
		offset.low[2] = adcReadings[2]; //Recoje el valor actual
 80004f0:	4b20      	ldr	r3, [pc, #128]	@ (8000574 <command+0xb4>)
 80004f2:	689b      	ldr	r3, [r3, #8]
 80004f4:	461a      	mov	r2, r3
 80004f6:	4b20      	ldr	r3, [pc, #128]	@ (8000578 <command+0xb8>)
 80004f8:	609a      	str	r2, [r3, #8]
		offset.low[1] = adcReadings[1];
 80004fa:	4b1e      	ldr	r3, [pc, #120]	@ (8000574 <command+0xb4>)
 80004fc:	685b      	ldr	r3, [r3, #4]
 80004fe:	461a      	mov	r2, r3
 8000500:	4b1d      	ldr	r3, [pc, #116]	@ (8000578 <command+0xb8>)
 8000502:	605a      	str	r2, [r3, #4]
		EEPROM_Write(0,0,(uint8_t*) &offset, sizeof(offset)); //Almacena
 8000504:	2340      	movs	r3, #64	@ 0x40
 8000506:	4a1c      	ldr	r2, [pc, #112]	@ (8000578 <command+0xb8>)
 8000508:	2100      	movs	r1, #0
 800050a:	2000      	movs	r0, #0
 800050c:	f7ff fe36 	bl	800017c <EEPROM_Write>
		break;
 8000510:	e02a      	b.n	8000568 <command+0xa8>

	case TER_COMMAND_CMD_CALIBRATE_APPS_MAX_CHOICE: //Calibrate ACC 100% Pos and Store
		offset.high[2] = adcReadings[2]; //Recoje el valor actual
 8000512:	4b18      	ldr	r3, [pc, #96]	@ (8000574 <command+0xb4>)
 8000514:	689b      	ldr	r3, [r3, #8]
 8000516:	461a      	mov	r2, r3
 8000518:	4b17      	ldr	r3, [pc, #92]	@ (8000578 <command+0xb8>)
 800051a:	615a      	str	r2, [r3, #20]
		offset.high[1] = adcReadings[1];
 800051c:	4b15      	ldr	r3, [pc, #84]	@ (8000574 <command+0xb4>)
 800051e:	685b      	ldr	r3, [r3, #4]
 8000520:	461a      	mov	r2, r3
 8000522:	4b15      	ldr	r3, [pc, #84]	@ (8000578 <command+0xb8>)
 8000524:	611a      	str	r2, [r3, #16]
		EEPROM_Write(0,0,(uint8_t*) &offset, sizeof(offset));
 8000526:	2340      	movs	r3, #64	@ 0x40
 8000528:	4a13      	ldr	r2, [pc, #76]	@ (8000578 <command+0xb8>)
 800052a:	2100      	movs	r1, #0
 800052c:	2000      	movs	r0, #0
 800052e:	f7ff fe25 	bl	800017c <EEPROM_Write>
		break;
 8000532:	e019      	b.n	8000568 <command+0xa8>

	case TER_COMMAND_CMD_CALIBRATE_STEER_RIGHTEST_CHOICE: //Calibrate Rightest Steer Position
		offset.low[0] = adcReadings[0]; //Recoje el valor actual
 8000534:	4b0f      	ldr	r3, [pc, #60]	@ (8000574 <command+0xb4>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	461a      	mov	r2, r3
 800053a:	4b0f      	ldr	r3, [pc, #60]	@ (8000578 <command+0xb8>)
 800053c:	601a      	str	r2, [r3, #0]
		EEPROM_Write(0,0,(uint8_t*) &offset, sizeof(offset));
 800053e:	2340      	movs	r3, #64	@ 0x40
 8000540:	4a0d      	ldr	r2, [pc, #52]	@ (8000578 <command+0xb8>)
 8000542:	2100      	movs	r1, #0
 8000544:	2000      	movs	r0, #0
 8000546:	f7ff fe19 	bl	800017c <EEPROM_Write>
		break;
 800054a:	e00d      	b.n	8000568 <command+0xa8>

	case TER_COMMAND_CMD_CALIBRATE_STEER_LEFTEST_CHOICE: //Calibrate Leftest Steer Position
		offset.high[0] = adcReadings[0]; //Recoje el valor actual
 800054c:	4b09      	ldr	r3, [pc, #36]	@ (8000574 <command+0xb4>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	461a      	mov	r2, r3
 8000552:	4b09      	ldr	r3, [pc, #36]	@ (8000578 <command+0xb8>)
 8000554:	60da      	str	r2, [r3, #12]
		EEPROM_Write(0,0,(uint8_t*) &offset, sizeof(offset));
 8000556:	2340      	movs	r3, #64	@ 0x40
 8000558:	4a07      	ldr	r2, [pc, #28]	@ (8000578 <command+0xb8>)
 800055a:	2100      	movs	r1, #0
 800055c:	2000      	movs	r0, #0
 800055e:	f7ff fe0d 	bl	800017c <EEPROM_Write>
		break;
 8000562:	e001      	b.n	8000568 <command+0xa8>

	default:
		return 0;
 8000564:	2300      	movs	r3, #0
 8000566:	e000      	b.n	800056a <command+0xaa>
		break;

	}
	return 1;
 8000568:	2301      	movs	r3, #1
}
 800056a:	4618      	mov	r0, r3
 800056c:	3708      	adds	r7, #8
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	20000240 	.word	0x20000240
 8000578:	20000200 	.word	0x20000200

0800057c <checkPersistance>:
 */
#include "TeR_UTILS.h"
#include "stdbool.h"

//Comprueba que un error sucede durante más de tMax (La función prefiere mantener el estado OK)
uint8_t checkPersistance(persist_t *instance, uint8_t ok, uint32_t tMax) {
 800057c:	b580      	push	{r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af00      	add	r7, sp, #0
 8000582:	60f8      	str	r0, [r7, #12]
 8000584:	460b      	mov	r3, r1
 8000586:	607a      	str	r2, [r7, #4]
 8000588:	72fb      	strb	r3, [r7, #11]

	if (*instance > 0) { //Estabamos en error
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	2b00      	cmp	r3, #0
 8000590:	d011      	beq.n	80005b6 <checkPersistance+0x3a>
		if (ok) { //No tenemos error
 8000592:	7afb      	ldrb	r3, [r7, #11]
 8000594:	2b00      	cmp	r3, #0
 8000596:	d003      	beq.n	80005a0 <checkPersistance+0x24>
			*instance = 0; //Ponemos el timestamp a 0, ya no hay error
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	2200      	movs	r2, #0
 800059c:	601a      	str	r2, [r3, #0]
 800059e:	e012      	b.n	80005c6 <checkPersistance+0x4a>
		} else if (HAL_GetTick() - *instance >= tMax) { //El error supera maxtime
 80005a0:	f000 fea2 	bl	80012e8 <HAL_GetTick>
 80005a4:	4602      	mov	r2, r0
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	1ad3      	subs	r3, r2, r3
 80005ac:	687a      	ldr	r2, [r7, #4]
 80005ae:	429a      	cmp	r2, r3
 80005b0:	d809      	bhi.n	80005c6 <checkPersistance+0x4a>
			return 0; //Damos el error
 80005b2:	2300      	movs	r3, #0
 80005b4:	e008      	b.n	80005c8 <checkPersistance+0x4c>
		}
	} else if (!ok) { // no estabamos en error y ahora si
 80005b6:	7afb      	ldrb	r3, [r7, #11]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d104      	bne.n	80005c6 <checkPersistance+0x4a>
		*instance = HAL_GetTick();
 80005bc:	f000 fe94 	bl	80012e8 <HAL_GetTick>
 80005c0:	4602      	mov	r2, r0
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	601a      	str	r2, [r3, #0]
	}

	return 1; //Tenemos Error pero no hemos superado maxTime
 80005c6:	2301      	movs	r3, #1
}
 80005c8:	4618      	mov	r0, r3
 80005ca:	3710      	adds	r7, #16
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}

080005d0 <map>:


// Mapea un intervalo
int32_t map(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min,
		int32_t out_max) {
 80005d0:	b480      	push	{r7}
 80005d2:	b087      	sub	sp, #28
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	60f8      	str	r0, [r7, #12]
 80005d8:	60b9      	str	r1, [r7, #8]
 80005da:	607a      	str	r2, [r7, #4]
 80005dc:	603b      	str	r3, [r7, #0]
//Saturar las salidas si la entrada excede el límite de calibracion
	if (x < in_min)
 80005de:	68fa      	ldr	r2, [r7, #12]
 80005e0:	68bb      	ldr	r3, [r7, #8]
 80005e2:	429a      	cmp	r2, r3
 80005e4:	da01      	bge.n	80005ea <map+0x1a>
		return out_min;
 80005e6:	683b      	ldr	r3, [r7, #0]
 80005e8:	e016      	b.n	8000618 <map+0x48>
	if (x > in_max)
 80005ea:	68fa      	ldr	r2, [r7, #12]
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	429a      	cmp	r2, r3
 80005f0:	dd01      	ble.n	80005f6 <map+0x26>
		return out_max;
 80005f2:	6a3b      	ldr	r3, [r7, #32]
 80005f4:	e010      	b.n	8000618 <map+0x48>
//Mapear si estamos en rango seguro
	long val = (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80005f6:	68fa      	ldr	r2, [r7, #12]
 80005f8:	68bb      	ldr	r3, [r7, #8]
 80005fa:	1ad3      	subs	r3, r2, r3
 80005fc:	6a39      	ldr	r1, [r7, #32]
 80005fe:	683a      	ldr	r2, [r7, #0]
 8000600:	1a8a      	subs	r2, r1, r2
 8000602:	fb03 f202 	mul.w	r2, r3, r2
 8000606:	6879      	ldr	r1, [r7, #4]
 8000608:	68bb      	ldr	r3, [r7, #8]
 800060a:	1acb      	subs	r3, r1, r3
 800060c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000610:	683a      	ldr	r2, [r7, #0]
 8000612:	4413      	add	r3, r2
 8000614:	617b      	str	r3, [r7, #20]
	return val;
 8000616:	697b      	ldr	r3, [r7, #20]
}
 8000618:	4618      	mov	r0, r3
 800061a:	371c      	adds	r7, #28
 800061c:	46bd      	mov	sp, r7
 800061e:	bc80      	pop	{r7}
 8000620:	4770      	bx	lr
	...

08000624 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b084      	sub	sp, #16
 8000628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800062a:	1d3b      	adds	r3, r7, #4
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	605a      	str	r2, [r3, #4]
 8000632:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000634:	4b2e      	ldr	r3, [pc, #184]	@ (80006f0 <MX_ADC1_Init+0xcc>)
 8000636:	4a2f      	ldr	r2, [pc, #188]	@ (80006f4 <MX_ADC1_Init+0xd0>)
 8000638:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800063a:	4b2d      	ldr	r3, [pc, #180]	@ (80006f0 <MX_ADC1_Init+0xcc>)
 800063c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000640:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000642:	4b2b      	ldr	r3, [pc, #172]	@ (80006f0 <MX_ADC1_Init+0xcc>)
 8000644:	2201      	movs	r2, #1
 8000646:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000648:	4b29      	ldr	r3, [pc, #164]	@ (80006f0 <MX_ADC1_Init+0xcc>)
 800064a:	2200      	movs	r2, #0
 800064c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800064e:	4b28      	ldr	r3, [pc, #160]	@ (80006f0 <MX_ADC1_Init+0xcc>)
 8000650:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000654:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000656:	4b26      	ldr	r3, [pc, #152]	@ (80006f0 <MX_ADC1_Init+0xcc>)
 8000658:	2200      	movs	r2, #0
 800065a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 800065c:	4b24      	ldr	r3, [pc, #144]	@ (80006f0 <MX_ADC1_Init+0xcc>)
 800065e:	2204      	movs	r2, #4
 8000660:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000662:	4823      	ldr	r0, [pc, #140]	@ (80006f0 <MX_ADC1_Init+0xcc>)
 8000664:	f000 fe6e 	bl	8001344 <HAL_ADC_Init>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800066e:	f000 fab8 	bl	8000be2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000672:	2306      	movs	r3, #6
 8000674:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000676:	2301      	movs	r3, #1
 8000678:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800067a:	2300      	movs	r3, #0
 800067c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800067e:	1d3b      	adds	r3, r7, #4
 8000680:	4619      	mov	r1, r3
 8000682:	481b      	ldr	r0, [pc, #108]	@ (80006f0 <MX_ADC1_Init+0xcc>)
 8000684:	f001 f830 	bl	80016e8 <HAL_ADC_ConfigChannel>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800068e:	f000 faa8 	bl	8000be2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000692:	2307      	movs	r3, #7
 8000694:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000696:	2302      	movs	r3, #2
 8000698:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800069a:	1d3b      	adds	r3, r7, #4
 800069c:	4619      	mov	r1, r3
 800069e:	4814      	ldr	r0, [pc, #80]	@ (80006f0 <MX_ADC1_Init+0xcc>)
 80006a0:	f001 f822 	bl	80016e8 <HAL_ADC_ConfigChannel>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80006aa:	f000 fa9a 	bl	8000be2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80006ae:	2308      	movs	r3, #8
 80006b0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80006b2:	2303      	movs	r3, #3
 80006b4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b6:	1d3b      	adds	r3, r7, #4
 80006b8:	4619      	mov	r1, r3
 80006ba:	480d      	ldr	r0, [pc, #52]	@ (80006f0 <MX_ADC1_Init+0xcc>)
 80006bc:	f001 f814 	bl	80016e8 <HAL_ADC_ConfigChannel>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80006c6:	f000 fa8c 	bl	8000be2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80006ca:	2309      	movs	r3, #9
 80006cc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80006ce:	2304      	movs	r3, #4
 80006d0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	4619      	mov	r1, r3
 80006d6:	4806      	ldr	r0, [pc, #24]	@ (80006f0 <MX_ADC1_Init+0xcc>)
 80006d8:	f001 f806 	bl	80016e8 <HAL_ADC_ConfigChannel>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 80006e2:	f000 fa7e 	bl	8000be2 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006e6:	bf00      	nop
 80006e8:	3710      	adds	r7, #16
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	200000b8 	.word	0x200000b8
 80006f4:	40012400 	.word	0x40012400

080006f8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b08a      	sub	sp, #40	@ 0x28
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000700:	f107 0318 	add.w	r3, r7, #24
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
 800070c:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	4a33      	ldr	r2, [pc, #204]	@ (80007e0 <HAL_ADC_MspInit+0xe8>)
 8000714:	4293      	cmp	r3, r2
 8000716:	d15f      	bne.n	80007d8 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000718:	4b32      	ldr	r3, [pc, #200]	@ (80007e4 <HAL_ADC_MspInit+0xec>)
 800071a:	699b      	ldr	r3, [r3, #24]
 800071c:	4a31      	ldr	r2, [pc, #196]	@ (80007e4 <HAL_ADC_MspInit+0xec>)
 800071e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000722:	6193      	str	r3, [r2, #24]
 8000724:	4b2f      	ldr	r3, [pc, #188]	@ (80007e4 <HAL_ADC_MspInit+0xec>)
 8000726:	699b      	ldr	r3, [r3, #24]
 8000728:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800072c:	617b      	str	r3, [r7, #20]
 800072e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000730:	4b2c      	ldr	r3, [pc, #176]	@ (80007e4 <HAL_ADC_MspInit+0xec>)
 8000732:	699b      	ldr	r3, [r3, #24]
 8000734:	4a2b      	ldr	r2, [pc, #172]	@ (80007e4 <HAL_ADC_MspInit+0xec>)
 8000736:	f043 0304 	orr.w	r3, r3, #4
 800073a:	6193      	str	r3, [r2, #24]
 800073c:	4b29      	ldr	r3, [pc, #164]	@ (80007e4 <HAL_ADC_MspInit+0xec>)
 800073e:	699b      	ldr	r3, [r3, #24]
 8000740:	f003 0304 	and.w	r3, r3, #4
 8000744:	613b      	str	r3, [r7, #16]
 8000746:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000748:	4b26      	ldr	r3, [pc, #152]	@ (80007e4 <HAL_ADC_MspInit+0xec>)
 800074a:	699b      	ldr	r3, [r3, #24]
 800074c:	4a25      	ldr	r2, [pc, #148]	@ (80007e4 <HAL_ADC_MspInit+0xec>)
 800074e:	f043 0308 	orr.w	r3, r3, #8
 8000752:	6193      	str	r3, [r2, #24]
 8000754:	4b23      	ldr	r3, [pc, #140]	@ (80007e4 <HAL_ADC_MspInit+0xec>)
 8000756:	699b      	ldr	r3, [r3, #24]
 8000758:	f003 0308 	and.w	r3, r3, #8
 800075c:	60fb      	str	r3, [r7, #12]
 800075e:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = STEER_Pin|APPS_1_Pin;
 8000760:	23c0      	movs	r3, #192	@ 0xc0
 8000762:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000764:	2303      	movs	r3, #3
 8000766:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000768:	f107 0318 	add.w	r3, r7, #24
 800076c:	4619      	mov	r1, r3
 800076e:	481e      	ldr	r0, [pc, #120]	@ (80007e8 <HAL_ADC_MspInit+0xf0>)
 8000770:	f002 fa78 	bl	8002c64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = APPS_2_Pin|BPPS_Pin;
 8000774:	2303      	movs	r3, #3
 8000776:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000778:	2303      	movs	r3, #3
 800077a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800077c:	f107 0318 	add.w	r3, r7, #24
 8000780:	4619      	mov	r1, r3
 8000782:	481a      	ldr	r0, [pc, #104]	@ (80007ec <HAL_ADC_MspInit+0xf4>)
 8000784:	f002 fa6e 	bl	8002c64 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000788:	4b19      	ldr	r3, [pc, #100]	@ (80007f0 <HAL_ADC_MspInit+0xf8>)
 800078a:	4a1a      	ldr	r2, [pc, #104]	@ (80007f4 <HAL_ADC_MspInit+0xfc>)
 800078c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800078e:	4b18      	ldr	r3, [pc, #96]	@ (80007f0 <HAL_ADC_MspInit+0xf8>)
 8000790:	2200      	movs	r2, #0
 8000792:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000794:	4b16      	ldr	r3, [pc, #88]	@ (80007f0 <HAL_ADC_MspInit+0xf8>)
 8000796:	2200      	movs	r2, #0
 8000798:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800079a:	4b15      	ldr	r3, [pc, #84]	@ (80007f0 <HAL_ADC_MspInit+0xf8>)
 800079c:	2280      	movs	r2, #128	@ 0x80
 800079e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80007a0:	4b13      	ldr	r3, [pc, #76]	@ (80007f0 <HAL_ADC_MspInit+0xf8>)
 80007a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007a6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80007a8:	4b11      	ldr	r3, [pc, #68]	@ (80007f0 <HAL_ADC_MspInit+0xf8>)
 80007aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80007ae:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80007b0:	4b0f      	ldr	r3, [pc, #60]	@ (80007f0 <HAL_ADC_MspInit+0xf8>)
 80007b2:	2220      	movs	r2, #32
 80007b4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80007b6:	4b0e      	ldr	r3, [pc, #56]	@ (80007f0 <HAL_ADC_MspInit+0xf8>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80007bc:	480c      	ldr	r0, [pc, #48]	@ (80007f0 <HAL_ADC_MspInit+0xf8>)
 80007be:	f002 f969 	bl	8002a94 <HAL_DMA_Init>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 80007c8:	f000 fa0b 	bl	8000be2 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	4a08      	ldr	r2, [pc, #32]	@ (80007f0 <HAL_ADC_MspInit+0xf8>)
 80007d0:	621a      	str	r2, [r3, #32]
 80007d2:	4a07      	ldr	r2, [pc, #28]	@ (80007f0 <HAL_ADC_MspInit+0xf8>)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80007d8:	bf00      	nop
 80007da:	3728      	adds	r7, #40	@ 0x28
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	40012400 	.word	0x40012400
 80007e4:	40021000 	.word	0x40021000
 80007e8:	40010800 	.word	0x40010800
 80007ec:	40010c00 	.word	0x40010c00
 80007f0:	200000e8 	.word	0x200000e8
 80007f4:	40020008 	.word	0x40020008

080007f8 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b08a      	sub	sp, #40	@ 0x28
 80007fc:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80007fe:	4b25      	ldr	r3, [pc, #148]	@ (8000894 <MX_CAN_Init+0x9c>)
 8000800:	4a25      	ldr	r2, [pc, #148]	@ (8000898 <MX_CAN_Init+0xa0>)
 8000802:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000804:	4b23      	ldr	r3, [pc, #140]	@ (8000894 <MX_CAN_Init+0x9c>)
 8000806:	2204      	movs	r2, #4
 8000808:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800080a:	4b22      	ldr	r3, [pc, #136]	@ (8000894 <MX_CAN_Init+0x9c>)
 800080c:	2200      	movs	r2, #0
 800080e:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8000810:	4b20      	ldr	r3, [pc, #128]	@ (8000894 <MX_CAN_Init+0x9c>)
 8000812:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000816:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 8000818:	4b1e      	ldr	r3, [pc, #120]	@ (8000894 <MX_CAN_Init+0x9c>)
 800081a:	f44f 22a0 	mov.w	r2, #327680	@ 0x50000
 800081e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000820:	4b1c      	ldr	r3, [pc, #112]	@ (8000894 <MX_CAN_Init+0x9c>)
 8000822:	2200      	movs	r2, #0
 8000824:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000826:	4b1b      	ldr	r3, [pc, #108]	@ (8000894 <MX_CAN_Init+0x9c>)
 8000828:	2200      	movs	r2, #0
 800082a:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 800082c:	4b19      	ldr	r3, [pc, #100]	@ (8000894 <MX_CAN_Init+0x9c>)
 800082e:	2201      	movs	r2, #1
 8000830:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000832:	4b18      	ldr	r3, [pc, #96]	@ (8000894 <MX_CAN_Init+0x9c>)
 8000834:	2200      	movs	r2, #0
 8000836:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000838:	4b16      	ldr	r3, [pc, #88]	@ (8000894 <MX_CAN_Init+0x9c>)
 800083a:	2200      	movs	r2, #0
 800083c:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800083e:	4b15      	ldr	r3, [pc, #84]	@ (8000894 <MX_CAN_Init+0x9c>)
 8000840:	2200      	movs	r2, #0
 8000842:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000844:	4b13      	ldr	r3, [pc, #76]	@ (8000894 <MX_CAN_Init+0x9c>)
 8000846:	2200      	movs	r2, #0
 8000848:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800084a:	4812      	ldr	r0, [pc, #72]	@ (8000894 <MX_CAN_Init+0x9c>)
 800084c:	f001 f946 	bl	8001adc <HAL_CAN_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8000856:	f000 f9c4 	bl	8000be2 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
	CAN_FilterTypeDef canfilterconfig; //Configured for it to just respond to cmd commands
	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 800085a:	2301      	movs	r3, #1
 800085c:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterBank = 0; // which filter bank to use from the assigned ones
 800085e:	2300      	movs	r3, #0
 8000860:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000862:	2300      	movs	r3, #0
 8000864:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterIdHigh = TER_COMMAND_FRAME_ID << 5;
 8000866:	2320      	movs	r3, #32
 8000868:	603b      	str	r3, [r7, #0]
	canfilterconfig.FilterIdLow = 0;
 800086a:	2300      	movs	r3, #0
 800086c:	607b      	str	r3, [r7, #4]
	canfilterconfig.FilterMaskIdHigh = 0;
 800086e:	2300      	movs	r3, #0
 8000870:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterMaskIdLow = 0;
 8000872:	2300      	movs	r3, #0
 8000874:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDLIST;
 8000876:	2301      	movs	r3, #1
 8000878:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800087a:	2301      	movs	r3, #1
 800087c:	61fb      	str	r3, [r7, #28]
	canfilterconfig.SlaveStartFilterBank = 0; // doesn't matter in single can controllers
 800087e:	2300      	movs	r3, #0
 8000880:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 8000882:	463b      	mov	r3, r7
 8000884:	4619      	mov	r1, r3
 8000886:	4803      	ldr	r0, [pc, #12]	@ (8000894 <MX_CAN_Init+0x9c>)
 8000888:	f001 fa6e 	bl	8001d68 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN_Init 2 */

}
 800088c:	bf00      	nop
 800088e:	3728      	adds	r7, #40	@ 0x28
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	2000012c 	.word	0x2000012c
 8000898:	40006400 	.word	0x40006400

0800089c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b088      	sub	sp, #32
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a4:	f107 0310 	add.w	r3, r7, #16
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	4a1c      	ldr	r2, [pc, #112]	@ (8000928 <HAL_CAN_MspInit+0x8c>)
 80008b8:	4293      	cmp	r3, r2
 80008ba:	d131      	bne.n	8000920 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80008bc:	4b1b      	ldr	r3, [pc, #108]	@ (800092c <HAL_CAN_MspInit+0x90>)
 80008be:	69db      	ldr	r3, [r3, #28]
 80008c0:	4a1a      	ldr	r2, [pc, #104]	@ (800092c <HAL_CAN_MspInit+0x90>)
 80008c2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80008c6:	61d3      	str	r3, [r2, #28]
 80008c8:	4b18      	ldr	r3, [pc, #96]	@ (800092c <HAL_CAN_MspInit+0x90>)
 80008ca:	69db      	ldr	r3, [r3, #28]
 80008cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80008d0:	60fb      	str	r3, [r7, #12]
 80008d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d4:	4b15      	ldr	r3, [pc, #84]	@ (800092c <HAL_CAN_MspInit+0x90>)
 80008d6:	699b      	ldr	r3, [r3, #24]
 80008d8:	4a14      	ldr	r2, [pc, #80]	@ (800092c <HAL_CAN_MspInit+0x90>)
 80008da:	f043 0304 	orr.w	r3, r3, #4
 80008de:	6193      	str	r3, [r2, #24]
 80008e0:	4b12      	ldr	r3, [pc, #72]	@ (800092c <HAL_CAN_MspInit+0x90>)
 80008e2:	699b      	ldr	r3, [r3, #24]
 80008e4:	f003 0304 	and.w	r3, r3, #4
 80008e8:	60bb      	str	r3, [r7, #8]
 80008ea:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80008ec:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80008f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f2:	2300      	movs	r3, #0
 80008f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fa:	f107 0310 	add.w	r3, r7, #16
 80008fe:	4619      	mov	r1, r3
 8000900:	480b      	ldr	r0, [pc, #44]	@ (8000930 <HAL_CAN_MspInit+0x94>)
 8000902:	f002 f9af 	bl	8002c64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000906:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800090a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090c:	2302      	movs	r3, #2
 800090e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000910:	2303      	movs	r3, #3
 8000912:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000914:	f107 0310 	add.w	r3, r7, #16
 8000918:	4619      	mov	r1, r3
 800091a:	4805      	ldr	r0, [pc, #20]	@ (8000930 <HAL_CAN_MspInit+0x94>)
 800091c:	f002 f9a2 	bl	8002c64 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000920:	bf00      	nop
 8000922:	3720      	adds	r7, #32
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	40006400 	.word	0x40006400
 800092c:	40021000 	.word	0x40021000
 8000930:	40010800 	.word	0x40010800

08000934 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800093a:	4b08      	ldr	r3, [pc, #32]	@ (800095c <MX_DMA_Init+0x28>)
 800093c:	695b      	ldr	r3, [r3, #20]
 800093e:	4a07      	ldr	r2, [pc, #28]	@ (800095c <MX_DMA_Init+0x28>)
 8000940:	f043 0301 	orr.w	r3, r3, #1
 8000944:	6153      	str	r3, [r2, #20]
 8000946:	4b05      	ldr	r3, [pc, #20]	@ (800095c <MX_DMA_Init+0x28>)
 8000948:	695b      	ldr	r3, [r3, #20]
 800094a:	f003 0301 	and.w	r3, r3, #1
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]

}
 8000952:	bf00      	nop
 8000954:	370c      	adds	r7, #12
 8000956:	46bd      	mov	sp, r7
 8000958:	bc80      	pop	{r7}
 800095a:	4770      	bx	lr
 800095c:	40021000 	.word	0x40021000

08000960 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b088      	sub	sp, #32
 8000964:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000966:	f107 0310 	add.w	r3, r7, #16
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	605a      	str	r2, [r3, #4]
 8000970:	609a      	str	r2, [r3, #8]
 8000972:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000974:	4b1d      	ldr	r3, [pc, #116]	@ (80009ec <MX_GPIO_Init+0x8c>)
 8000976:	699b      	ldr	r3, [r3, #24]
 8000978:	4a1c      	ldr	r2, [pc, #112]	@ (80009ec <MX_GPIO_Init+0x8c>)
 800097a:	f043 0320 	orr.w	r3, r3, #32
 800097e:	6193      	str	r3, [r2, #24]
 8000980:	4b1a      	ldr	r3, [pc, #104]	@ (80009ec <MX_GPIO_Init+0x8c>)
 8000982:	699b      	ldr	r3, [r3, #24]
 8000984:	f003 0320 	and.w	r3, r3, #32
 8000988:	60fb      	str	r3, [r7, #12]
 800098a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800098c:	4b17      	ldr	r3, [pc, #92]	@ (80009ec <MX_GPIO_Init+0x8c>)
 800098e:	699b      	ldr	r3, [r3, #24]
 8000990:	4a16      	ldr	r2, [pc, #88]	@ (80009ec <MX_GPIO_Init+0x8c>)
 8000992:	f043 0304 	orr.w	r3, r3, #4
 8000996:	6193      	str	r3, [r2, #24]
 8000998:	4b14      	ldr	r3, [pc, #80]	@ (80009ec <MX_GPIO_Init+0x8c>)
 800099a:	699b      	ldr	r3, [r3, #24]
 800099c:	f003 0304 	and.w	r3, r3, #4
 80009a0:	60bb      	str	r3, [r7, #8]
 80009a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a4:	4b11      	ldr	r3, [pc, #68]	@ (80009ec <MX_GPIO_Init+0x8c>)
 80009a6:	699b      	ldr	r3, [r3, #24]
 80009a8:	4a10      	ldr	r2, [pc, #64]	@ (80009ec <MX_GPIO_Init+0x8c>)
 80009aa:	f043 0308 	orr.w	r3, r3, #8
 80009ae:	6193      	str	r3, [r2, #24]
 80009b0:	4b0e      	ldr	r3, [pc, #56]	@ (80009ec <MX_GPIO_Init+0x8c>)
 80009b2:	699b      	ldr	r3, [r3, #24]
 80009b4:	f003 0308 	and.w	r3, r3, #8
 80009b8:	607b      	str	r3, [r7, #4]
 80009ba:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IMP_LED_Pin|DBG_LED_Pin, GPIO_PIN_RESET);
 80009bc:	2200      	movs	r2, #0
 80009be:	2118      	movs	r1, #24
 80009c0:	480b      	ldr	r0, [pc, #44]	@ (80009f0 <MX_GPIO_Init+0x90>)
 80009c2:	f002 fad3 	bl	8002f6c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = IMP_LED_Pin|DBG_LED_Pin;
 80009c6:	2318      	movs	r3, #24
 80009c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ca:	2301      	movs	r3, #1
 80009cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d2:	2302      	movs	r3, #2
 80009d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d6:	f107 0310 	add.w	r3, r7, #16
 80009da:	4619      	mov	r1, r3
 80009dc:	4804      	ldr	r0, [pc, #16]	@ (80009f0 <MX_GPIO_Init+0x90>)
 80009de:	f002 f941 	bl	8002c64 <HAL_GPIO_Init>

}
 80009e2:	bf00      	nop
 80009e4:	3720      	adds	r7, #32
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40021000 	.word	0x40021000
 80009f0:	40010800 	.word	0x40010800

080009f4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009f8:	4b12      	ldr	r3, [pc, #72]	@ (8000a44 <MX_I2C1_Init+0x50>)
 80009fa:	4a13      	ldr	r2, [pc, #76]	@ (8000a48 <MX_I2C1_Init+0x54>)
 80009fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80009fe:	4b11      	ldr	r3, [pc, #68]	@ (8000a44 <MX_I2C1_Init+0x50>)
 8000a00:	4a12      	ldr	r2, [pc, #72]	@ (8000a4c <MX_I2C1_Init+0x58>)
 8000a02:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a04:	4b0f      	ldr	r3, [pc, #60]	@ (8000a44 <MX_I2C1_Init+0x50>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a44 <MX_I2C1_Init+0x50>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a10:	4b0c      	ldr	r3, [pc, #48]	@ (8000a44 <MX_I2C1_Init+0x50>)
 8000a12:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a16:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a18:	4b0a      	ldr	r3, [pc, #40]	@ (8000a44 <MX_I2C1_Init+0x50>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a1e:	4b09      	ldr	r3, [pc, #36]	@ (8000a44 <MX_I2C1_Init+0x50>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a24:	4b07      	ldr	r3, [pc, #28]	@ (8000a44 <MX_I2C1_Init+0x50>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a2a:	4b06      	ldr	r3, [pc, #24]	@ (8000a44 <MX_I2C1_Init+0x50>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a30:	4804      	ldr	r0, [pc, #16]	@ (8000a44 <MX_I2C1_Init+0x50>)
 8000a32:	f002 fab3 	bl	8002f9c <HAL_I2C_Init>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a3c:	f000 f8d1 	bl	8000be2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a40:	bf00      	nop
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	20000190 	.word	0x20000190
 8000a48:	40005400 	.word	0x40005400
 8000a4c:	00061a80 	.word	0x00061a80

08000a50 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b088      	sub	sp, #32
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a58:	f107 0310 	add.w	r3, r7, #16
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4a15      	ldr	r2, [pc, #84]	@ (8000ac0 <HAL_I2C_MspInit+0x70>)
 8000a6c:	4293      	cmp	r3, r2
 8000a6e:	d123      	bne.n	8000ab8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a70:	4b14      	ldr	r3, [pc, #80]	@ (8000ac4 <HAL_I2C_MspInit+0x74>)
 8000a72:	699b      	ldr	r3, [r3, #24]
 8000a74:	4a13      	ldr	r2, [pc, #76]	@ (8000ac4 <HAL_I2C_MspInit+0x74>)
 8000a76:	f043 0308 	orr.w	r3, r3, #8
 8000a7a:	6193      	str	r3, [r2, #24]
 8000a7c:	4b11      	ldr	r3, [pc, #68]	@ (8000ac4 <HAL_I2C_MspInit+0x74>)
 8000a7e:	699b      	ldr	r3, [r3, #24]
 8000a80:	f003 0308 	and.w	r3, r3, #8
 8000a84:	60fb      	str	r3, [r7, #12]
 8000a86:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a88:	23c0      	movs	r3, #192	@ 0xc0
 8000a8a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a8c:	2312      	movs	r3, #18
 8000a8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a90:	2303      	movs	r3, #3
 8000a92:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a94:	f107 0310 	add.w	r3, r7, #16
 8000a98:	4619      	mov	r1, r3
 8000a9a:	480b      	ldr	r0, [pc, #44]	@ (8000ac8 <HAL_I2C_MspInit+0x78>)
 8000a9c:	f002 f8e2 	bl	8002c64 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000aa0:	4b08      	ldr	r3, [pc, #32]	@ (8000ac4 <HAL_I2C_MspInit+0x74>)
 8000aa2:	69db      	ldr	r3, [r3, #28]
 8000aa4:	4a07      	ldr	r2, [pc, #28]	@ (8000ac4 <HAL_I2C_MspInit+0x74>)
 8000aa6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000aaa:	61d3      	str	r3, [r2, #28]
 8000aac:	4b05      	ldr	r3, [pc, #20]	@ (8000ac4 <HAL_I2C_MspInit+0x74>)
 8000aae:	69db      	ldr	r3, [r3, #28]
 8000ab0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ab4:	60bb      	str	r3, [r7, #8]
 8000ab6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000ab8:	bf00      	nop
 8000aba:	3720      	adds	r7, #32
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	40005400 	.word	0x40005400
 8000ac4:	40021000 	.word	0x40021000
 8000ac8:	40010c00 	.word	0x40010c00

08000acc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ad0:	f000 fbb2 	bl	8001238 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ad4:	f000 f81e 	bl	8000b14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ad8:	f7ff ff42 	bl	8000960 <MX_GPIO_Init>
  MX_DMA_Init();
 8000adc:	f7ff ff2a 	bl	8000934 <MX_DMA_Init>
  MX_ADC1_Init();
 8000ae0:	f7ff fda0 	bl	8000624 <MX_ADC1_Init>
  MX_CAN_Init();
 8000ae4:	f7ff fe88 	bl	80007f8 <MX_CAN_Init>
  MX_TIM2_Init();
 8000ae8:	f000 fa1a 	bl	8000f20 <MX_TIM2_Init>
  MX_I2C1_Init();
 8000aec:	f7ff ff82 	bl	80009f4 <MX_I2C1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000af0:	f000 f86b 	bl	8000bca <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
	initPedal(&hadc1); //Carga los offsets en la placa y arranca enganchada al adc1
 8000af4:	4804      	ldr	r0, [pc, #16]	@ (8000b08 <main+0x3c>)
 8000af6:	f000 f87b 	bl	8000bf0 <initPedal>
	initCAN(&hcan, &htim2); //Arranca el can enganchado a el timer 2
 8000afa:	4904      	ldr	r1, [pc, #16]	@ (8000b0c <main+0x40>)
 8000afc:	4804      	ldr	r0, [pc, #16]	@ (8000b10 <main+0x44>)
 8000afe:	f7ff fc05 	bl	800030c <initCAN>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000b02:	bf00      	nop
 8000b04:	e7fd      	b.n	8000b02 <main+0x36>
 8000b06:	bf00      	nop
 8000b08:	200000b8 	.word	0x200000b8
 8000b0c:	20000250 	.word	0x20000250
 8000b10:	2000012c 	.word	0x2000012c

08000b14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b094      	sub	sp, #80	@ 0x50
 8000b18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b1a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b1e:	2228      	movs	r2, #40	@ 0x28
 8000b20:	2100      	movs	r1, #0
 8000b22:	4618      	mov	r0, r3
 8000b24:	f004 fbfd 	bl	8005322 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	60da      	str	r2, [r3, #12]
 8000b36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b38:	1d3b      	adds	r3, r7, #4
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	605a      	str	r2, [r3, #4]
 8000b40:	609a      	str	r2, [r3, #8]
 8000b42:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b44:	2301      	movs	r3, #1
 8000b46:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b48:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b52:	2301      	movs	r3, #1
 8000b54:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b56:	2302      	movs	r3, #2
 8000b58:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b5a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b5e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000b60:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8000b64:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b66:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f003 fa70 	bl	8004050 <HAL_RCC_OscConfig>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000b76:	f000 f834 	bl	8000be2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b7a:	230f      	movs	r3, #15
 8000b7c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b82:	2300      	movs	r3, #0
 8000b84:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b86:	2300      	movs	r3, #0
 8000b88:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b8e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	2101      	movs	r1, #1
 8000b96:	4618      	mov	r0, r3
 8000b98:	f003 fcdc 	bl	8004554 <HAL_RCC_ClockConfig>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000ba2:	f000 f81e 	bl	8000be2 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8000baa:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000bae:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bb0:	1d3b      	adds	r3, r7, #4
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f003 fe48 	bl	8004848 <HAL_RCCEx_PeriphCLKConfig>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000bbe:	f000 f810 	bl	8000be2 <Error_Handler>
  }
}
 8000bc2:	bf00      	nop
 8000bc4:	3750      	adds	r7, #80	@ 0x50
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	af00      	add	r7, sp, #0
  /* USB_LP_CAN1_RX0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	2014      	movs	r0, #20
 8000bd4:	f001 ff27 	bl	8002a26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000bd8:	2014      	movs	r0, #20
 8000bda:	f001 ff40 	bl	8002a5e <HAL_NVIC_EnableIRQ>
}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}

08000be2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000be2:	b480      	push	{r7}
 8000be4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be6:	b672      	cpsid	i
}
 8000be8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000bea:	bf00      	nop
 8000bec:	e7fd      	b.n	8000bea <Error_Handler+0x8>
	...

08000bf0 <initPedal>:
offsets_t offset;

//Estructura de lectura para el ADC
int32_t adcReadings[4]; //32*3, el adc saca 12 bits alineados a la derecha usamos enteros con signo pa que no nos la lien las restas al comprobar offsets

void initPedal(ADC_HandleTypeDef* hadc) {
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
	adc = hadc;
 8000bf8:	4a1a      	ldr	r2, [pc, #104]	@ (8000c64 <initPedal+0x74>)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	6013      	str	r3, [r2, #0]
	//Carga de los offsets
EEPROM_Read(0, 0, (uint8_t *) &offset, sizeof(offset)); //cargamos datos de la EEPROM
 8000bfe:	2340      	movs	r3, #64	@ 0x40
 8000c00:	4a19      	ldr	r2, [pc, #100]	@ (8000c68 <initPedal+0x78>)
 8000c02:	2100      	movs	r1, #0
 8000c04:	2000      	movs	r0, #0
 8000c06:	f7ff fb1f 	bl	8000248 <EEPROM_Read>
	//Check if there are offsets written in flash
	if(!offset.written) { // En un futuro lo ideal sería ver que los valores están en rangos lógicos
 8000c0a:	4b17      	ldr	r3, [pc, #92]	@ (8000c68 <initPedal+0x78>)
 8000c0c:	7e1b      	ldrb	r3, [r3, #24]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d11d      	bne.n	8000c4e <initPedal+0x5e>
		offset.high[0] = 4096; //Valores por defecto
 8000c12:	4b15      	ldr	r3, [pc, #84]	@ (8000c68 <initPedal+0x78>)
 8000c14:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000c18:	60da      	str	r2, [r3, #12]
		offset.high[1] = 4096;
 8000c1a:	4b13      	ldr	r3, [pc, #76]	@ (8000c68 <initPedal+0x78>)
 8000c1c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000c20:	611a      	str	r2, [r3, #16]
		offset.high[2] = 4096;
 8000c22:	4b11      	ldr	r3, [pc, #68]	@ (8000c68 <initPedal+0x78>)
 8000c24:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000c28:	615a      	str	r2, [r3, #20]
		offset.low[0] = 0;
 8000c2a:	4b0f      	ldr	r3, [pc, #60]	@ (8000c68 <initPedal+0x78>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
		offset.low[1] = 0;
 8000c30:	4b0d      	ldr	r3, [pc, #52]	@ (8000c68 <initPedal+0x78>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	605a      	str	r2, [r3, #4]
		offset.low[2] = 0;
 8000c36:	4b0c      	ldr	r3, [pc, #48]	@ (8000c68 <initPedal+0x78>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	609a      	str	r2, [r3, #8]
		offset.written = 1; // Establece un byte en memoria que indica que la placa ha sido programada
 8000c3c:	4b0a      	ldr	r3, [pc, #40]	@ (8000c68 <initPedal+0x78>)
 8000c3e:	2201      	movs	r2, #1
 8000c40:	761a      	strb	r2, [r3, #24]
		//ee_writeToRam(0, sizeof(offset), (uint8_t*) &offset);
		EEPROM_Write(0,0,(uint8_t *) &offset,  sizeof(offset));
 8000c42:	2340      	movs	r3, #64	@ 0x40
 8000c44:	4a08      	ldr	r2, [pc, #32]	@ (8000c68 <initPedal+0x78>)
 8000c46:	2100      	movs	r1, #0
 8000c48:	2000      	movs	r0, #0
 8000c4a:	f7ff fa97 	bl	800017c <EEPROM_Write>
	}

	//Inicializamos el DMA para que copie nuestros datos al buffer de lecturas
	//Hemos desactivado las interrupciones del mismo en el NVIC para que no obstruyan, solo nos interesa que anden disponibles
	HAL_ADC_Start_DMA(adc, (uint32_t*)adcReadings, 4); // Arrancamos el ADC en modo DMA
 8000c4e:	4b05      	ldr	r3, [pc, #20]	@ (8000c64 <initPedal+0x74>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	2204      	movs	r2, #4
 8000c54:	4905      	ldr	r1, [pc, #20]	@ (8000c6c <initPedal+0x7c>)
 8000c56:	4618      	mov	r0, r3
 8000c58:	f000 fc4c 	bl	80014f4 <HAL_ADC_Start_DMA>

}
 8000c5c:	bf00      	nop
 8000c5e:	3708      	adds	r7, #8
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	200001e4 	.word	0x200001e4
 8000c68:	20000200 	.word	0x20000200
 8000c6c:	20000240 	.word	0x20000240

08000c70 <readSensors>:

void readSensors() {
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af02      	add	r7, sp, #8

	//Se leen y convierten las señales
	TeR.bpps.bpps = map(adcReadings[3], MINBRAKE, MAXBRAKE, 0, 50); //Estamos con VREF de 5 porque hay un divisor
 8000c76:	4b66      	ldr	r3, [pc, #408]	@ (8000e10 <readSensors+0x1a0>)
 8000c78:	68d8      	ldr	r0, [r3, #12]
 8000c7a:	2332      	movs	r3, #50	@ 0x32
 8000c7c:	9300      	str	r3, [sp, #0]
 8000c7e:	2300      	movs	r3, #0
 8000c80:	f640 6265 	movw	r2, #3685	@ 0xe65
 8000c84:	f240 1199 	movw	r1, #409	@ 0x199
 8000c88:	f7ff fca2 	bl	80005d0 <map>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	b2da      	uxtb	r2, r3
 8000c90:	4b60      	ldr	r3, [pc, #384]	@ (8000e14 <readSensors+0x1a4>)
 8000c92:	711a      	strb	r2, [r3, #4]
	TeR.apps.apps_2 = map(adcReadings[2], offset.low[2], offset.high[2], 0,
 8000c94:	4b5e      	ldr	r3, [pc, #376]	@ (8000e10 <readSensors+0x1a0>)
 8000c96:	6898      	ldr	r0, [r3, #8]
 8000c98:	4b5f      	ldr	r3, [pc, #380]	@ (8000e18 <readSensors+0x1a8>)
 8000c9a:	689b      	ldr	r3, [r3, #8]
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4b5e      	ldr	r3, [pc, #376]	@ (8000e18 <readSensors+0x1a8>)
 8000ca0:	695b      	ldr	r3, [r3, #20]
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	23ff      	movs	r3, #255	@ 0xff
 8000ca6:	9300      	str	r3, [sp, #0]
 8000ca8:	2300      	movs	r3, #0
 8000caa:	f7ff fc91 	bl	80005d0 <map>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	b2da      	uxtb	r2, r3
 8000cb2:	4b58      	ldr	r3, [pc, #352]	@ (8000e14 <readSensors+0x1a4>)
 8000cb4:	705a      	strb	r2, [r3, #1]
			255); //Lectura de APPS1
	TeR.apps.apps_1 = map(adcReadings[1], offset.low[1], offset.high[1], 0,
 8000cb6:	4b56      	ldr	r3, [pc, #344]	@ (8000e10 <readSensors+0x1a0>)
 8000cb8:	6858      	ldr	r0, [r3, #4]
 8000cba:	4b57      	ldr	r3, [pc, #348]	@ (8000e18 <readSensors+0x1a8>)
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4b55      	ldr	r3, [pc, #340]	@ (8000e18 <readSensors+0x1a8>)
 8000cc2:	691b      	ldr	r3, [r3, #16]
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	23ff      	movs	r3, #255	@ 0xff
 8000cc8:	9300      	str	r3, [sp, #0]
 8000cca:	2300      	movs	r3, #0
 8000ccc:	f7ff fc80 	bl	80005d0 <map>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	b2da      	uxtb	r2, r3
 8000cd4:	4b4f      	ldr	r3, [pc, #316]	@ (8000e14 <readSensors+0x1a4>)
 8000cd6:	701a      	strb	r2, [r3, #0]
			255); //Lectura del APPS2
	TeR.steer.angle = map(adcReadings[0], offset.low[0], offset.high[0],
 8000cd8:	4b4d      	ldr	r3, [pc, #308]	@ (8000e10 <readSensors+0x1a0>)
 8000cda:	6818      	ldr	r0, [r3, #0]
 8000cdc:	4b4e      	ldr	r3, [pc, #312]	@ (8000e18 <readSensors+0x1a8>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	4b4d      	ldr	r3, [pc, #308]	@ (8000e18 <readSensors+0x1a8>)
 8000ce4:	68db      	ldr	r3, [r3, #12]
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	231e      	movs	r3, #30
 8000cea:	9300      	str	r3, [sp, #0]
 8000cec:	f06f 031d 	mvn.w	r3, #29
 8000cf0:	f7ff fc6e 	bl	80005d0 <map>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	b21a      	sxth	r2, r3
 8000cf8:	4b46      	ldr	r3, [pc, #280]	@ (8000e14 <readSensors+0x1a4>)
 8000cfa:	80da      	strh	r2, [r3, #6]
	-MAXWHEELANGLE, MAXWHEELANGLE); //Lectura ANGULO de giro (Poner factor)



	//Check for implausability T 11.8.9 Desviacion de 10 puntos en %
	impDelta = !checkPersistance(&RANGE_IMP,(abs(TeR.apps.apps_1 - TeR.apps.apps_2) < (255 * 0.1)),100);//Comprueba que la diferencia entre aceleradores es menor que el 10% activamente, solo falla si esta se da por más de 100ms
 8000cfc:	4b45      	ldr	r3, [pc, #276]	@ (8000e14 <readSensors+0x1a4>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	461a      	mov	r2, r3
 8000d02:	4b44      	ldr	r3, [pc, #272]	@ (8000e14 <readSensors+0x1a4>)
 8000d04:	785b      	ldrb	r3, [r3, #1]
 8000d06:	1ad3      	subs	r3, r2, r3
 8000d08:	f113 0f19 	cmn.w	r3, #25
 8000d0c:	db09      	blt.n	8000d22 <readSensors+0xb2>
 8000d0e:	4b41      	ldr	r3, [pc, #260]	@ (8000e14 <readSensors+0x1a4>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	461a      	mov	r2, r3
 8000d14:	4b3f      	ldr	r3, [pc, #252]	@ (8000e14 <readSensors+0x1a4>)
 8000d16:	785b      	ldrb	r3, [r3, #1]
 8000d18:	1ad3      	subs	r3, r2, r3
 8000d1a:	2b19      	cmp	r3, #25
 8000d1c:	dc01      	bgt.n	8000d22 <readSensors+0xb2>
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e000      	b.n	8000d24 <readSensors+0xb4>
 8000d22:	2300      	movs	r3, #0
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	2264      	movs	r2, #100	@ 0x64
 8000d28:	4619      	mov	r1, r3
 8000d2a:	483c      	ldr	r0, [pc, #240]	@ (8000e1c <readSensors+0x1ac>)
 8000d2c:	f7ff fc26 	bl	800057c <checkPersistance>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	bf0c      	ite	eq
 8000d36:	2301      	moveq	r3, #1
 8000d38:	2300      	movne	r3, #0
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	4b38      	ldr	r3, [pc, #224]	@ (8000e20 <readSensors+0x1b0>)
 8000d40:	701a      	strb	r2, [r3, #0]
	//Check if all signals are in range
	impRange = !checkPersistance(&DELTA_IMP,((adcReadings[1] > (offset.low[1] -MARGIN)) && (adcReadings[2] > (offset.low[2]-MARGIN)) && (adcReadings[3] > (MINBRAKE-MARGIN)) && (adcReadings[1] < (offset.high[1] + MARGIN)) && (adcReadings[2] < (offset.high[2] + MARGIN)) && (adcReadings[3] < (MAXBRAKE + MARGIN))),500); //Implausible range 500 millis
 8000d42:	4b33      	ldr	r3, [pc, #204]	@ (8000e10 <readSensors+0x1a0>)
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	461a      	mov	r2, r3
 8000d48:	4b33      	ldr	r3, [pc, #204]	@ (8000e18 <readSensors+0x1a8>)
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	3bc8      	subs	r3, #200	@ 0xc8
 8000d4e:	429a      	cmp	r2, r3
 8000d50:	d923      	bls.n	8000d9a <readSensors+0x12a>
 8000d52:	4b2f      	ldr	r3, [pc, #188]	@ (8000e10 <readSensors+0x1a0>)
 8000d54:	689b      	ldr	r3, [r3, #8]
 8000d56:	461a      	mov	r2, r3
 8000d58:	4b2f      	ldr	r3, [pc, #188]	@ (8000e18 <readSensors+0x1a8>)
 8000d5a:	689b      	ldr	r3, [r3, #8]
 8000d5c:	3bc8      	subs	r3, #200	@ 0xc8
 8000d5e:	429a      	cmp	r2, r3
 8000d60:	d91b      	bls.n	8000d9a <readSensors+0x12a>
 8000d62:	4b2b      	ldr	r3, [pc, #172]	@ (8000e10 <readSensors+0x1a0>)
 8000d64:	68db      	ldr	r3, [r3, #12]
 8000d66:	2bd1      	cmp	r3, #209	@ 0xd1
 8000d68:	dd17      	ble.n	8000d9a <readSensors+0x12a>
 8000d6a:	4b29      	ldr	r3, [pc, #164]	@ (8000e10 <readSensors+0x1a0>)
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	461a      	mov	r2, r3
 8000d70:	4b29      	ldr	r3, [pc, #164]	@ (8000e18 <readSensors+0x1a8>)
 8000d72:	691b      	ldr	r3, [r3, #16]
 8000d74:	33c8      	adds	r3, #200	@ 0xc8
 8000d76:	429a      	cmp	r2, r3
 8000d78:	d20f      	bcs.n	8000d9a <readSensors+0x12a>
 8000d7a:	4b25      	ldr	r3, [pc, #148]	@ (8000e10 <readSensors+0x1a0>)
 8000d7c:	689b      	ldr	r3, [r3, #8]
 8000d7e:	461a      	mov	r2, r3
 8000d80:	4b25      	ldr	r3, [pc, #148]	@ (8000e18 <readSensors+0x1a8>)
 8000d82:	695b      	ldr	r3, [r3, #20]
 8000d84:	33c8      	adds	r3, #200	@ 0xc8
 8000d86:	429a      	cmp	r2, r3
 8000d88:	d207      	bcs.n	8000d9a <readSensors+0x12a>
 8000d8a:	4b21      	ldr	r3, [pc, #132]	@ (8000e10 <readSensors+0x1a0>)
 8000d8c:	68db      	ldr	r3, [r3, #12]
 8000d8e:	f640 722d 	movw	r2, #3885	@ 0xf2d
 8000d92:	4293      	cmp	r3, r2
 8000d94:	dc01      	bgt.n	8000d9a <readSensors+0x12a>
 8000d96:	2301      	movs	r3, #1
 8000d98:	e000      	b.n	8000d9c <readSensors+0x12c>
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000da2:	4619      	mov	r1, r3
 8000da4:	481f      	ldr	r0, [pc, #124]	@ (8000e24 <readSensors+0x1b4>)
 8000da6:	f7ff fbe9 	bl	800057c <checkPersistance>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	bf0c      	ite	eq
 8000db0:	2301      	moveq	r3, #1
 8000db2:	2300      	movne	r3, #0
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	461a      	mov	r2, r3
 8000db8:	4b1b      	ldr	r3, [pc, #108]	@ (8000e28 <readSensors+0x1b8>)
 8000dba:	701a      	strb	r2, [r3, #0]
	TeR.apps.imp_flag = (impDelta || impRange); //Determine existing implausability
 8000dbc:	4b18      	ldr	r3, [pc, #96]	@ (8000e20 <readSensors+0x1b0>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d103      	bne.n	8000dcc <readSensors+0x15c>
 8000dc4:	4b18      	ldr	r3, [pc, #96]	@ (8000e28 <readSensors+0x1b8>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <readSensors+0x160>
 8000dcc:	2301      	movs	r3, #1
 8000dce:	e000      	b.n	8000dd2 <readSensors+0x162>
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	b2da      	uxtb	r2, r3
 8000dd4:	4b0f      	ldr	r3, [pc, #60]	@ (8000e14 <readSensors+0x1a4>)
 8000dd6:	70da      	strb	r2, [r3, #3]
	//Computa la media
	TeR.apps.apps_av = TeR.apps.imp_flag ? 0 :(TeR.apps.apps_2 + TeR.apps.apps_1) / 2;
 8000dd8:	4b0e      	ldr	r3, [pc, #56]	@ (8000e14 <readSensors+0x1a4>)
 8000dda:	78db      	ldrb	r3, [r3, #3]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d10a      	bne.n	8000df6 <readSensors+0x186>
 8000de0:	4b0c      	ldr	r3, [pc, #48]	@ (8000e14 <readSensors+0x1a4>)
 8000de2:	785b      	ldrb	r3, [r3, #1]
 8000de4:	461a      	mov	r2, r3
 8000de6:	4b0b      	ldr	r3, [pc, #44]	@ (8000e14 <readSensors+0x1a4>)
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	4413      	add	r3, r2
 8000dec:	0fda      	lsrs	r2, r3, #31
 8000dee:	4413      	add	r3, r2
 8000df0:	105b      	asrs	r3, r3, #1
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	e000      	b.n	8000df8 <readSensors+0x188>
 8000df6:	2300      	movs	r3, #0
 8000df8:	4a06      	ldr	r2, [pc, #24]	@ (8000e14 <readSensors+0x1a4>)
 8000dfa:	7093      	strb	r3, [r2, #2]


	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, TeR.apps.imp_flag); //Actualizamos el estado del led
 8000dfc:	4b05      	ldr	r3, [pc, #20]	@ (8000e14 <readSensors+0x1a4>)
 8000dfe:	78db      	ldrb	r3, [r3, #3]
 8000e00:	461a      	mov	r2, r3
 8000e02:	2108      	movs	r1, #8
 8000e04:	4809      	ldr	r0, [pc, #36]	@ (8000e2c <readSensors+0x1bc>)
 8000e06:	f002 f8b1 	bl	8002f6c <HAL_GPIO_WritePin>
}
 8000e0a:	bf00      	nop
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	20000240 	.word	0x20000240
 8000e14:	200000b0 	.word	0x200000b0
 8000e18:	20000200 	.word	0x20000200
 8000e1c:	200001ec 	.word	0x200001ec
 8000e20:	200001f1 	.word	0x200001f1
 8000e24:	200001e8 	.word	0x200001e8
 8000e28:	200001f0 	.word	0x200001f0
 8000e2c:	40010800 	.word	0x40010800

08000e30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b085      	sub	sp, #20
 8000e34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e36:	4b15      	ldr	r3, [pc, #84]	@ (8000e8c <HAL_MspInit+0x5c>)
 8000e38:	699b      	ldr	r3, [r3, #24]
 8000e3a:	4a14      	ldr	r2, [pc, #80]	@ (8000e8c <HAL_MspInit+0x5c>)
 8000e3c:	f043 0301 	orr.w	r3, r3, #1
 8000e40:	6193      	str	r3, [r2, #24]
 8000e42:	4b12      	ldr	r3, [pc, #72]	@ (8000e8c <HAL_MspInit+0x5c>)
 8000e44:	699b      	ldr	r3, [r3, #24]
 8000e46:	f003 0301 	and.w	r3, r3, #1
 8000e4a:	60bb      	str	r3, [r7, #8]
 8000e4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000e8c <HAL_MspInit+0x5c>)
 8000e50:	69db      	ldr	r3, [r3, #28]
 8000e52:	4a0e      	ldr	r2, [pc, #56]	@ (8000e8c <HAL_MspInit+0x5c>)
 8000e54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e58:	61d3      	str	r3, [r2, #28]
 8000e5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000e8c <HAL_MspInit+0x5c>)
 8000e5c:	69db      	ldr	r3, [r3, #28]
 8000e5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e62:	607b      	str	r3, [r7, #4]
 8000e64:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e66:	4b0a      	ldr	r3, [pc, #40]	@ (8000e90 <HAL_MspInit+0x60>)
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000e72:	60fb      	str	r3, [r7, #12]
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	4a04      	ldr	r2, [pc, #16]	@ (8000e90 <HAL_MspInit+0x60>)
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e82:	bf00      	nop
 8000e84:	3714      	adds	r7, #20
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bc80      	pop	{r7}
 8000e8a:	4770      	bx	lr
 8000e8c:	40021000 	.word	0x40021000
 8000e90:	40010000 	.word	0x40010000

08000e94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e98:	bf00      	nop
 8000e9a:	e7fd      	b.n	8000e98 <NMI_Handler+0x4>

08000e9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ea0:	bf00      	nop
 8000ea2:	e7fd      	b.n	8000ea0 <HardFault_Handler+0x4>

08000ea4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ea8:	bf00      	nop
 8000eaa:	e7fd      	b.n	8000ea8 <MemManage_Handler+0x4>

08000eac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eb0:	bf00      	nop
 8000eb2:	e7fd      	b.n	8000eb0 <BusFault_Handler+0x4>

08000eb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eb8:	bf00      	nop
 8000eba:	e7fd      	b.n	8000eb8 <UsageFault_Handler+0x4>

08000ebc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bc80      	pop	{r7}
 8000ec6:	4770      	bx	lr

08000ec8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bc80      	pop	{r7}
 8000ed2:	4770      	bx	lr

08000ed4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bc80      	pop	{r7}
 8000ede:	4770      	bx	lr

08000ee0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ee4:	f000 f9ee 	bl	80012c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ee8:	bf00      	nop
 8000eea:	bd80      	pop	{r7, pc}

08000eec <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000ef0:	4802      	ldr	r0, [pc, #8]	@ (8000efc <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000ef2:	f001 fa8f 	bl	8002414 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	2000012c 	.word	0x2000012c

08000f00 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f04:	4802      	ldr	r0, [pc, #8]	@ (8000f10 <TIM2_IRQHandler+0x10>)
 8000f06:	f003 fe03 	bl	8004b10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	20000250 	.word	0x20000250

08000f14 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bc80      	pop	{r7}
 8000f1e:	4770      	bx	lr

08000f20 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b086      	sub	sp, #24
 8000f24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f26:	f107 0308 	add.w	r3, r7, #8
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	605a      	str	r2, [r3, #4]
 8000f30:	609a      	str	r2, [r3, #8]
 8000f32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f34:	463b      	mov	r3, r7
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
 8000f3a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f3c:	4b1d      	ldr	r3, [pc, #116]	@ (8000fb4 <MX_TIM2_Init+0x94>)
 8000f3e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f42:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000f44:	4b1b      	ldr	r3, [pc, #108]	@ (8000fb4 <MX_TIM2_Init+0x94>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f4a:	4b1a      	ldr	r3, [pc, #104]	@ (8000fb4 <MX_TIM2_Init+0x94>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 63999;
 8000f50:	4b18      	ldr	r3, [pc, #96]	@ (8000fb4 <MX_TIM2_Init+0x94>)
 8000f52:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 8000f56:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f58:	4b16      	ldr	r3, [pc, #88]	@ (8000fb4 <MX_TIM2_Init+0x94>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f5e:	4b15      	ldr	r3, [pc, #84]	@ (8000fb4 <MX_TIM2_Init+0x94>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f64:	4813      	ldr	r0, [pc, #76]	@ (8000fb4 <MX_TIM2_Init+0x94>)
 8000f66:	f003 fd25 	bl	80049b4 <HAL_TIM_Base_Init>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000f70:	f7ff fe37 	bl	8000be2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f74:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f78:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f7a:	f107 0308 	add.w	r3, r7, #8
 8000f7e:	4619      	mov	r1, r3
 8000f80:	480c      	ldr	r0, [pc, #48]	@ (8000fb4 <MX_TIM2_Init+0x94>)
 8000f82:	f003 feed 	bl	8004d60 <HAL_TIM_ConfigClockSource>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000f8c:	f7ff fe29 	bl	8000be2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f90:	2300      	movs	r3, #0
 8000f92:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f94:	2300      	movs	r3, #0
 8000f96:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f98:	463b      	mov	r3, r7
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4805      	ldr	r0, [pc, #20]	@ (8000fb4 <MX_TIM2_Init+0x94>)
 8000f9e:	f004 f947 	bl	8005230 <HAL_TIMEx_MasterConfigSynchronization>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000fa8:	f7ff fe1b 	bl	8000be2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fac:	bf00      	nop
 8000fae:	3718      	adds	r7, #24
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20000250 	.word	0x20000250

08000fb8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000fc8:	d113      	bne.n	8000ff2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fca:	4b0c      	ldr	r3, [pc, #48]	@ (8000ffc <HAL_TIM_Base_MspInit+0x44>)
 8000fcc:	69db      	ldr	r3, [r3, #28]
 8000fce:	4a0b      	ldr	r2, [pc, #44]	@ (8000ffc <HAL_TIM_Base_MspInit+0x44>)
 8000fd0:	f043 0301 	orr.w	r3, r3, #1
 8000fd4:	61d3      	str	r3, [r2, #28]
 8000fd6:	4b09      	ldr	r3, [pc, #36]	@ (8000ffc <HAL_TIM_Base_MspInit+0x44>)
 8000fd8:	69db      	ldr	r3, [r3, #28]
 8000fda:	f003 0301 	and.w	r3, r3, #1
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	201c      	movs	r0, #28
 8000fe8:	f001 fd1d 	bl	8002a26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000fec:	201c      	movs	r0, #28
 8000fee:	f001 fd36 	bl	8002a5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000ff2:	bf00      	nop
 8000ff4:	3710      	adds	r7, #16
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40021000 	.word	0x40021000

08001000 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001000:	480c      	ldr	r0, [pc, #48]	@ (8001034 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001002:	490d      	ldr	r1, [pc, #52]	@ (8001038 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001004:	4a0d      	ldr	r2, [pc, #52]	@ (800103c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001006:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001008:	e002      	b.n	8001010 <LoopCopyDataInit>

0800100a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800100a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800100c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800100e:	3304      	adds	r3, #4

08001010 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001010:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001012:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001014:	d3f9      	bcc.n	800100a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001016:	4a0a      	ldr	r2, [pc, #40]	@ (8001040 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001018:	4c0a      	ldr	r4, [pc, #40]	@ (8001044 <LoopFillZerobss+0x22>)
  movs r3, #0
 800101a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800101c:	e001      	b.n	8001022 <LoopFillZerobss>

0800101e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800101e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001020:	3204      	adds	r2, #4

08001022 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001022:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001024:	d3fb      	bcc.n	800101e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001026:	f7ff ff75 	bl	8000f14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800102a:	f004 f983 	bl	8005334 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800102e:	f7ff fd4d 	bl	8000acc <main>
  bx lr
 8001032:	4770      	bx	lr
  ldr r0, =_sdata
 8001034:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001038:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800103c:	080053c8 	.word	0x080053c8
  ldr r2, =_sbss
 8001040:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 8001044:	20000308 	.word	0x20000308

08001048 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001048:	e7fe      	b.n	8001048 <ADC1_2_IRQHandler>

0800104a <pack_left_shift_u8>:

static inline uint8_t pack_left_shift_u8(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 800104a:	b480      	push	{r7}
 800104c:	b083      	sub	sp, #12
 800104e:	af00      	add	r7, sp, #0
 8001050:	4603      	mov	r3, r0
 8001052:	71fb      	strb	r3, [r7, #7]
 8001054:	460b      	mov	r3, r1
 8001056:	71bb      	strb	r3, [r7, #6]
 8001058:	4613      	mov	r3, r2
 800105a:	717b      	strb	r3, [r7, #5]
    return (uint8_t)((uint8_t)(value << shift) & mask);
 800105c:	79fa      	ldrb	r2, [r7, #7]
 800105e:	79bb      	ldrb	r3, [r7, #6]
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	b2da      	uxtb	r2, r3
 8001066:	797b      	ldrb	r3, [r7, #5]
 8001068:	4013      	ands	r3, r2
 800106a:	b2db      	uxtb	r3, r3
}
 800106c:	4618      	mov	r0, r3
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	bc80      	pop	{r7}
 8001074:	4770      	bx	lr

08001076 <pack_left_shift_u16>:

static inline uint8_t pack_left_shift_u16(
    uint16_t value,
    uint8_t shift,
    uint8_t mask)
{
 8001076:	b480      	push	{r7}
 8001078:	b083      	sub	sp, #12
 800107a:	af00      	add	r7, sp, #0
 800107c:	4603      	mov	r3, r0
 800107e:	80fb      	strh	r3, [r7, #6]
 8001080:	460b      	mov	r3, r1
 8001082:	717b      	strb	r3, [r7, #5]
 8001084:	4613      	mov	r3, r2
 8001086:	713b      	strb	r3, [r7, #4]
    return (uint8_t)((uint8_t)(value << shift) & mask);
 8001088:	88fa      	ldrh	r2, [r7, #6]
 800108a:	797b      	ldrb	r3, [r7, #5]
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	b2da      	uxtb	r2, r3
 8001092:	793b      	ldrb	r3, [r7, #4]
 8001094:	4013      	ands	r3, r2
 8001096:	b2db      	uxtb	r3, r3
}
 8001098:	4618      	mov	r0, r3
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	bc80      	pop	{r7}
 80010a0:	4770      	bx	lr

080010a2 <pack_right_shift_u16>:

static inline uint8_t pack_right_shift_u16(
    uint16_t value,
    uint8_t shift,
    uint8_t mask)
{
 80010a2:	b480      	push	{r7}
 80010a4:	b083      	sub	sp, #12
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	4603      	mov	r3, r0
 80010aa:	80fb      	strh	r3, [r7, #6]
 80010ac:	460b      	mov	r3, r1
 80010ae:	717b      	strb	r3, [r7, #5]
 80010b0:	4613      	mov	r3, r2
 80010b2:	713b      	strb	r3, [r7, #4]
    return (uint8_t)((uint8_t)(value >> shift) & mask);
 80010b4:	88fa      	ldrh	r2, [r7, #6]
 80010b6:	797b      	ldrb	r3, [r7, #5]
 80010b8:	fa42 f303 	asr.w	r3, r2, r3
 80010bc:	b2da      	uxtb	r2, r3
 80010be:	793b      	ldrb	r3, [r7, #4]
 80010c0:	4013      	ands	r3, r2
 80010c2:	b2db      	uxtb	r3, r3
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bc80      	pop	{r7}
 80010cc:	4770      	bx	lr

080010ce <ter_apps_pack>:

int ter_apps_pack(
    uint8_t *dst_p,
    const struct ter_apps_t *src_p,
    size_t size)
{
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b084      	sub	sp, #16
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	60f8      	str	r0, [r7, #12]
 80010d6:	60b9      	str	r1, [r7, #8]
 80010d8:	607a      	str	r2, [r7, #4]
    if (size < 8u) {
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2b07      	cmp	r3, #7
 80010de:	d802      	bhi.n	80010e6 <ter_apps_pack+0x18>
        return (-EINVAL);
 80010e0:	f06f 0315 	mvn.w	r3, #21
 80010e4:	e047      	b.n	8001176 <ter_apps_pack+0xa8>
    }

    memset(&dst_p[0], 0, 8);
 80010e6:	2208      	movs	r2, #8
 80010e8:	2100      	movs	r1, #0
 80010ea:	68f8      	ldr	r0, [r7, #12]
 80010ec:	f004 f919 	bl	8005322 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->apps_1, 0u, 0xffu);
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	22ff      	movs	r2, #255	@ 0xff
 80010f6:	2100      	movs	r1, #0
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ffa6 	bl	800104a <pack_left_shift_u8>
 80010fe:	4603      	mov	r3, r0
 8001100:	461a      	mov	r2, r3
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	4313      	orrs	r3, r2
 8001108:	b2da      	uxtb	r2, r3
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->apps_2, 0u, 0xffu);
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	785b      	ldrb	r3, [r3, #1]
 8001112:	22ff      	movs	r2, #255	@ 0xff
 8001114:	2100      	movs	r1, #0
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff ff97 	bl	800104a <pack_left_shift_u8>
 800111c:	4603      	mov	r3, r0
 800111e:	4619      	mov	r1, r3
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	3301      	adds	r3, #1
 8001124:	781a      	ldrb	r2, [r3, #0]
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	3301      	adds	r3, #1
 800112a:	430a      	orrs	r2, r1
 800112c:	b2d2      	uxtb	r2, r2
 800112e:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_left_shift_u8(src_p->apps_av, 0u, 0xffu);
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	789b      	ldrb	r3, [r3, #2]
 8001134:	22ff      	movs	r2, #255	@ 0xff
 8001136:	2100      	movs	r1, #0
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff ff86 	bl	800104a <pack_left_shift_u8>
 800113e:	4603      	mov	r3, r0
 8001140:	4619      	mov	r1, r3
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	3302      	adds	r3, #2
 8001146:	781a      	ldrb	r2, [r3, #0]
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	3302      	adds	r3, #2
 800114c:	430a      	orrs	r2, r1
 800114e:	b2d2      	uxtb	r2, r2
 8001150:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_left_shift_u8(src_p->imp_flag, 0u, 0xffu);
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	78db      	ldrb	r3, [r3, #3]
 8001156:	22ff      	movs	r2, #255	@ 0xff
 8001158:	2100      	movs	r1, #0
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff ff75 	bl	800104a <pack_left_shift_u8>
 8001160:	4603      	mov	r3, r0
 8001162:	4619      	mov	r1, r3
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	3303      	adds	r3, #3
 8001168:	781a      	ldrb	r2, [r3, #0]
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	3303      	adds	r3, #3
 800116e:	430a      	orrs	r2, r1
 8001170:	b2d2      	uxtb	r2, r2
 8001172:	701a      	strb	r2, [r3, #0]

    return (8);
 8001174:	2308      	movs	r3, #8
}
 8001176:	4618      	mov	r0, r3
 8001178:	3710      	adds	r7, #16
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <ter_bpps_pack>:

int ter_bpps_pack(
    uint8_t *dst_p,
    const struct ter_bpps_t *src_p,
    size_t size)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	b084      	sub	sp, #16
 8001182:	af00      	add	r7, sp, #0
 8001184:	60f8      	str	r0, [r7, #12]
 8001186:	60b9      	str	r1, [r7, #8]
 8001188:	607a      	str	r2, [r7, #4]
    if (size < 1u) {
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d102      	bne.n	8001196 <ter_bpps_pack+0x18>
        return (-EINVAL);
 8001190:	f06f 0315 	mvn.w	r3, #21
 8001194:	e014      	b.n	80011c0 <ter_bpps_pack+0x42>
    }

    memset(&dst_p[0], 0, 1);
 8001196:	2201      	movs	r2, #1
 8001198:	2100      	movs	r1, #0
 800119a:	68f8      	ldr	r0, [r7, #12]
 800119c:	f004 f8c1 	bl	8005322 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->bpps, 0u, 0xffu);
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	22ff      	movs	r2, #255	@ 0xff
 80011a6:	2100      	movs	r1, #0
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff ff4e 	bl	800104a <pack_left_shift_u8>
 80011ae:	4603      	mov	r3, r0
 80011b0:	461a      	mov	r2, r3
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	b2da      	uxtb	r2, r3
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	701a      	strb	r2, [r3, #0]

    return (1);
 80011be:	2301      	movs	r3, #1
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3710      	adds	r7, #16
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <ter_steer_pack>:

int ter_steer_pack(
    uint8_t *dst_p,
    const struct ter_steer_t *src_p,
    size_t size)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b086      	sub	sp, #24
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	60b9      	str	r1, [r7, #8]
 80011d2:	607a      	str	r2, [r7, #4]
    uint16_t angle;

    if (size < 8u) {
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2b07      	cmp	r3, #7
 80011d8:	d802      	bhi.n	80011e0 <ter_steer_pack+0x18>
        return (-EINVAL);
 80011da:	f06f 0315 	mvn.w	r3, #21
 80011de:	e027      	b.n	8001230 <ter_steer_pack+0x68>
    }

    memset(&dst_p[0], 0, 8);
 80011e0:	2208      	movs	r2, #8
 80011e2:	2100      	movs	r1, #0
 80011e4:	68f8      	ldr	r0, [r7, #12]
 80011e6:	f004 f89c 	bl	8005322 <memset>

    angle = (uint16_t)src_p->angle;
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011f0:	82fb      	strh	r3, [r7, #22]
    dst_p[0] |= pack_left_shift_u16(angle, 0u, 0xffu);
 80011f2:	8afb      	ldrh	r3, [r7, #22]
 80011f4:	22ff      	movs	r2, #255	@ 0xff
 80011f6:	2100      	movs	r1, #0
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff ff3c 	bl	8001076 <pack_left_shift_u16>
 80011fe:	4603      	mov	r3, r0
 8001200:	461a      	mov	r2, r3
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	4313      	orrs	r3, r2
 8001208:	b2da      	uxtb	r2, r3
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_right_shift_u16(angle, 8u, 0xffu);
 800120e:	8afb      	ldrh	r3, [r7, #22]
 8001210:	22ff      	movs	r2, #255	@ 0xff
 8001212:	2108      	movs	r1, #8
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff ff44 	bl	80010a2 <pack_right_shift_u16>
 800121a:	4603      	mov	r3, r0
 800121c:	4619      	mov	r1, r3
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	3301      	adds	r3, #1
 8001222:	781a      	ldrb	r2, [r3, #0]
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	3301      	adds	r3, #1
 8001228:	430a      	orrs	r2, r1
 800122a:	b2d2      	uxtb	r2, r2
 800122c:	701a      	strb	r2, [r3, #0]

    return (8);
 800122e:	2308      	movs	r3, #8
}
 8001230:	4618      	mov	r0, r3
 8001232:	3718      	adds	r7, #24
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800123c:	4b08      	ldr	r3, [pc, #32]	@ (8001260 <HAL_Init+0x28>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a07      	ldr	r2, [pc, #28]	@ (8001260 <HAL_Init+0x28>)
 8001242:	f043 0310 	orr.w	r3, r3, #16
 8001246:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001248:	2003      	movs	r0, #3
 800124a:	f001 fbe1 	bl	8002a10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800124e:	2000      	movs	r0, #0
 8001250:	f000 f808 	bl	8001264 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001254:	f7ff fdec 	bl	8000e30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001258:	2300      	movs	r3, #0
}
 800125a:	4618      	mov	r0, r3
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40022000 	.word	0x40022000

08001264 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800126c:	4b12      	ldr	r3, [pc, #72]	@ (80012b8 <HAL_InitTick+0x54>)
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	4b12      	ldr	r3, [pc, #72]	@ (80012bc <HAL_InitTick+0x58>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	4619      	mov	r1, r3
 8001276:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800127a:	fbb3 f3f1 	udiv	r3, r3, r1
 800127e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001282:	4618      	mov	r0, r3
 8001284:	f001 fbf9 	bl	8002a7a <HAL_SYSTICK_Config>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e00e      	b.n	80012b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2b0f      	cmp	r3, #15
 8001296:	d80a      	bhi.n	80012ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001298:	2200      	movs	r2, #0
 800129a:	6879      	ldr	r1, [r7, #4]
 800129c:	f04f 30ff 	mov.w	r0, #4294967295
 80012a0:	f001 fbc1 	bl	8002a26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012a4:	4a06      	ldr	r2, [pc, #24]	@ (80012c0 <HAL_InitTick+0x5c>)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012aa:	2300      	movs	r3, #0
 80012ac:	e000      	b.n	80012b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	20000000 	.word	0x20000000
 80012bc:	20000008 	.word	0x20000008
 80012c0:	20000004 	.word	0x20000004

080012c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012c8:	4b05      	ldr	r3, [pc, #20]	@ (80012e0 <HAL_IncTick+0x1c>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	461a      	mov	r2, r3
 80012ce:	4b05      	ldr	r3, [pc, #20]	@ (80012e4 <HAL_IncTick+0x20>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4413      	add	r3, r2
 80012d4:	4a03      	ldr	r2, [pc, #12]	@ (80012e4 <HAL_IncTick+0x20>)
 80012d6:	6013      	str	r3, [r2, #0]
}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	bc80      	pop	{r7}
 80012de:	4770      	bx	lr
 80012e0:	20000008 	.word	0x20000008
 80012e4:	20000304 	.word	0x20000304

080012e8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  return uwTick;
 80012ec:	4b02      	ldr	r3, [pc, #8]	@ (80012f8 <HAL_GetTick+0x10>)
 80012ee:	681b      	ldr	r3, [r3, #0]
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bc80      	pop	{r7}
 80012f6:	4770      	bx	lr
 80012f8:	20000304 	.word	0x20000304

080012fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001304:	f7ff fff0 	bl	80012e8 <HAL_GetTick>
 8001308:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001314:	d005      	beq.n	8001322 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001316:	4b0a      	ldr	r3, [pc, #40]	@ (8001340 <HAL_Delay+0x44>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	461a      	mov	r2, r3
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	4413      	add	r3, r2
 8001320:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001322:	bf00      	nop
 8001324:	f7ff ffe0 	bl	80012e8 <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	68fa      	ldr	r2, [r7, #12]
 8001330:	429a      	cmp	r2, r3
 8001332:	d8f7      	bhi.n	8001324 <HAL_Delay+0x28>
  {
  }
}
 8001334:	bf00      	nop
 8001336:	bf00      	nop
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	20000008 	.word	0x20000008

08001344 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b086      	sub	sp, #24
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800134c:	2300      	movs	r3, #0
 800134e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001350:	2300      	movs	r3, #0
 8001352:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001354:	2300      	movs	r3, #0
 8001356:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001358:	2300      	movs	r3, #0
 800135a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d101      	bne.n	8001366 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e0be      	b.n	80014e4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001370:	2b00      	cmp	r3, #0
 8001372:	d109      	bne.n	8001388 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2200      	movs	r2, #0
 8001378:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2200      	movs	r2, #0
 800137e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f7ff f9b8 	bl	80006f8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f000 faff 	bl	800198c <ADC_ConversionStop_Disable>
 800138e:	4603      	mov	r3, r0
 8001390:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001396:	f003 0310 	and.w	r3, r3, #16
 800139a:	2b00      	cmp	r3, #0
 800139c:	f040 8099 	bne.w	80014d2 <HAL_ADC_Init+0x18e>
 80013a0:	7dfb      	ldrb	r3, [r7, #23]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	f040 8095 	bne.w	80014d2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013ac:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80013b0:	f023 0302 	bic.w	r3, r3, #2
 80013b4:	f043 0202 	orr.w	r2, r3, #2
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80013c4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	7b1b      	ldrb	r3, [r3, #12]
 80013ca:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80013cc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80013ce:	68ba      	ldr	r2, [r7, #8]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80013dc:	d003      	beq.n	80013e6 <HAL_ADC_Init+0xa2>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d102      	bne.n	80013ec <HAL_ADC_Init+0xa8>
 80013e6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013ea:	e000      	b.n	80013ee <HAL_ADC_Init+0xaa>
 80013ec:	2300      	movs	r3, #0
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	7d1b      	ldrb	r3, [r3, #20]
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d119      	bne.n	8001430 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	7b1b      	ldrb	r3, [r3, #12]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d109      	bne.n	8001418 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	699b      	ldr	r3, [r3, #24]
 8001408:	3b01      	subs	r3, #1
 800140a:	035a      	lsls	r2, r3, #13
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	4313      	orrs	r3, r2
 8001410:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001414:	613b      	str	r3, [r7, #16]
 8001416:	e00b      	b.n	8001430 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800141c:	f043 0220 	orr.w	r2, r3, #32
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001428:	f043 0201 	orr.w	r2, r3, #1
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	693a      	ldr	r2, [r7, #16]
 8001440:	430a      	orrs	r2, r1
 8001442:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	689a      	ldr	r2, [r3, #8]
 800144a:	4b28      	ldr	r3, [pc, #160]	@ (80014ec <HAL_ADC_Init+0x1a8>)
 800144c:	4013      	ands	r3, r2
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	6812      	ldr	r2, [r2, #0]
 8001452:	68b9      	ldr	r1, [r7, #8]
 8001454:	430b      	orrs	r3, r1
 8001456:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001460:	d003      	beq.n	800146a <HAL_ADC_Init+0x126>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	2b01      	cmp	r3, #1
 8001468:	d104      	bne.n	8001474 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	691b      	ldr	r3, [r3, #16]
 800146e:	3b01      	subs	r3, #1
 8001470:	051b      	lsls	r3, r3, #20
 8001472:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800147a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	68fa      	ldr	r2, [r7, #12]
 8001484:	430a      	orrs	r2, r1
 8001486:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	689a      	ldr	r2, [r3, #8]
 800148e:	4b18      	ldr	r3, [pc, #96]	@ (80014f0 <HAL_ADC_Init+0x1ac>)
 8001490:	4013      	ands	r3, r2
 8001492:	68ba      	ldr	r2, [r7, #8]
 8001494:	429a      	cmp	r2, r3
 8001496:	d10b      	bne.n	80014b0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2200      	movs	r2, #0
 800149c:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014a2:	f023 0303 	bic.w	r3, r3, #3
 80014a6:	f043 0201 	orr.w	r2, r3, #1
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80014ae:	e018      	b.n	80014e2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014b4:	f023 0312 	bic.w	r3, r3, #18
 80014b8:	f043 0210 	orr.w	r2, r3, #16
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014c4:	f043 0201 	orr.w	r2, r3, #1
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80014d0:	e007      	b.n	80014e2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014d6:	f043 0210 	orr.w	r2, r3, #16
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80014e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3718      	adds	r7, #24
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	ffe1f7fd 	.word	0xffe1f7fd
 80014f0:	ff1f0efe 	.word	0xff1f0efe

080014f4 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b086      	sub	sp, #24
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001500:	2300      	movs	r3, #0
 8001502:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a64      	ldr	r2, [pc, #400]	@ (800169c <HAL_ADC_Start_DMA+0x1a8>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d004      	beq.n	8001518 <HAL_ADC_Start_DMA+0x24>
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a63      	ldr	r2, [pc, #396]	@ (80016a0 <HAL_ADC_Start_DMA+0x1ac>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d106      	bne.n	8001526 <HAL_ADC_Start_DMA+0x32>
 8001518:	4b60      	ldr	r3, [pc, #384]	@ (800169c <HAL_ADC_Start_DMA+0x1a8>)
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001520:	2b00      	cmp	r3, #0
 8001522:	f040 80b3 	bne.w	800168c <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800152c:	2b01      	cmp	r3, #1
 800152e:	d101      	bne.n	8001534 <HAL_ADC_Start_DMA+0x40>
 8001530:	2302      	movs	r3, #2
 8001532:	e0ae      	b.n	8001692 <HAL_ADC_Start_DMA+0x19e>
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	2201      	movs	r2, #1
 8001538:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800153c:	68f8      	ldr	r0, [r7, #12]
 800153e:	f000 f9cb 	bl	80018d8 <ADC_Enable>
 8001542:	4603      	mov	r3, r0
 8001544:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001546:	7dfb      	ldrb	r3, [r7, #23]
 8001548:	2b00      	cmp	r3, #0
 800154a:	f040 809a 	bne.w	8001682 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001552:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001556:	f023 0301 	bic.w	r3, r3, #1
 800155a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a4e      	ldr	r2, [pc, #312]	@ (80016a0 <HAL_ADC_Start_DMA+0x1ac>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d105      	bne.n	8001578 <HAL_ADC_Start_DMA+0x84>
 800156c:	4b4b      	ldr	r3, [pc, #300]	@ (800169c <HAL_ADC_Start_DMA+0x1a8>)
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001574:	2b00      	cmp	r3, #0
 8001576:	d115      	bne.n	80015a4 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800157c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800158e:	2b00      	cmp	r3, #0
 8001590:	d026      	beq.n	80015e0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001596:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800159a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80015a2:	e01d      	b.n	80015e0 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015a8:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a39      	ldr	r2, [pc, #228]	@ (800169c <HAL_ADC_Start_DMA+0x1a8>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d004      	beq.n	80015c4 <HAL_ADC_Start_DMA+0xd0>
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a38      	ldr	r2, [pc, #224]	@ (80016a0 <HAL_ADC_Start_DMA+0x1ac>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d10d      	bne.n	80015e0 <HAL_ADC_Start_DMA+0xec>
 80015c4:	4b35      	ldr	r3, [pc, #212]	@ (800169c <HAL_ADC_Start_DMA+0x1a8>)
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d007      	beq.n	80015e0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015d4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80015d8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d006      	beq.n	80015fa <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015f0:	f023 0206 	bic.w	r2, r3, #6
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80015f8:	e002      	b.n	8001600 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	2200      	movs	r2, #0
 80015fe:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	2200      	movs	r2, #0
 8001604:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	6a1b      	ldr	r3, [r3, #32]
 800160c:	4a25      	ldr	r2, [pc, #148]	@ (80016a4 <HAL_ADC_Start_DMA+0x1b0>)
 800160e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	6a1b      	ldr	r3, [r3, #32]
 8001614:	4a24      	ldr	r2, [pc, #144]	@ (80016a8 <HAL_ADC_Start_DMA+0x1b4>)
 8001616:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	6a1b      	ldr	r3, [r3, #32]
 800161c:	4a23      	ldr	r2, [pc, #140]	@ (80016ac <HAL_ADC_Start_DMA+0x1b8>)
 800161e:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f06f 0202 	mvn.w	r2, #2
 8001628:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	689a      	ldr	r2, [r3, #8]
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001638:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	6a18      	ldr	r0, [r3, #32]
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	334c      	adds	r3, #76	@ 0x4c
 8001644:	4619      	mov	r1, r3
 8001646:	68ba      	ldr	r2, [r7, #8]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f001 fa7d 	bl	8002b48 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001658:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800165c:	d108      	bne.n	8001670 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	689a      	ldr	r2, [r3, #8]
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 800166c:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800166e:	e00f      	b.n	8001690 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	689a      	ldr	r2, [r3, #8]
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800167e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001680:	e006      	b.n	8001690 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	2200      	movs	r2, #0
 8001686:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 800168a:	e001      	b.n	8001690 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001690:	7dfb      	ldrb	r3, [r7, #23]
}
 8001692:	4618      	mov	r0, r3
 8001694:	3718      	adds	r7, #24
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	40012400 	.word	0x40012400
 80016a0:	40012800 	.word	0x40012800
 80016a4:	08001a0f 	.word	0x08001a0f
 80016a8:	08001a8b 	.word	0x08001a8b
 80016ac:	08001aa7 	.word	0x08001aa7

080016b0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80016b8:	bf00      	nop
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	bc80      	pop	{r7}
 80016c0:	4770      	bx	lr

080016c2 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80016c2:	b480      	push	{r7}
 80016c4:	b083      	sub	sp, #12
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80016ca:	bf00      	nop
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bc80      	pop	{r7}
 80016d2:	4770      	bx	lr

080016d4 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80016dc:	bf00      	nop
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bc80      	pop	{r7}
 80016e4:	4770      	bx	lr
	...

080016e8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80016e8:	b480      	push	{r7}
 80016ea:	b085      	sub	sp, #20
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016f2:	2300      	movs	r3, #0
 80016f4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80016f6:	2300      	movs	r3, #0
 80016f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001700:	2b01      	cmp	r3, #1
 8001702:	d101      	bne.n	8001708 <HAL_ADC_ConfigChannel+0x20>
 8001704:	2302      	movs	r3, #2
 8001706:	e0dc      	b.n	80018c2 <HAL_ADC_ConfigChannel+0x1da>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2201      	movs	r2, #1
 800170c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	2b06      	cmp	r3, #6
 8001716:	d81c      	bhi.n	8001752 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685a      	ldr	r2, [r3, #4]
 8001722:	4613      	mov	r3, r2
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	4413      	add	r3, r2
 8001728:	3b05      	subs	r3, #5
 800172a:	221f      	movs	r2, #31
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	43db      	mvns	r3, r3
 8001732:	4019      	ands	r1, r3
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	6818      	ldr	r0, [r3, #0]
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685a      	ldr	r2, [r3, #4]
 800173c:	4613      	mov	r3, r2
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	4413      	add	r3, r2
 8001742:	3b05      	subs	r3, #5
 8001744:	fa00 f203 	lsl.w	r2, r0, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	430a      	orrs	r2, r1
 800174e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001750:	e03c      	b.n	80017cc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	2b0c      	cmp	r3, #12
 8001758:	d81c      	bhi.n	8001794 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685a      	ldr	r2, [r3, #4]
 8001764:	4613      	mov	r3, r2
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	4413      	add	r3, r2
 800176a:	3b23      	subs	r3, #35	@ 0x23
 800176c:	221f      	movs	r2, #31
 800176e:	fa02 f303 	lsl.w	r3, r2, r3
 8001772:	43db      	mvns	r3, r3
 8001774:	4019      	ands	r1, r3
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	6818      	ldr	r0, [r3, #0]
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	685a      	ldr	r2, [r3, #4]
 800177e:	4613      	mov	r3, r2
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	4413      	add	r3, r2
 8001784:	3b23      	subs	r3, #35	@ 0x23
 8001786:	fa00 f203 	lsl.w	r2, r0, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	430a      	orrs	r2, r1
 8001790:	631a      	str	r2, [r3, #48]	@ 0x30
 8001792:	e01b      	b.n	80017cc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685a      	ldr	r2, [r3, #4]
 800179e:	4613      	mov	r3, r2
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	4413      	add	r3, r2
 80017a4:	3b41      	subs	r3, #65	@ 0x41
 80017a6:	221f      	movs	r2, #31
 80017a8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ac:	43db      	mvns	r3, r3
 80017ae:	4019      	ands	r1, r3
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	6818      	ldr	r0, [r3, #0]
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685a      	ldr	r2, [r3, #4]
 80017b8:	4613      	mov	r3, r2
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	4413      	add	r3, r2
 80017be:	3b41      	subs	r3, #65	@ 0x41
 80017c0:	fa00 f203 	lsl.w	r2, r0, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	430a      	orrs	r2, r1
 80017ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2b09      	cmp	r3, #9
 80017d2:	d91c      	bls.n	800180e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	68d9      	ldr	r1, [r3, #12]
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	4613      	mov	r3, r2
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	4413      	add	r3, r2
 80017e4:	3b1e      	subs	r3, #30
 80017e6:	2207      	movs	r2, #7
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	43db      	mvns	r3, r3
 80017ee:	4019      	ands	r1, r3
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	6898      	ldr	r0, [r3, #8]
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	4613      	mov	r3, r2
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	4413      	add	r3, r2
 80017fe:	3b1e      	subs	r3, #30
 8001800:	fa00 f203 	lsl.w	r2, r0, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	430a      	orrs	r2, r1
 800180a:	60da      	str	r2, [r3, #12]
 800180c:	e019      	b.n	8001842 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	6919      	ldr	r1, [r3, #16]
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	4613      	mov	r3, r2
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	4413      	add	r3, r2
 800181e:	2207      	movs	r2, #7
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	43db      	mvns	r3, r3
 8001826:	4019      	ands	r1, r3
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	6898      	ldr	r0, [r3, #8]
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	4613      	mov	r3, r2
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	4413      	add	r3, r2
 8001836:	fa00 f203 	lsl.w	r2, r0, r3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	430a      	orrs	r2, r1
 8001840:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2b10      	cmp	r3, #16
 8001848:	d003      	beq.n	8001852 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800184e:	2b11      	cmp	r3, #17
 8001850:	d132      	bne.n	80018b8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a1d      	ldr	r2, [pc, #116]	@ (80018cc <HAL_ADC_ConfigChannel+0x1e4>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d125      	bne.n	80018a8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d126      	bne.n	80018b8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	689a      	ldr	r2, [r3, #8]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001878:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2b10      	cmp	r3, #16
 8001880:	d11a      	bne.n	80018b8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001882:	4b13      	ldr	r3, [pc, #76]	@ (80018d0 <HAL_ADC_ConfigChannel+0x1e8>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a13      	ldr	r2, [pc, #76]	@ (80018d4 <HAL_ADC_ConfigChannel+0x1ec>)
 8001888:	fba2 2303 	umull	r2, r3, r2, r3
 800188c:	0c9a      	lsrs	r2, r3, #18
 800188e:	4613      	mov	r3, r2
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	4413      	add	r3, r2
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001898:	e002      	b.n	80018a0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	3b01      	subs	r3, #1
 800189e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d1f9      	bne.n	800189a <HAL_ADC_ConfigChannel+0x1b2>
 80018a6:	e007      	b.n	80018b8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018ac:	f043 0220 	orr.w	r2, r3, #32
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2200      	movs	r2, #0
 80018bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80018c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3714      	adds	r7, #20
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bc80      	pop	{r7}
 80018ca:	4770      	bx	lr
 80018cc:	40012400 	.word	0x40012400
 80018d0:	20000000 	.word	0x20000000
 80018d4:	431bde83 	.word	0x431bde83

080018d8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80018e0:	2300      	movs	r3, #0
 80018e2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80018e4:	2300      	movs	r3, #0
 80018e6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d040      	beq.n	8001978 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	689a      	ldr	r2, [r3, #8]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f042 0201 	orr.w	r2, r2, #1
 8001904:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001906:	4b1f      	ldr	r3, [pc, #124]	@ (8001984 <ADC_Enable+0xac>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a1f      	ldr	r2, [pc, #124]	@ (8001988 <ADC_Enable+0xb0>)
 800190c:	fba2 2303 	umull	r2, r3, r2, r3
 8001910:	0c9b      	lsrs	r3, r3, #18
 8001912:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001914:	e002      	b.n	800191c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	3b01      	subs	r3, #1
 800191a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d1f9      	bne.n	8001916 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001922:	f7ff fce1 	bl	80012e8 <HAL_GetTick>
 8001926:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001928:	e01f      	b.n	800196a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800192a:	f7ff fcdd 	bl	80012e8 <HAL_GetTick>
 800192e:	4602      	mov	r2, r0
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	2b02      	cmp	r3, #2
 8001936:	d918      	bls.n	800196a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	2b01      	cmp	r3, #1
 8001944:	d011      	beq.n	800196a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800194a:	f043 0210 	orr.w	r2, r3, #16
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001956:	f043 0201 	orr.w	r2, r3, #1
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2200      	movs	r2, #0
 8001962:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e007      	b.n	800197a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	f003 0301 	and.w	r3, r3, #1
 8001974:	2b01      	cmp	r3, #1
 8001976:	d1d8      	bne.n	800192a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001978:	2300      	movs	r3, #0
}
 800197a:	4618      	mov	r0, r3
 800197c:	3710      	adds	r7, #16
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	20000000 	.word	0x20000000
 8001988:	431bde83 	.word	0x431bde83

0800198c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001994:	2300      	movs	r3, #0
 8001996:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d12e      	bne.n	8001a04 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	689a      	ldr	r2, [r3, #8]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f022 0201 	bic.w	r2, r2, #1
 80019b4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80019b6:	f7ff fc97 	bl	80012e8 <HAL_GetTick>
 80019ba:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80019bc:	e01b      	b.n	80019f6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80019be:	f7ff fc93 	bl	80012e8 <HAL_GetTick>
 80019c2:	4602      	mov	r2, r0
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d914      	bls.n	80019f6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d10d      	bne.n	80019f6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019de:	f043 0210 	orr.w	r2, r3, #16
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019ea:	f043 0201 	orr.w	r2, r3, #1
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e007      	b.n	8001a06 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	f003 0301 	and.w	r3, r3, #1
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d0dc      	beq.n	80019be <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b084      	sub	sp, #16
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a1a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a20:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d127      	bne.n	8001a78 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a2c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001a3e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001a42:	d115      	bne.n	8001a70 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d111      	bne.n	8001a70 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a50:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a5c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d105      	bne.n	8001a70 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a68:	f043 0201 	orr.w	r2, r3, #1
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001a70:	68f8      	ldr	r0, [r7, #12]
 8001a72:	f7ff fe1d 	bl	80016b0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001a76:	e004      	b.n	8001a82 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	6a1b      	ldr	r3, [r3, #32]
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	4798      	blx	r3
}
 8001a82:	bf00      	nop
 8001a84:	3710      	adds	r7, #16
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b084      	sub	sp, #16
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a96:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001a98:	68f8      	ldr	r0, [r7, #12]
 8001a9a:	f7ff fe12 	bl	80016c2 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001a9e:	bf00      	nop
 8001aa0:	3710      	adds	r7, #16
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b084      	sub	sp, #16
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ab2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ab8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ac4:	f043 0204 	orr.w	r2, r3, #4
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001acc:	68f8      	ldr	r0, [r7, #12]
 8001ace:	f7ff fe01 	bl	80016d4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ad2:	bf00      	nop
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
	...

08001adc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d101      	bne.n	8001aee <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e11c      	b.n	8001d28 <HAL_CAN_Init+0x24c>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d131      	bne.n	8001b5e <HAL_CAN_Init+0x82>
  {
    /* Reset callbacks to legacy functions */
    hcan->RxFifo0MsgPendingCallback  =  HAL_CAN_RxFifo0MsgPendingCallback;  /* Legacy weak RxFifo0MsgPendingCallback  */
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a8c      	ldr	r2, [pc, #560]	@ (8001d30 <HAL_CAN_Init+0x254>)
 8001afe:	641a      	str	r2, [r3, #64]	@ 0x40
    hcan->RxFifo0FullCallback        =  HAL_CAN_RxFifo0FullCallback;        /* Legacy weak RxFifo0FullCallback        */
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	4a8c      	ldr	r2, [pc, #560]	@ (8001d34 <HAL_CAN_Init+0x258>)
 8001b04:	645a      	str	r2, [r3, #68]	@ 0x44
    hcan->RxFifo1MsgPendingCallback  =  HAL_CAN_RxFifo1MsgPendingCallback;  /* Legacy weak RxFifo1MsgPendingCallback  */
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4a8b      	ldr	r2, [pc, #556]	@ (8001d38 <HAL_CAN_Init+0x25c>)
 8001b0a:	649a      	str	r2, [r3, #72]	@ 0x48
    hcan->RxFifo1FullCallback        =  HAL_CAN_RxFifo1FullCallback;        /* Legacy weak RxFifo1FullCallback        */
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	4a8b      	ldr	r2, [pc, #556]	@ (8001d3c <HAL_CAN_Init+0x260>)
 8001b10:	64da      	str	r2, [r3, #76]	@ 0x4c
    hcan->TxMailbox0CompleteCallback =  HAL_CAN_TxMailbox0CompleteCallback; /* Legacy weak TxMailbox0CompleteCallback */
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a8a      	ldr	r2, [pc, #552]	@ (8001d40 <HAL_CAN_Init+0x264>)
 8001b16:	629a      	str	r2, [r3, #40]	@ 0x28
    hcan->TxMailbox1CompleteCallback =  HAL_CAN_TxMailbox1CompleteCallback; /* Legacy weak TxMailbox1CompleteCallback */
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	4a8a      	ldr	r2, [pc, #552]	@ (8001d44 <HAL_CAN_Init+0x268>)
 8001b1c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hcan->TxMailbox2CompleteCallback =  HAL_CAN_TxMailbox2CompleteCallback; /* Legacy weak TxMailbox2CompleteCallback */
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a89      	ldr	r2, [pc, #548]	@ (8001d48 <HAL_CAN_Init+0x26c>)
 8001b22:	631a      	str	r2, [r3, #48]	@ 0x30
    hcan->TxMailbox0AbortCallback    =  HAL_CAN_TxMailbox0AbortCallback;    /* Legacy weak TxMailbox0AbortCallback    */
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	4a89      	ldr	r2, [pc, #548]	@ (8001d4c <HAL_CAN_Init+0x270>)
 8001b28:	635a      	str	r2, [r3, #52]	@ 0x34
    hcan->TxMailbox1AbortCallback    =  HAL_CAN_TxMailbox1AbortCallback;    /* Legacy weak TxMailbox1AbortCallback    */
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a88      	ldr	r2, [pc, #544]	@ (8001d50 <HAL_CAN_Init+0x274>)
 8001b2e:	639a      	str	r2, [r3, #56]	@ 0x38
    hcan->TxMailbox2AbortCallback    =  HAL_CAN_TxMailbox2AbortCallback;    /* Legacy weak TxMailbox2AbortCallback    */
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	4a88      	ldr	r2, [pc, #544]	@ (8001d54 <HAL_CAN_Init+0x278>)
 8001b34:	63da      	str	r2, [r3, #60]	@ 0x3c
    hcan->SleepCallback              =  HAL_CAN_SleepCallback;              /* Legacy weak SleepCallback              */
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a87      	ldr	r2, [pc, #540]	@ (8001d58 <HAL_CAN_Init+0x27c>)
 8001b3a:	651a      	str	r2, [r3, #80]	@ 0x50
    hcan->WakeUpFromRxMsgCallback    =  HAL_CAN_WakeUpFromRxMsgCallback;    /* Legacy weak WakeUpFromRxMsgCallback    */
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	4a87      	ldr	r2, [pc, #540]	@ (8001d5c <HAL_CAN_Init+0x280>)
 8001b40:	655a      	str	r2, [r3, #84]	@ 0x54
    hcan->ErrorCallback              =  HAL_CAN_ErrorCallback;              /* Legacy weak ErrorCallback              */
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4a86      	ldr	r2, [pc, #536]	@ (8001d60 <HAL_CAN_Init+0x284>)
 8001b46:	659a      	str	r2, [r3, #88]	@ 0x58

    if (hcan->MspInitCallback == NULL)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d102      	bne.n	8001b56 <HAL_CAN_Init+0x7a>
    {
      hcan->MspInitCallback = HAL_CAN_MspInit; /* Legacy weak MspInit */
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	4a84      	ldr	r2, [pc, #528]	@ (8001d64 <HAL_CAN_Init+0x288>)
 8001b54:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	4798      	blx	r3
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f042 0201 	orr.w	r2, r2, #1
 8001b6c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b6e:	f7ff fbbb 	bl	80012e8 <HAL_GetTick>
 8001b72:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001b74:	e012      	b.n	8001b9c <HAL_CAN_Init+0xc0>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b76:	f7ff fbb7 	bl	80012e8 <HAL_GetTick>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	2b0a      	cmp	r3, #10
 8001b82:	d90b      	bls.n	8001b9c <HAL_CAN_Init+0xc0>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b88:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2205      	movs	r2, #5
 8001b94:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e0c5      	b.n	8001d28 <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f003 0301 	and.w	r3, r3, #1
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d0e5      	beq.n	8001b76 <HAL_CAN_Init+0x9a>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f022 0202 	bic.w	r2, r2, #2
 8001bb8:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001bba:	f7ff fb95 	bl	80012e8 <HAL_GetTick>
 8001bbe:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001bc0:	e012      	b.n	8001be8 <HAL_CAN_Init+0x10c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001bc2:	f7ff fb91 	bl	80012e8 <HAL_GetTick>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	2b0a      	cmp	r3, #10
 8001bce:	d90b      	bls.n	8001be8 <HAL_CAN_Init+0x10c>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bd4:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2205      	movs	r2, #5
 8001be0:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e09f      	b.n	8001d28 <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d1e5      	bne.n	8001bc2 <HAL_CAN_Init+0xe6>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	7e1b      	ldrb	r3, [r3, #24]
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d108      	bne.n	8001c10 <HAL_CAN_Init+0x134>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001c0c:	601a      	str	r2, [r3, #0]
 8001c0e:	e007      	b.n	8001c20 <HAL_CAN_Init+0x144>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001c1e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	7e5b      	ldrb	r3, [r3, #25]
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d108      	bne.n	8001c3a <HAL_CAN_Init+0x15e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	e007      	b.n	8001c4a <HAL_CAN_Init+0x16e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001c48:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	7e9b      	ldrb	r3, [r3, #26]
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d108      	bne.n	8001c64 <HAL_CAN_Init+0x188>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f042 0220 	orr.w	r2, r2, #32
 8001c60:	601a      	str	r2, [r3, #0]
 8001c62:	e007      	b.n	8001c74 <HAL_CAN_Init+0x198>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f022 0220 	bic.w	r2, r2, #32
 8001c72:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	7edb      	ldrb	r3, [r3, #27]
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d108      	bne.n	8001c8e <HAL_CAN_Init+0x1b2>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f022 0210 	bic.w	r2, r2, #16
 8001c8a:	601a      	str	r2, [r3, #0]
 8001c8c:	e007      	b.n	8001c9e <HAL_CAN_Init+0x1c2>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f042 0210 	orr.w	r2, r2, #16
 8001c9c:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	7f1b      	ldrb	r3, [r3, #28]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d108      	bne.n	8001cb8 <HAL_CAN_Init+0x1dc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f042 0208 	orr.w	r2, r2, #8
 8001cb4:	601a      	str	r2, [r3, #0]
 8001cb6:	e007      	b.n	8001cc8 <HAL_CAN_Init+0x1ec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f022 0208 	bic.w	r2, r2, #8
 8001cc6:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	7f5b      	ldrb	r3, [r3, #29]
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d108      	bne.n	8001ce2 <HAL_CAN_Init+0x206>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f042 0204 	orr.w	r2, r2, #4
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	e007      	b.n	8001cf2 <HAL_CAN_Init+0x216>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f022 0204 	bic.w	r2, r2, #4
 8001cf0:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	689a      	ldr	r2, [r3, #8]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	68db      	ldr	r3, [r3, #12]
 8001cfa:	431a      	orrs	r2, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	691b      	ldr	r3, [r3, #16]
 8001d00:	431a      	orrs	r2, r3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	695b      	ldr	r3, [r3, #20]
 8001d06:	ea42 0103 	orr.w	r1, r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	1e5a      	subs	r2, r3, #1
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	430a      	orrs	r2, r1
 8001d16:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2201      	movs	r2, #1
 8001d22:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001d26:	2300      	movs	r3, #0
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3710      	adds	r7, #16
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	0800037d 	.word	0x0800037d
 8001d34:	0800280b 	.word	0x0800280b
 8001d38:	0800281d 	.word	0x0800281d
 8001d3c:	0800282f 	.word	0x0800282f
 8001d40:	0800279f 	.word	0x0800279f
 8001d44:	080027b1 	.word	0x080027b1
 8001d48:	080027c3 	.word	0x080027c3
 8001d4c:	080027d5 	.word	0x080027d5
 8001d50:	080027e7 	.word	0x080027e7
 8001d54:	080027f9 	.word	0x080027f9
 8001d58:	08002841 	.word	0x08002841
 8001d5c:	08002853 	.word	0x08002853
 8001d60:	08002865 	.word	0x08002865
 8001d64:	0800089d 	.word	0x0800089d

08001d68 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b087      	sub	sp, #28
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d7e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001d80:	7cfb      	ldrb	r3, [r7, #19]
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d003      	beq.n	8001d8e <HAL_CAN_ConfigFilter+0x26>
 8001d86:	7cfb      	ldrb	r3, [r7, #19]
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	f040 80aa 	bne.w	8001ee2 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001d94:	f043 0201 	orr.w	r2, r3, #1
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	695b      	ldr	r3, [r3, #20]
 8001da2:	f003 031f 	and.w	r3, r3, #31
 8001da6:	2201      	movs	r2, #1
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	43db      	mvns	r3, r3
 8001db8:	401a      	ands	r2, r3
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	69db      	ldr	r3, [r3, #28]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d123      	bne.n	8001e10 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	401a      	ands	r2, r3
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001de6:	683a      	ldr	r2, [r7, #0]
 8001de8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001dea:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	3248      	adds	r2, #72	@ 0x48
 8001df0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001e04:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001e06:	6979      	ldr	r1, [r7, #20]
 8001e08:	3348      	adds	r3, #72	@ 0x48
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	440b      	add	r3, r1
 8001e0e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	69db      	ldr	r3, [r3, #28]
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d122      	bne.n	8001e5e <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	431a      	orrs	r2, r3
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001e34:	683a      	ldr	r2, [r7, #0]
 8001e36:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001e38:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	3248      	adds	r2, #72	@ 0x48
 8001e3e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001e52:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001e54:	6979      	ldr	r1, [r7, #20]
 8001e56:	3348      	adds	r3, #72	@ 0x48
 8001e58:	00db      	lsls	r3, r3, #3
 8001e5a:	440b      	add	r3, r1
 8001e5c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	699b      	ldr	r3, [r3, #24]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d109      	bne.n	8001e7a <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	43db      	mvns	r3, r3
 8001e70:	401a      	ands	r2, r3
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001e78:	e007      	b.n	8001e8a <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	431a      	orrs	r2, r3
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	691b      	ldr	r3, [r3, #16]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d109      	bne.n	8001ea6 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	43db      	mvns	r3, r3
 8001e9c:	401a      	ands	r2, r3
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001ea4:	e007      	b.n	8001eb6 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	431a      	orrs	r2, r3
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	6a1b      	ldr	r3, [r3, #32]
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d107      	bne.n	8001ece <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	431a      	orrs	r2, r3
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001ed4:	f023 0201 	bic.w	r2, r3, #1
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	e006      	b.n	8001ef0 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ee6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
  }
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	371c      	adds	r7, #28
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bc80      	pop	{r7}
 8001ef8:	4770      	bx	lr

08001efa <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b084      	sub	sp, #16
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d12e      	bne.n	8001f6c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2202      	movs	r2, #2
 8001f12:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f022 0201 	bic.w	r2, r2, #1
 8001f24:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001f26:	f7ff f9df 	bl	80012e8 <HAL_GetTick>
 8001f2a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001f2c:	e012      	b.n	8001f54 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001f2e:	f7ff f9db 	bl	80012e8 <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	2b0a      	cmp	r3, #10
 8001f3a:	d90b      	bls.n	8001f54 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f40:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2205      	movs	r2, #5
 8001f4c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e012      	b.n	8001f7a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d1e5      	bne.n	8001f2e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	e006      	b.n	8001f7a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f70:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
  }
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3710      	adds	r7, #16
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001f82:	b480      	push	{r7}
 8001f84:	b089      	sub	sp, #36	@ 0x24
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	60f8      	str	r0, [r7, #12]
 8001f8a:	60b9      	str	r1, [r7, #8]
 8001f8c:	607a      	str	r2, [r7, #4]
 8001f8e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f96:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001fa0:	7ffb      	ldrb	r3, [r7, #31]
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d003      	beq.n	8001fae <HAL_CAN_AddTxMessage+0x2c>
 8001fa6:	7ffb      	ldrb	r3, [r7, #31]
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	f040 80ad 	bne.w	8002108 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d10a      	bne.n	8001fce <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d105      	bne.n	8001fce <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	f000 8095 	beq.w	80020f8 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	0e1b      	lsrs	r3, r3, #24
 8001fd2:	f003 0303 	and.w	r3, r3, #3
 8001fd6:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001fd8:	2201      	movs	r2, #1
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	409a      	lsls	r2, r3
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d10d      	bne.n	8002006 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001ff4:	68f9      	ldr	r1, [r7, #12]
 8001ff6:	6809      	ldr	r1, [r1, #0]
 8001ff8:	431a      	orrs	r2, r3
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	3318      	adds	r3, #24
 8001ffe:	011b      	lsls	r3, r3, #4
 8002000:	440b      	add	r3, r1
 8002002:	601a      	str	r2, [r3, #0]
 8002004:	e00f      	b.n	8002026 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002010:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002016:	68f9      	ldr	r1, [r7, #12]
 8002018:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800201a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	3318      	adds	r3, #24
 8002020:	011b      	lsls	r3, r3, #4
 8002022:	440b      	add	r3, r1
 8002024:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	6819      	ldr	r1, [r3, #0]
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	691a      	ldr	r2, [r3, #16]
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	3318      	adds	r3, #24
 8002032:	011b      	lsls	r3, r3, #4
 8002034:	440b      	add	r3, r1
 8002036:	3304      	adds	r3, #4
 8002038:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	7d1b      	ldrb	r3, [r3, #20]
 800203e:	2b01      	cmp	r3, #1
 8002040:	d111      	bne.n	8002066 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	3318      	adds	r3, #24
 800204a:	011b      	lsls	r3, r3, #4
 800204c:	4413      	add	r3, r2
 800204e:	3304      	adds	r3, #4
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	68fa      	ldr	r2, [r7, #12]
 8002054:	6811      	ldr	r1, [r2, #0]
 8002056:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	3318      	adds	r3, #24
 800205e:	011b      	lsls	r3, r3, #4
 8002060:	440b      	add	r3, r1
 8002062:	3304      	adds	r3, #4
 8002064:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	3307      	adds	r3, #7
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	061a      	lsls	r2, r3, #24
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	3306      	adds	r3, #6
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	041b      	lsls	r3, r3, #16
 8002076:	431a      	orrs	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	3305      	adds	r3, #5
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	021b      	lsls	r3, r3, #8
 8002080:	4313      	orrs	r3, r2
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	3204      	adds	r2, #4
 8002086:	7812      	ldrb	r2, [r2, #0]
 8002088:	4610      	mov	r0, r2
 800208a:	68fa      	ldr	r2, [r7, #12]
 800208c:	6811      	ldr	r1, [r2, #0]
 800208e:	ea43 0200 	orr.w	r2, r3, r0
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	011b      	lsls	r3, r3, #4
 8002096:	440b      	add	r3, r1
 8002098:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800209c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	3303      	adds	r3, #3
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	061a      	lsls	r2, r3, #24
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	3302      	adds	r3, #2
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	041b      	lsls	r3, r3, #16
 80020ae:	431a      	orrs	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	3301      	adds	r3, #1
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	021b      	lsls	r3, r3, #8
 80020b8:	4313      	orrs	r3, r2
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	7812      	ldrb	r2, [r2, #0]
 80020be:	4610      	mov	r0, r2
 80020c0:	68fa      	ldr	r2, [r7, #12]
 80020c2:	6811      	ldr	r1, [r2, #0]
 80020c4:	ea43 0200 	orr.w	r2, r3, r0
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	011b      	lsls	r3, r3, #4
 80020cc:	440b      	add	r3, r1
 80020ce:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80020d2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	3318      	adds	r3, #24
 80020dc:	011b      	lsls	r3, r3, #4
 80020de:	4413      	add	r3, r2
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	68fa      	ldr	r2, [r7, #12]
 80020e4:	6811      	ldr	r1, [r2, #0]
 80020e6:	f043 0201 	orr.w	r2, r3, #1
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	3318      	adds	r3, #24
 80020ee:	011b      	lsls	r3, r3, #4
 80020f0:	440b      	add	r3, r1
 80020f2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80020f4:	2300      	movs	r3, #0
 80020f6:	e00e      	b.n	8002116 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020fc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e006      	b.n	8002116 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800210c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
  }
}
 8002116:	4618      	mov	r0, r3
 8002118:	3724      	adds	r7, #36	@ 0x24
 800211a:	46bd      	mov	sp, r7
 800211c:	bc80      	pop	{r7}
 800211e:	4770      	bx	lr

08002120 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8002120:	b480      	push	{r7}
 8002122:	b085      	sub	sp, #20
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8002128:	2300      	movs	r3, #0
 800212a:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002132:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8002134:	7afb      	ldrb	r3, [r7, #11]
 8002136:	2b01      	cmp	r3, #1
 8002138:	d002      	beq.n	8002140 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800213a:	7afb      	ldrb	r3, [r7, #11]
 800213c:	2b02      	cmp	r3, #2
 800213e:	d11d      	bne.n	800217c <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d002      	beq.n	8002154 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	3301      	adds	r3, #1
 8002152:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d002      	beq.n	8002168 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	3301      	adds	r3, #1
 8002166:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d002      	beq.n	800217c <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	3301      	adds	r3, #1
 800217a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800217c:	68fb      	ldr	r3, [r7, #12]
}
 800217e:	4618      	mov	r0, r3
 8002180:	3714      	adds	r7, #20
 8002182:	46bd      	mov	sp, r7
 8002184:	bc80      	pop	{r7}
 8002186:	4770      	bx	lr

08002188 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002188:	b480      	push	{r7}
 800218a:	b087      	sub	sp, #28
 800218c:	af00      	add	r7, sp, #0
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	60b9      	str	r1, [r7, #8]
 8002192:	607a      	str	r2, [r7, #4]
 8002194:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	f893 3020 	ldrb.w	r3, [r3, #32]
 800219c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800219e:	7dfb      	ldrb	r3, [r7, #23]
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d003      	beq.n	80021ac <HAL_CAN_GetRxMessage+0x24>
 80021a4:	7dfb      	ldrb	r3, [r7, #23]
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	f040 8103 	bne.w	80023b2 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d10e      	bne.n	80021d0 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	f003 0303 	and.w	r3, r3, #3
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d116      	bne.n	80021ee <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021c4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e0f7      	b.n	80023c0 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	f003 0303 	and.w	r3, r3, #3
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d107      	bne.n	80021ee <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021e2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e0e8      	b.n	80023c0 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	331b      	adds	r3, #27
 80021f6:	011b      	lsls	r3, r3, #4
 80021f8:	4413      	add	r3, r2
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0204 	and.w	r2, r3, #4
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d10c      	bne.n	8002226 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	331b      	adds	r3, #27
 8002214:	011b      	lsls	r3, r3, #4
 8002216:	4413      	add	r3, r2
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	0d5b      	lsrs	r3, r3, #21
 800221c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	601a      	str	r2, [r3, #0]
 8002224:	e00b      	b.n	800223e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	331b      	adds	r3, #27
 800222e:	011b      	lsls	r3, r3, #4
 8002230:	4413      	add	r3, r2
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	08db      	lsrs	r3, r3, #3
 8002236:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	331b      	adds	r3, #27
 8002246:	011b      	lsls	r3, r3, #4
 8002248:	4413      	add	r3, r2
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0202 	and.w	r2, r3, #2
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	331b      	adds	r3, #27
 800225c:	011b      	lsls	r3, r3, #4
 800225e:	4413      	add	r3, r2
 8002260:	3304      	adds	r3, #4
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0308 	and.w	r3, r3, #8
 8002268:	2b00      	cmp	r3, #0
 800226a:	d003      	beq.n	8002274 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2208      	movs	r2, #8
 8002270:	611a      	str	r2, [r3, #16]
 8002272:	e00b      	b.n	800228c <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	331b      	adds	r3, #27
 800227c:	011b      	lsls	r3, r3, #4
 800227e:	4413      	add	r3, r2
 8002280:	3304      	adds	r3, #4
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 020f 	and.w	r2, r3, #15
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	331b      	adds	r3, #27
 8002294:	011b      	lsls	r3, r3, #4
 8002296:	4413      	add	r3, r2
 8002298:	3304      	adds	r3, #4
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	0a1b      	lsrs	r3, r3, #8
 800229e:	b2da      	uxtb	r2, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	331b      	adds	r3, #27
 80022ac:	011b      	lsls	r3, r3, #4
 80022ae:	4413      	add	r3, r2
 80022b0:	3304      	adds	r3, #4
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	0c1b      	lsrs	r3, r3, #16
 80022b6:	b29a      	uxth	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	011b      	lsls	r3, r3, #4
 80022c4:	4413      	add	r3, r2
 80022c6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	b2da      	uxtb	r2, r3
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	011b      	lsls	r3, r3, #4
 80022da:	4413      	add	r3, r2
 80022dc:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	0a1a      	lsrs	r2, r3, #8
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	3301      	adds	r3, #1
 80022e8:	b2d2      	uxtb	r2, r2
 80022ea:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	011b      	lsls	r3, r3, #4
 80022f4:	4413      	add	r3, r2
 80022f6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	0c1a      	lsrs	r2, r3, #16
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	3302      	adds	r3, #2
 8002302:	b2d2      	uxtb	r2, r2
 8002304:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	011b      	lsls	r3, r3, #4
 800230e:	4413      	add	r3, r2
 8002310:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	0e1a      	lsrs	r2, r3, #24
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	3303      	adds	r3, #3
 800231c:	b2d2      	uxtb	r2, r2
 800231e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	011b      	lsls	r3, r3, #4
 8002328:	4413      	add	r3, r2
 800232a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	3304      	adds	r3, #4
 8002334:	b2d2      	uxtb	r2, r2
 8002336:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	011b      	lsls	r3, r3, #4
 8002340:	4413      	add	r3, r2
 8002342:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	0a1a      	lsrs	r2, r3, #8
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	3305      	adds	r3, #5
 800234e:	b2d2      	uxtb	r2, r2
 8002350:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	011b      	lsls	r3, r3, #4
 800235a:	4413      	add	r3, r2
 800235c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	0c1a      	lsrs	r2, r3, #16
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	3306      	adds	r3, #6
 8002368:	b2d2      	uxtb	r2, r2
 800236a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	011b      	lsls	r3, r3, #4
 8002374:	4413      	add	r3, r2
 8002376:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	0e1a      	lsrs	r2, r3, #24
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	3307      	adds	r3, #7
 8002382:	b2d2      	uxtb	r2, r2
 8002384:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d108      	bne.n	800239e <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	68da      	ldr	r2, [r3, #12]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f042 0220 	orr.w	r2, r2, #32
 800239a:	60da      	str	r2, [r3, #12]
 800239c:	e007      	b.n	80023ae <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	691a      	ldr	r2, [r3, #16]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f042 0220 	orr.w	r2, r2, #32
 80023ac:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80023ae:	2300      	movs	r3, #0
 80023b0:	e006      	b.n	80023c0 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023b6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
  }
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	371c      	adds	r7, #28
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bc80      	pop	{r7}
 80023c8:	4770      	bx	lr

080023ca <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80023ca:	b480      	push	{r7}
 80023cc:	b085      	sub	sp, #20
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]
 80023d2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023da:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80023dc:	7bfb      	ldrb	r3, [r7, #15]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d002      	beq.n	80023e8 <HAL_CAN_ActivateNotification+0x1e>
 80023e2:	7bfb      	ldrb	r3, [r7, #15]
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d109      	bne.n	80023fc <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	6959      	ldr	r1, [r3, #20]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	683a      	ldr	r2, [r7, #0]
 80023f4:	430a      	orrs	r2, r1
 80023f6:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80023f8:	2300      	movs	r3, #0
 80023fa:	e006      	b.n	800240a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002400:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
  }
}
 800240a:	4618      	mov	r0, r3
 800240c:	3714      	adds	r7, #20
 800240e:	46bd      	mov	sp, r7
 8002410:	bc80      	pop	{r7}
 8002412:	4770      	bx	lr

08002414 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b08a      	sub	sp, #40	@ 0x28
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800241c:	2300      	movs	r3, #0
 800241e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	695b      	ldr	r3, [r3, #20]
 8002426:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	699b      	ldr	r3, [r3, #24]
 800244e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002450:	6a3b      	ldr	r3, [r7, #32]
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	2b00      	cmp	r3, #0
 8002458:	f000 8083 	beq.w	8002562 <HAL_CAN_IRQHandler+0x14e>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	2b00      	cmp	r3, #0
 8002464:	d025      	beq.n	80024b2 <HAL_CAN_IRQHandler+0x9e>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2201      	movs	r2, #1
 800246c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	f003 0302 	and.w	r3, r3, #2
 8002474:	2b00      	cmp	r3, #0
 8002476:	d004      	beq.n	8002482 <HAL_CAN_IRQHandler+0x6e>
      {
        /* Transmission Mailbox 0 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	4798      	blx	r3
 8002480:	e017      	b.n	80024b2 <HAL_CAN_IRQHandler+0x9e>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	f003 0304 	and.w	r3, r3, #4
 8002488:	2b00      	cmp	r3, #0
 800248a:	d004      	beq.n	8002496 <HAL_CAN_IRQHandler+0x82>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800248c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800248e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002492:	627b      	str	r3, [r7, #36]	@ 0x24
 8002494:	e00d      	b.n	80024b2 <HAL_CAN_IRQHandler+0x9e>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	f003 0308 	and.w	r3, r3, #8
 800249c:	2b00      	cmp	r3, #0
 800249e:	d004      	beq.n	80024aa <HAL_CAN_IRQHandler+0x96>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80024a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024a2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80024a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80024a8:	e003      	b.n	80024b2 <HAL_CAN_IRQHandler+0x9e>
        else
        {
          /* Transmission Mailbox 0 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d026      	beq.n	800250a <HAL_CAN_IRQHandler+0xf6>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80024c4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d004      	beq.n	80024da <HAL_CAN_IRQHandler+0xc6>
      {
        /* Transmission Mailbox 1 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	4798      	blx	r3
 80024d8:	e017      	b.n	800250a <HAL_CAN_IRQHandler+0xf6>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d004      	beq.n	80024ee <HAL_CAN_IRQHandler+0xda>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80024e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80024ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80024ec:	e00d      	b.n	800250a <HAL_CAN_IRQHandler+0xf6>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d004      	beq.n	8002502 <HAL_CAN_IRQHandler+0xee>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80024f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002500:	e003      	b.n	800250a <HAL_CAN_IRQHandler+0xf6>
        else
        {
          /* Transmission Mailbox 1 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d026      	beq.n	8002562 <HAL_CAN_IRQHandler+0x14e>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800251c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d004      	beq.n	8002532 <HAL_CAN_IRQHandler+0x11e>
      {
        /* Transmission Mailbox 2 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	4798      	blx	r3
 8002530:	e017      	b.n	8002562 <HAL_CAN_IRQHandler+0x14e>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d004      	beq.n	8002546 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800253c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800253e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002542:	627b      	str	r3, [r7, #36]	@ 0x24
 8002544:	e00d      	b.n	8002562 <HAL_CAN_IRQHandler+0x14e>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d004      	beq.n	800255a <HAL_CAN_IRQHandler+0x146>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002552:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002556:	627b      	str	r3, [r7, #36]	@ 0x24
 8002558:	e003      	b.n	8002562 <HAL_CAN_IRQHandler+0x14e>
        else
        {
          /* Transmission Mailbox 2 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	4798      	blx	r3
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002562:	6a3b      	ldr	r3, [r7, #32]
 8002564:	f003 0308 	and.w	r3, r3, #8
 8002568:	2b00      	cmp	r3, #0
 800256a:	d00c      	beq.n	8002586 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	f003 0310 	and.w	r3, r3, #16
 8002572:	2b00      	cmp	r3, #0
 8002574:	d007      	beq.n	8002586 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002578:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800257c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2210      	movs	r2, #16
 8002584:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002586:	6a3b      	ldr	r3, [r7, #32]
 8002588:	f003 0304 	and.w	r3, r3, #4
 800258c:	2b00      	cmp	r3, #0
 800258e:	d00c      	beq.n	80025aa <HAL_CAN_IRQHandler+0x196>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	f003 0308 	and.w	r3, r3, #8
 8002596:	2b00      	cmp	r3, #0
 8002598:	d007      	beq.n	80025aa <HAL_CAN_IRQHandler+0x196>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	2208      	movs	r2, #8
 80025a0:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80025aa:	6a3b      	ldr	r3, [r7, #32]
 80025ac:	f003 0302 	and.w	r3, r3, #2
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d00a      	beq.n	80025ca <HAL_CAN_IRQHandler+0x1b6>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	f003 0303 	and.w	r3, r3, #3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d003      	beq.n	80025ca <HAL_CAN_IRQHandler+0x1b6>
    {
      /* Receive FIFO 0 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80025ca:	6a3b      	ldr	r3, [r7, #32]
 80025cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d00c      	beq.n	80025ee <HAL_CAN_IRQHandler+0x1da>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	f003 0310 	and.w	r3, r3, #16
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d007      	beq.n	80025ee <HAL_CAN_IRQHandler+0x1da>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80025de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80025e4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	2210      	movs	r2, #16
 80025ec:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80025ee:	6a3b      	ldr	r3, [r7, #32]
 80025f0:	f003 0320 	and.w	r3, r3, #32
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d00c      	beq.n	8002612 <HAL_CAN_IRQHandler+0x1fe>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	f003 0308 	and.w	r3, r3, #8
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d007      	beq.n	8002612 <HAL_CAN_IRQHandler+0x1fe>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2208      	movs	r2, #8
 8002608:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002612:	6a3b      	ldr	r3, [r7, #32]
 8002614:	f003 0310 	and.w	r3, r3, #16
 8002618:	2b00      	cmp	r3, #0
 800261a:	d00a      	beq.n	8002632 <HAL_CAN_IRQHandler+0x21e>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	691b      	ldr	r3, [r3, #16]
 8002622:	f003 0303 	and.w	r3, r3, #3
 8002626:	2b00      	cmp	r3, #0
 8002628:	d003      	beq.n	8002632 <HAL_CAN_IRQHandler+0x21e>
    {
      /* Receive FIFO 1 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002632:	6a3b      	ldr	r3, [r7, #32]
 8002634:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d00c      	beq.n	8002656 <HAL_CAN_IRQHandler+0x242>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	f003 0310 	and.w	r3, r3, #16
 8002642:	2b00      	cmp	r3, #0
 8002644:	d007      	beq.n	8002656 <HAL_CAN_IRQHandler+0x242>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	2210      	movs	r2, #16
 800264c:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002656:	6a3b      	ldr	r3, [r7, #32]
 8002658:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d00c      	beq.n	800267a <HAL_CAN_IRQHandler+0x266>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	f003 0308 	and.w	r3, r3, #8
 8002666:	2b00      	cmp	r3, #0
 8002668:	d007      	beq.n	800267a <HAL_CAN_IRQHandler+0x266>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2208      	movs	r2, #8
 8002670:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800267a:	6a3b      	ldr	r3, [r7, #32]
 800267c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d07b      	beq.n	800277c <HAL_CAN_IRQHandler+0x368>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	f003 0304 	and.w	r3, r3, #4
 800268a:	2b00      	cmp	r3, #0
 800268c:	d072      	beq.n	8002774 <HAL_CAN_IRQHandler+0x360>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800268e:	6a3b      	ldr	r3, [r7, #32]
 8002690:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002694:	2b00      	cmp	r3, #0
 8002696:	d008      	beq.n	80026aa <HAL_CAN_IRQHandler+0x296>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d003      	beq.n	80026aa <HAL_CAN_IRQHandler+0x296>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80026a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a4:	f043 0301 	orr.w	r3, r3, #1
 80026a8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80026aa:	6a3b      	ldr	r3, [r7, #32]
 80026ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d008      	beq.n	80026c6 <HAL_CAN_IRQHandler+0x2b2>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d003      	beq.n	80026c6 <HAL_CAN_IRQHandler+0x2b2>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80026be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c0:	f043 0302 	orr.w	r3, r3, #2
 80026c4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80026c6:	6a3b      	ldr	r3, [r7, #32]
 80026c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d008      	beq.n	80026e2 <HAL_CAN_IRQHandler+0x2ce>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d003      	beq.n	80026e2 <HAL_CAN_IRQHandler+0x2ce>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80026da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026dc:	f043 0304 	orr.w	r3, r3, #4
 80026e0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80026e2:	6a3b      	ldr	r3, [r7, #32]
 80026e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d043      	beq.n	8002774 <HAL_CAN_IRQHandler+0x360>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d03e      	beq.n	8002774 <HAL_CAN_IRQHandler+0x360>
      {
        switch (esrflags & CAN_ESR_LEC)
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80026fc:	2b60      	cmp	r3, #96	@ 0x60
 80026fe:	d02b      	beq.n	8002758 <HAL_CAN_IRQHandler+0x344>
 8002700:	2b60      	cmp	r3, #96	@ 0x60
 8002702:	d82e      	bhi.n	8002762 <HAL_CAN_IRQHandler+0x34e>
 8002704:	2b50      	cmp	r3, #80	@ 0x50
 8002706:	d022      	beq.n	800274e <HAL_CAN_IRQHandler+0x33a>
 8002708:	2b50      	cmp	r3, #80	@ 0x50
 800270a:	d82a      	bhi.n	8002762 <HAL_CAN_IRQHandler+0x34e>
 800270c:	2b40      	cmp	r3, #64	@ 0x40
 800270e:	d019      	beq.n	8002744 <HAL_CAN_IRQHandler+0x330>
 8002710:	2b40      	cmp	r3, #64	@ 0x40
 8002712:	d826      	bhi.n	8002762 <HAL_CAN_IRQHandler+0x34e>
 8002714:	2b30      	cmp	r3, #48	@ 0x30
 8002716:	d010      	beq.n	800273a <HAL_CAN_IRQHandler+0x326>
 8002718:	2b30      	cmp	r3, #48	@ 0x30
 800271a:	d822      	bhi.n	8002762 <HAL_CAN_IRQHandler+0x34e>
 800271c:	2b10      	cmp	r3, #16
 800271e:	d002      	beq.n	8002726 <HAL_CAN_IRQHandler+0x312>
 8002720:	2b20      	cmp	r3, #32
 8002722:	d005      	beq.n	8002730 <HAL_CAN_IRQHandler+0x31c>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002724:	e01d      	b.n	8002762 <HAL_CAN_IRQHandler+0x34e>
            errorcode |= HAL_CAN_ERROR_STF;
 8002726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002728:	f043 0308 	orr.w	r3, r3, #8
 800272c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800272e:	e019      	b.n	8002764 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002732:	f043 0310 	orr.w	r3, r3, #16
 8002736:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002738:	e014      	b.n	8002764 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_ACK;
 800273a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800273c:	f043 0320 	orr.w	r3, r3, #32
 8002740:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002742:	e00f      	b.n	8002764 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BR;
 8002744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002746:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800274a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800274c:	e00a      	b.n	8002764 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BD;
 800274e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002750:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002754:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002756:	e005      	b.n	8002764 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800275a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800275e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002760:	e000      	b.n	8002764 <HAL_CAN_IRQHandler+0x350>
            break;
 8002762:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	699a      	ldr	r2, [r3, #24]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002772:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2204      	movs	r2, #4
 800277a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800277c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800277e:	2b00      	cmp	r3, #0
 8002780:	d009      	beq.n	8002796 <HAL_CAN_IRQHandler+0x382>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002788:	431a      	orrs	r2, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call Error callback function */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	4798      	blx	r3
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002796:	bf00      	nop
 8002798:	3728      	adds	r7, #40	@ 0x28
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800279e:	b480      	push	{r7}
 80027a0:	b083      	sub	sp, #12
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80027a6:	bf00      	nop
 80027a8:	370c      	adds	r7, #12
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bc80      	pop	{r7}
 80027ae:	4770      	bx	lr

080027b0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80027b8:	bf00      	nop
 80027ba:	370c      	adds	r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	bc80      	pop	{r7}
 80027c0:	4770      	bx	lr

080027c2 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80027c2:	b480      	push	{r7}
 80027c4:	b083      	sub	sp, #12
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80027ca:	bf00      	nop
 80027cc:	370c      	adds	r7, #12
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bc80      	pop	{r7}
 80027d2:	4770      	bx	lr

080027d4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80027dc:	bf00      	nop
 80027de:	370c      	adds	r7, #12
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bc80      	pop	{r7}
 80027e4:	4770      	bx	lr

080027e6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80027e6:	b480      	push	{r7}
 80027e8:	b083      	sub	sp, #12
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80027ee:	bf00      	nop
 80027f0:	370c      	adds	r7, #12
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bc80      	pop	{r7}
 80027f6:	4770      	bx	lr

080027f8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002800:	bf00      	nop
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	bc80      	pop	{r7}
 8002808:	4770      	bx	lr

0800280a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800280a:	b480      	push	{r7}
 800280c:	b083      	sub	sp, #12
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002812:	bf00      	nop
 8002814:	370c      	adds	r7, #12
 8002816:	46bd      	mov	sp, r7
 8002818:	bc80      	pop	{r7}
 800281a:	4770      	bx	lr

0800281c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002824:	bf00      	nop
 8002826:	370c      	adds	r7, #12
 8002828:	46bd      	mov	sp, r7
 800282a:	bc80      	pop	{r7}
 800282c:	4770      	bx	lr

0800282e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800282e:	b480      	push	{r7}
 8002830:	b083      	sub	sp, #12
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002836:	bf00      	nop
 8002838:	370c      	adds	r7, #12
 800283a:	46bd      	mov	sp, r7
 800283c:	bc80      	pop	{r7}
 800283e:	4770      	bx	lr

08002840 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002848:	bf00      	nop
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	bc80      	pop	{r7}
 8002850:	4770      	bx	lr

08002852 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002852:	b480      	push	{r7}
 8002854:	b083      	sub	sp, #12
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800285a:	bf00      	nop
 800285c:	370c      	adds	r7, #12
 800285e:	46bd      	mov	sp, r7
 8002860:	bc80      	pop	{r7}
 8002862:	4770      	bx	lr

08002864 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800286c:	bf00      	nop
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	bc80      	pop	{r7}
 8002874:	4770      	bx	lr
	...

08002878 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002878:	b480      	push	{r7}
 800287a:	b085      	sub	sp, #20
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f003 0307 	and.w	r3, r3, #7
 8002886:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002888:	4b0c      	ldr	r3, [pc, #48]	@ (80028bc <__NVIC_SetPriorityGrouping+0x44>)
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800288e:	68ba      	ldr	r2, [r7, #8]
 8002890:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002894:	4013      	ands	r3, r2
 8002896:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80028a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028aa:	4a04      	ldr	r2, [pc, #16]	@ (80028bc <__NVIC_SetPriorityGrouping+0x44>)
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	60d3      	str	r3, [r2, #12]
}
 80028b0:	bf00      	nop
 80028b2:	3714      	adds	r7, #20
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bc80      	pop	{r7}
 80028b8:	4770      	bx	lr
 80028ba:	bf00      	nop
 80028bc:	e000ed00 	.word	0xe000ed00

080028c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028c4:	4b04      	ldr	r3, [pc, #16]	@ (80028d8 <__NVIC_GetPriorityGrouping+0x18>)
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	0a1b      	lsrs	r3, r3, #8
 80028ca:	f003 0307 	and.w	r3, r3, #7
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bc80      	pop	{r7}
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	e000ed00 	.word	0xe000ed00

080028dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	4603      	mov	r3, r0
 80028e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	db0b      	blt.n	8002906 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028ee:	79fb      	ldrb	r3, [r7, #7]
 80028f0:	f003 021f 	and.w	r2, r3, #31
 80028f4:	4906      	ldr	r1, [pc, #24]	@ (8002910 <__NVIC_EnableIRQ+0x34>)
 80028f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028fa:	095b      	lsrs	r3, r3, #5
 80028fc:	2001      	movs	r0, #1
 80028fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002906:	bf00      	nop
 8002908:	370c      	adds	r7, #12
 800290a:	46bd      	mov	sp, r7
 800290c:	bc80      	pop	{r7}
 800290e:	4770      	bx	lr
 8002910:	e000e100 	.word	0xe000e100

08002914 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	4603      	mov	r3, r0
 800291c:	6039      	str	r1, [r7, #0]
 800291e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002920:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002924:	2b00      	cmp	r3, #0
 8002926:	db0a      	blt.n	800293e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	b2da      	uxtb	r2, r3
 800292c:	490c      	ldr	r1, [pc, #48]	@ (8002960 <__NVIC_SetPriority+0x4c>)
 800292e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002932:	0112      	lsls	r2, r2, #4
 8002934:	b2d2      	uxtb	r2, r2
 8002936:	440b      	add	r3, r1
 8002938:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800293c:	e00a      	b.n	8002954 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	b2da      	uxtb	r2, r3
 8002942:	4908      	ldr	r1, [pc, #32]	@ (8002964 <__NVIC_SetPriority+0x50>)
 8002944:	79fb      	ldrb	r3, [r7, #7]
 8002946:	f003 030f 	and.w	r3, r3, #15
 800294a:	3b04      	subs	r3, #4
 800294c:	0112      	lsls	r2, r2, #4
 800294e:	b2d2      	uxtb	r2, r2
 8002950:	440b      	add	r3, r1
 8002952:	761a      	strb	r2, [r3, #24]
}
 8002954:	bf00      	nop
 8002956:	370c      	adds	r7, #12
 8002958:	46bd      	mov	sp, r7
 800295a:	bc80      	pop	{r7}
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	e000e100 	.word	0xe000e100
 8002964:	e000ed00 	.word	0xe000ed00

08002968 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002968:	b480      	push	{r7}
 800296a:	b089      	sub	sp, #36	@ 0x24
 800296c:	af00      	add	r7, sp, #0
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f003 0307 	and.w	r3, r3, #7
 800297a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	f1c3 0307 	rsb	r3, r3, #7
 8002982:	2b04      	cmp	r3, #4
 8002984:	bf28      	it	cs
 8002986:	2304      	movcs	r3, #4
 8002988:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	3304      	adds	r3, #4
 800298e:	2b06      	cmp	r3, #6
 8002990:	d902      	bls.n	8002998 <NVIC_EncodePriority+0x30>
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	3b03      	subs	r3, #3
 8002996:	e000      	b.n	800299a <NVIC_EncodePriority+0x32>
 8002998:	2300      	movs	r3, #0
 800299a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800299c:	f04f 32ff 	mov.w	r2, #4294967295
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	fa02 f303 	lsl.w	r3, r2, r3
 80029a6:	43da      	mvns	r2, r3
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	401a      	ands	r2, r3
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029b0:	f04f 31ff 	mov.w	r1, #4294967295
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	fa01 f303 	lsl.w	r3, r1, r3
 80029ba:	43d9      	mvns	r1, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029c0:	4313      	orrs	r3, r2
         );
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3724      	adds	r7, #36	@ 0x24
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bc80      	pop	{r7}
 80029ca:	4770      	bx	lr

080029cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	3b01      	subs	r3, #1
 80029d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80029dc:	d301      	bcc.n	80029e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029de:	2301      	movs	r3, #1
 80029e0:	e00f      	b.n	8002a02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029e2:	4a0a      	ldr	r2, [pc, #40]	@ (8002a0c <SysTick_Config+0x40>)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	3b01      	subs	r3, #1
 80029e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029ea:	210f      	movs	r1, #15
 80029ec:	f04f 30ff 	mov.w	r0, #4294967295
 80029f0:	f7ff ff90 	bl	8002914 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029f4:	4b05      	ldr	r3, [pc, #20]	@ (8002a0c <SysTick_Config+0x40>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029fa:	4b04      	ldr	r3, [pc, #16]	@ (8002a0c <SysTick_Config+0x40>)
 80029fc:	2207      	movs	r2, #7
 80029fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	e000e010 	.word	0xe000e010

08002a10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f7ff ff2d 	bl	8002878 <__NVIC_SetPriorityGrouping>
}
 8002a1e:	bf00      	nop
 8002a20:	3708      	adds	r7, #8
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}

08002a26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a26:	b580      	push	{r7, lr}
 8002a28:	b086      	sub	sp, #24
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	60b9      	str	r1, [r7, #8]
 8002a30:	607a      	str	r2, [r7, #4]
 8002a32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a34:	2300      	movs	r3, #0
 8002a36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a38:	f7ff ff42 	bl	80028c0 <__NVIC_GetPriorityGrouping>
 8002a3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	68b9      	ldr	r1, [r7, #8]
 8002a42:	6978      	ldr	r0, [r7, #20]
 8002a44:	f7ff ff90 	bl	8002968 <NVIC_EncodePriority>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a4e:	4611      	mov	r1, r2
 8002a50:	4618      	mov	r0, r3
 8002a52:	f7ff ff5f 	bl	8002914 <__NVIC_SetPriority>
}
 8002a56:	bf00      	nop
 8002a58:	3718      	adds	r7, #24
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b082      	sub	sp, #8
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	4603      	mov	r3, r0
 8002a66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7ff ff35 	bl	80028dc <__NVIC_EnableIRQ>
}
 8002a72:	bf00      	nop
 8002a74:	3708      	adds	r7, #8
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a7a:	b580      	push	{r7, lr}
 8002a7c:	b082      	sub	sp, #8
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f7ff ffa2 	bl	80029cc <SysTick_Config>
 8002a88:	4603      	mov	r3, r0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3708      	adds	r7, #8
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
	...

08002a94 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b085      	sub	sp, #20
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d101      	bne.n	8002aaa <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e043      	b.n	8002b32 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	461a      	mov	r2, r3
 8002ab0:	4b22      	ldr	r3, [pc, #136]	@ (8002b3c <HAL_DMA_Init+0xa8>)
 8002ab2:	4413      	add	r3, r2
 8002ab4:	4a22      	ldr	r2, [pc, #136]	@ (8002b40 <HAL_DMA_Init+0xac>)
 8002ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aba:	091b      	lsrs	r3, r3, #4
 8002abc:	009a      	lsls	r2, r3, #2
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a1f      	ldr	r2, [pc, #124]	@ (8002b44 <HAL_DMA_Init+0xb0>)
 8002ac6:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2202      	movs	r2, #2
 8002acc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002ade:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002ae2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002aec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002af8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	695b      	ldr	r3, [r3, #20]
 8002afe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	69db      	ldr	r3, [r3, #28]
 8002b0a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002b0c:	68fa      	ldr	r2, [r7, #12]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	68fa      	ldr	r2, [r7, #12]
 8002b18:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3714      	adds	r7, #20
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bc80      	pop	{r7}
 8002b3a:	4770      	bx	lr
 8002b3c:	bffdfff8 	.word	0xbffdfff8
 8002b40:	cccccccd 	.word	0xcccccccd
 8002b44:	40020000 	.word	0x40020000

08002b48 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b086      	sub	sp, #24
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	60b9      	str	r1, [r7, #8]
 8002b52:	607a      	str	r2, [r7, #4]
 8002b54:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b56:	2300      	movs	r3, #0
 8002b58:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d101      	bne.n	8002b68 <HAL_DMA_Start_IT+0x20>
 8002b64:	2302      	movs	r3, #2
 8002b66:	e04b      	b.n	8002c00 <HAL_DMA_Start_IT+0xb8>
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d13a      	bne.n	8002bf2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2202      	movs	r2, #2
 8002b80:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2200      	movs	r2, #0
 8002b88:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f022 0201 	bic.w	r2, r2, #1
 8002b98:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	68b9      	ldr	r1, [r7, #8]
 8002ba0:	68f8      	ldr	r0, [r7, #12]
 8002ba2:	f000 f831 	bl	8002c08 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d008      	beq.n	8002bc0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f042 020e 	orr.w	r2, r2, #14
 8002bbc:	601a      	str	r2, [r3, #0]
 8002bbe:	e00f      	b.n	8002be0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f022 0204 	bic.w	r2, r2, #4
 8002bce:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f042 020a 	orr.w	r2, r2, #10
 8002bde:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f042 0201 	orr.w	r2, r2, #1
 8002bee:	601a      	str	r2, [r3, #0]
 8002bf0:	e005      	b.n	8002bfe <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002bfa:	2302      	movs	r3, #2
 8002bfc:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002bfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3718      	adds	r7, #24
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b085      	sub	sp, #20
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	607a      	str	r2, [r7, #4]
 8002c14:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c1e:	2101      	movs	r1, #1
 8002c20:	fa01 f202 	lsl.w	r2, r1, r2
 8002c24:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	683a      	ldr	r2, [r7, #0]
 8002c2c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	2b10      	cmp	r3, #16
 8002c34:	d108      	bne.n	8002c48 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68ba      	ldr	r2, [r7, #8]
 8002c44:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002c46:	e007      	b.n	8002c58 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68ba      	ldr	r2, [r7, #8]
 8002c4e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	60da      	str	r2, [r3, #12]
}
 8002c58:	bf00      	nop
 8002c5a:	3714      	adds	r7, #20
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bc80      	pop	{r7}
 8002c60:	4770      	bx	lr
	...

08002c64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b08b      	sub	sp, #44	@ 0x2c
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002c72:	2300      	movs	r3, #0
 8002c74:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c76:	e169      	b.n	8002f4c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002c78:	2201      	movs	r2, #1
 8002c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c80:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	69fa      	ldr	r2, [r7, #28]
 8002c88:	4013      	ands	r3, r2
 8002c8a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	f040 8158 	bne.w	8002f46 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	4a9a      	ldr	r2, [pc, #616]	@ (8002f04 <HAL_GPIO_Init+0x2a0>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d05e      	beq.n	8002d5e <HAL_GPIO_Init+0xfa>
 8002ca0:	4a98      	ldr	r2, [pc, #608]	@ (8002f04 <HAL_GPIO_Init+0x2a0>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d875      	bhi.n	8002d92 <HAL_GPIO_Init+0x12e>
 8002ca6:	4a98      	ldr	r2, [pc, #608]	@ (8002f08 <HAL_GPIO_Init+0x2a4>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d058      	beq.n	8002d5e <HAL_GPIO_Init+0xfa>
 8002cac:	4a96      	ldr	r2, [pc, #600]	@ (8002f08 <HAL_GPIO_Init+0x2a4>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d86f      	bhi.n	8002d92 <HAL_GPIO_Init+0x12e>
 8002cb2:	4a96      	ldr	r2, [pc, #600]	@ (8002f0c <HAL_GPIO_Init+0x2a8>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d052      	beq.n	8002d5e <HAL_GPIO_Init+0xfa>
 8002cb8:	4a94      	ldr	r2, [pc, #592]	@ (8002f0c <HAL_GPIO_Init+0x2a8>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d869      	bhi.n	8002d92 <HAL_GPIO_Init+0x12e>
 8002cbe:	4a94      	ldr	r2, [pc, #592]	@ (8002f10 <HAL_GPIO_Init+0x2ac>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d04c      	beq.n	8002d5e <HAL_GPIO_Init+0xfa>
 8002cc4:	4a92      	ldr	r2, [pc, #584]	@ (8002f10 <HAL_GPIO_Init+0x2ac>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d863      	bhi.n	8002d92 <HAL_GPIO_Init+0x12e>
 8002cca:	4a92      	ldr	r2, [pc, #584]	@ (8002f14 <HAL_GPIO_Init+0x2b0>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d046      	beq.n	8002d5e <HAL_GPIO_Init+0xfa>
 8002cd0:	4a90      	ldr	r2, [pc, #576]	@ (8002f14 <HAL_GPIO_Init+0x2b0>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d85d      	bhi.n	8002d92 <HAL_GPIO_Init+0x12e>
 8002cd6:	2b12      	cmp	r3, #18
 8002cd8:	d82a      	bhi.n	8002d30 <HAL_GPIO_Init+0xcc>
 8002cda:	2b12      	cmp	r3, #18
 8002cdc:	d859      	bhi.n	8002d92 <HAL_GPIO_Init+0x12e>
 8002cde:	a201      	add	r2, pc, #4	@ (adr r2, 8002ce4 <HAL_GPIO_Init+0x80>)
 8002ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ce4:	08002d5f 	.word	0x08002d5f
 8002ce8:	08002d39 	.word	0x08002d39
 8002cec:	08002d4b 	.word	0x08002d4b
 8002cf0:	08002d8d 	.word	0x08002d8d
 8002cf4:	08002d93 	.word	0x08002d93
 8002cf8:	08002d93 	.word	0x08002d93
 8002cfc:	08002d93 	.word	0x08002d93
 8002d00:	08002d93 	.word	0x08002d93
 8002d04:	08002d93 	.word	0x08002d93
 8002d08:	08002d93 	.word	0x08002d93
 8002d0c:	08002d93 	.word	0x08002d93
 8002d10:	08002d93 	.word	0x08002d93
 8002d14:	08002d93 	.word	0x08002d93
 8002d18:	08002d93 	.word	0x08002d93
 8002d1c:	08002d93 	.word	0x08002d93
 8002d20:	08002d93 	.word	0x08002d93
 8002d24:	08002d93 	.word	0x08002d93
 8002d28:	08002d41 	.word	0x08002d41
 8002d2c:	08002d55 	.word	0x08002d55
 8002d30:	4a79      	ldr	r2, [pc, #484]	@ (8002f18 <HAL_GPIO_Init+0x2b4>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d013      	beq.n	8002d5e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002d36:	e02c      	b.n	8002d92 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	623b      	str	r3, [r7, #32]
          break;
 8002d3e:	e029      	b.n	8002d94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	3304      	adds	r3, #4
 8002d46:	623b      	str	r3, [r7, #32]
          break;
 8002d48:	e024      	b.n	8002d94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	3308      	adds	r3, #8
 8002d50:	623b      	str	r3, [r7, #32]
          break;
 8002d52:	e01f      	b.n	8002d94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	330c      	adds	r3, #12
 8002d5a:	623b      	str	r3, [r7, #32]
          break;
 8002d5c:	e01a      	b.n	8002d94 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d102      	bne.n	8002d6c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002d66:	2304      	movs	r3, #4
 8002d68:	623b      	str	r3, [r7, #32]
          break;
 8002d6a:	e013      	b.n	8002d94 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d105      	bne.n	8002d80 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d74:	2308      	movs	r3, #8
 8002d76:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	69fa      	ldr	r2, [r7, #28]
 8002d7c:	611a      	str	r2, [r3, #16]
          break;
 8002d7e:	e009      	b.n	8002d94 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d80:	2308      	movs	r3, #8
 8002d82:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	69fa      	ldr	r2, [r7, #28]
 8002d88:	615a      	str	r2, [r3, #20]
          break;
 8002d8a:	e003      	b.n	8002d94 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	623b      	str	r3, [r7, #32]
          break;
 8002d90:	e000      	b.n	8002d94 <HAL_GPIO_Init+0x130>
          break;
 8002d92:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	2bff      	cmp	r3, #255	@ 0xff
 8002d98:	d801      	bhi.n	8002d9e <HAL_GPIO_Init+0x13a>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	e001      	b.n	8002da2 <HAL_GPIO_Init+0x13e>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	3304      	adds	r3, #4
 8002da2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	2bff      	cmp	r3, #255	@ 0xff
 8002da8:	d802      	bhi.n	8002db0 <HAL_GPIO_Init+0x14c>
 8002daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	e002      	b.n	8002db6 <HAL_GPIO_Init+0x152>
 8002db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db2:	3b08      	subs	r3, #8
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	210f      	movs	r1, #15
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8002dc4:	43db      	mvns	r3, r3
 8002dc6:	401a      	ands	r2, r3
 8002dc8:	6a39      	ldr	r1, [r7, #32]
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8002dd0:	431a      	orrs	r2, r3
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	f000 80b1 	beq.w	8002f46 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002de4:	4b4d      	ldr	r3, [pc, #308]	@ (8002f1c <HAL_GPIO_Init+0x2b8>)
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	4a4c      	ldr	r2, [pc, #304]	@ (8002f1c <HAL_GPIO_Init+0x2b8>)
 8002dea:	f043 0301 	orr.w	r3, r3, #1
 8002dee:	6193      	str	r3, [r2, #24]
 8002df0:	4b4a      	ldr	r3, [pc, #296]	@ (8002f1c <HAL_GPIO_Init+0x2b8>)
 8002df2:	699b      	ldr	r3, [r3, #24]
 8002df4:	f003 0301 	and.w	r3, r3, #1
 8002df8:	60bb      	str	r3, [r7, #8]
 8002dfa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002dfc:	4a48      	ldr	r2, [pc, #288]	@ (8002f20 <HAL_GPIO_Init+0x2bc>)
 8002dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e00:	089b      	lsrs	r3, r3, #2
 8002e02:	3302      	adds	r3, #2
 8002e04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e08:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e0c:	f003 0303 	and.w	r3, r3, #3
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	220f      	movs	r2, #15
 8002e14:	fa02 f303 	lsl.w	r3, r2, r3
 8002e18:	43db      	mvns	r3, r3
 8002e1a:	68fa      	ldr	r2, [r7, #12]
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	4a40      	ldr	r2, [pc, #256]	@ (8002f24 <HAL_GPIO_Init+0x2c0>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d013      	beq.n	8002e50 <HAL_GPIO_Init+0x1ec>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4a3f      	ldr	r2, [pc, #252]	@ (8002f28 <HAL_GPIO_Init+0x2c4>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d00d      	beq.n	8002e4c <HAL_GPIO_Init+0x1e8>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	4a3e      	ldr	r2, [pc, #248]	@ (8002f2c <HAL_GPIO_Init+0x2c8>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d007      	beq.n	8002e48 <HAL_GPIO_Init+0x1e4>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4a3d      	ldr	r2, [pc, #244]	@ (8002f30 <HAL_GPIO_Init+0x2cc>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d101      	bne.n	8002e44 <HAL_GPIO_Init+0x1e0>
 8002e40:	2303      	movs	r3, #3
 8002e42:	e006      	b.n	8002e52 <HAL_GPIO_Init+0x1ee>
 8002e44:	2304      	movs	r3, #4
 8002e46:	e004      	b.n	8002e52 <HAL_GPIO_Init+0x1ee>
 8002e48:	2302      	movs	r3, #2
 8002e4a:	e002      	b.n	8002e52 <HAL_GPIO_Init+0x1ee>
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e000      	b.n	8002e52 <HAL_GPIO_Init+0x1ee>
 8002e50:	2300      	movs	r3, #0
 8002e52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e54:	f002 0203 	and.w	r2, r2, #3
 8002e58:	0092      	lsls	r2, r2, #2
 8002e5a:	4093      	lsls	r3, r2
 8002e5c:	68fa      	ldr	r2, [r7, #12]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002e62:	492f      	ldr	r1, [pc, #188]	@ (8002f20 <HAL_GPIO_Init+0x2bc>)
 8002e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e66:	089b      	lsrs	r3, r3, #2
 8002e68:	3302      	adds	r3, #2
 8002e6a:	68fa      	ldr	r2, [r7, #12]
 8002e6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d006      	beq.n	8002e8a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002e7c:	4b2d      	ldr	r3, [pc, #180]	@ (8002f34 <HAL_GPIO_Init+0x2d0>)
 8002e7e:	689a      	ldr	r2, [r3, #8]
 8002e80:	492c      	ldr	r1, [pc, #176]	@ (8002f34 <HAL_GPIO_Init+0x2d0>)
 8002e82:	69bb      	ldr	r3, [r7, #24]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	608b      	str	r3, [r1, #8]
 8002e88:	e006      	b.n	8002e98 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002e8a:	4b2a      	ldr	r3, [pc, #168]	@ (8002f34 <HAL_GPIO_Init+0x2d0>)
 8002e8c:	689a      	ldr	r2, [r3, #8]
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	43db      	mvns	r3, r3
 8002e92:	4928      	ldr	r1, [pc, #160]	@ (8002f34 <HAL_GPIO_Init+0x2d0>)
 8002e94:	4013      	ands	r3, r2
 8002e96:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d006      	beq.n	8002eb2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002ea4:	4b23      	ldr	r3, [pc, #140]	@ (8002f34 <HAL_GPIO_Init+0x2d0>)
 8002ea6:	68da      	ldr	r2, [r3, #12]
 8002ea8:	4922      	ldr	r1, [pc, #136]	@ (8002f34 <HAL_GPIO_Init+0x2d0>)
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	60cb      	str	r3, [r1, #12]
 8002eb0:	e006      	b.n	8002ec0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002eb2:	4b20      	ldr	r3, [pc, #128]	@ (8002f34 <HAL_GPIO_Init+0x2d0>)
 8002eb4:	68da      	ldr	r2, [r3, #12]
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	43db      	mvns	r3, r3
 8002eba:	491e      	ldr	r1, [pc, #120]	@ (8002f34 <HAL_GPIO_Init+0x2d0>)
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d006      	beq.n	8002eda <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002ecc:	4b19      	ldr	r3, [pc, #100]	@ (8002f34 <HAL_GPIO_Init+0x2d0>)
 8002ece:	685a      	ldr	r2, [r3, #4]
 8002ed0:	4918      	ldr	r1, [pc, #96]	@ (8002f34 <HAL_GPIO_Init+0x2d0>)
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	604b      	str	r3, [r1, #4]
 8002ed8:	e006      	b.n	8002ee8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002eda:	4b16      	ldr	r3, [pc, #88]	@ (8002f34 <HAL_GPIO_Init+0x2d0>)
 8002edc:	685a      	ldr	r2, [r3, #4]
 8002ede:	69bb      	ldr	r3, [r7, #24]
 8002ee0:	43db      	mvns	r3, r3
 8002ee2:	4914      	ldr	r1, [pc, #80]	@ (8002f34 <HAL_GPIO_Init+0x2d0>)
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d021      	beq.n	8002f38 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002ef4:	4b0f      	ldr	r3, [pc, #60]	@ (8002f34 <HAL_GPIO_Init+0x2d0>)
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	490e      	ldr	r1, [pc, #56]	@ (8002f34 <HAL_GPIO_Init+0x2d0>)
 8002efa:	69bb      	ldr	r3, [r7, #24]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	600b      	str	r3, [r1, #0]
 8002f00:	e021      	b.n	8002f46 <HAL_GPIO_Init+0x2e2>
 8002f02:	bf00      	nop
 8002f04:	10320000 	.word	0x10320000
 8002f08:	10310000 	.word	0x10310000
 8002f0c:	10220000 	.word	0x10220000
 8002f10:	10210000 	.word	0x10210000
 8002f14:	10120000 	.word	0x10120000
 8002f18:	10110000 	.word	0x10110000
 8002f1c:	40021000 	.word	0x40021000
 8002f20:	40010000 	.word	0x40010000
 8002f24:	40010800 	.word	0x40010800
 8002f28:	40010c00 	.word	0x40010c00
 8002f2c:	40011000 	.word	0x40011000
 8002f30:	40011400 	.word	0x40011400
 8002f34:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002f38:	4b0b      	ldr	r3, [pc, #44]	@ (8002f68 <HAL_GPIO_Init+0x304>)
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	43db      	mvns	r3, r3
 8002f40:	4909      	ldr	r1, [pc, #36]	@ (8002f68 <HAL_GPIO_Init+0x304>)
 8002f42:	4013      	ands	r3, r2
 8002f44:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f48:	3301      	adds	r3, #1
 8002f4a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f52:	fa22 f303 	lsr.w	r3, r2, r3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	f47f ae8e 	bne.w	8002c78 <HAL_GPIO_Init+0x14>
  }
}
 8002f5c:	bf00      	nop
 8002f5e:	bf00      	nop
 8002f60:	372c      	adds	r7, #44	@ 0x2c
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bc80      	pop	{r7}
 8002f66:	4770      	bx	lr
 8002f68:	40010400 	.word	0x40010400

08002f6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	460b      	mov	r3, r1
 8002f76:	807b      	strh	r3, [r7, #2]
 8002f78:	4613      	mov	r3, r2
 8002f7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f7c:	787b      	ldrb	r3, [r7, #1]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d003      	beq.n	8002f8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f82:	887a      	ldrh	r2, [r7, #2]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002f88:	e003      	b.n	8002f92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002f8a:	887b      	ldrh	r3, [r7, #2]
 8002f8c:	041a      	lsls	r2, r3, #16
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	611a      	str	r2, [r3, #16]
}
 8002f92:	bf00      	nop
 8002f94:	370c      	adds	r7, #12
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bc80      	pop	{r7}
 8002f9a:	4770      	bx	lr

08002f9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d101      	bne.n	8002fae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e12b      	b.n	8003206 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d106      	bne.n	8002fc8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f7fd fd44 	bl	8000a50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2224      	movs	r2, #36	@ 0x24
 8002fcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f022 0201 	bic.w	r2, r2, #1
 8002fde:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002fee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ffe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003000:	f001 fbf0 	bl	80047e4 <HAL_RCC_GetPCLK1Freq>
 8003004:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	4a81      	ldr	r2, [pc, #516]	@ (8003210 <HAL_I2C_Init+0x274>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d807      	bhi.n	8003020 <HAL_I2C_Init+0x84>
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	4a80      	ldr	r2, [pc, #512]	@ (8003214 <HAL_I2C_Init+0x278>)
 8003014:	4293      	cmp	r3, r2
 8003016:	bf94      	ite	ls
 8003018:	2301      	movls	r3, #1
 800301a:	2300      	movhi	r3, #0
 800301c:	b2db      	uxtb	r3, r3
 800301e:	e006      	b.n	800302e <HAL_I2C_Init+0x92>
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	4a7d      	ldr	r2, [pc, #500]	@ (8003218 <HAL_I2C_Init+0x27c>)
 8003024:	4293      	cmp	r3, r2
 8003026:	bf94      	ite	ls
 8003028:	2301      	movls	r3, #1
 800302a:	2300      	movhi	r3, #0
 800302c:	b2db      	uxtb	r3, r3
 800302e:	2b00      	cmp	r3, #0
 8003030:	d001      	beq.n	8003036 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e0e7      	b.n	8003206 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	4a78      	ldr	r2, [pc, #480]	@ (800321c <HAL_I2C_Init+0x280>)
 800303a:	fba2 2303 	umull	r2, r3, r2, r3
 800303e:	0c9b      	lsrs	r3, r3, #18
 8003040:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	68ba      	ldr	r2, [r7, #8]
 8003052:	430a      	orrs	r2, r1
 8003054:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	6a1b      	ldr	r3, [r3, #32]
 800305c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	4a6a      	ldr	r2, [pc, #424]	@ (8003210 <HAL_I2C_Init+0x274>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d802      	bhi.n	8003070 <HAL_I2C_Init+0xd4>
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	3301      	adds	r3, #1
 800306e:	e009      	b.n	8003084 <HAL_I2C_Init+0xe8>
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003076:	fb02 f303 	mul.w	r3, r2, r3
 800307a:	4a69      	ldr	r2, [pc, #420]	@ (8003220 <HAL_I2C_Init+0x284>)
 800307c:	fba2 2303 	umull	r2, r3, r2, r3
 8003080:	099b      	lsrs	r3, r3, #6
 8003082:	3301      	adds	r3, #1
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	6812      	ldr	r2, [r2, #0]
 8003088:	430b      	orrs	r3, r1
 800308a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	69db      	ldr	r3, [r3, #28]
 8003092:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003096:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	495c      	ldr	r1, [pc, #368]	@ (8003210 <HAL_I2C_Init+0x274>)
 80030a0:	428b      	cmp	r3, r1
 80030a2:	d819      	bhi.n	80030d8 <HAL_I2C_Init+0x13c>
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	1e59      	subs	r1, r3, #1
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	005b      	lsls	r3, r3, #1
 80030ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80030b2:	1c59      	adds	r1, r3, #1
 80030b4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80030b8:	400b      	ands	r3, r1
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d00a      	beq.n	80030d4 <HAL_I2C_Init+0x138>
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	1e59      	subs	r1, r3, #1
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	005b      	lsls	r3, r3, #1
 80030c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80030cc:	3301      	adds	r3, #1
 80030ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030d2:	e051      	b.n	8003178 <HAL_I2C_Init+0x1dc>
 80030d4:	2304      	movs	r3, #4
 80030d6:	e04f      	b.n	8003178 <HAL_I2C_Init+0x1dc>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d111      	bne.n	8003104 <HAL_I2C_Init+0x168>
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	1e58      	subs	r0, r3, #1
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6859      	ldr	r1, [r3, #4]
 80030e8:	460b      	mov	r3, r1
 80030ea:	005b      	lsls	r3, r3, #1
 80030ec:	440b      	add	r3, r1
 80030ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80030f2:	3301      	adds	r3, #1
 80030f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	bf0c      	ite	eq
 80030fc:	2301      	moveq	r3, #1
 80030fe:	2300      	movne	r3, #0
 8003100:	b2db      	uxtb	r3, r3
 8003102:	e012      	b.n	800312a <HAL_I2C_Init+0x18e>
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	1e58      	subs	r0, r3, #1
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6859      	ldr	r1, [r3, #4]
 800310c:	460b      	mov	r3, r1
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	440b      	add	r3, r1
 8003112:	0099      	lsls	r1, r3, #2
 8003114:	440b      	add	r3, r1
 8003116:	fbb0 f3f3 	udiv	r3, r0, r3
 800311a:	3301      	adds	r3, #1
 800311c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003120:	2b00      	cmp	r3, #0
 8003122:	bf0c      	ite	eq
 8003124:	2301      	moveq	r3, #1
 8003126:	2300      	movne	r3, #0
 8003128:	b2db      	uxtb	r3, r3
 800312a:	2b00      	cmp	r3, #0
 800312c:	d001      	beq.n	8003132 <HAL_I2C_Init+0x196>
 800312e:	2301      	movs	r3, #1
 8003130:	e022      	b.n	8003178 <HAL_I2C_Init+0x1dc>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d10e      	bne.n	8003158 <HAL_I2C_Init+0x1bc>
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	1e58      	subs	r0, r3, #1
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6859      	ldr	r1, [r3, #4]
 8003142:	460b      	mov	r3, r1
 8003144:	005b      	lsls	r3, r3, #1
 8003146:	440b      	add	r3, r1
 8003148:	fbb0 f3f3 	udiv	r3, r0, r3
 800314c:	3301      	adds	r3, #1
 800314e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003152:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003156:	e00f      	b.n	8003178 <HAL_I2C_Init+0x1dc>
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	1e58      	subs	r0, r3, #1
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6859      	ldr	r1, [r3, #4]
 8003160:	460b      	mov	r3, r1
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	440b      	add	r3, r1
 8003166:	0099      	lsls	r1, r3, #2
 8003168:	440b      	add	r3, r1
 800316a:	fbb0 f3f3 	udiv	r3, r0, r3
 800316e:	3301      	adds	r3, #1
 8003170:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003174:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003178:	6879      	ldr	r1, [r7, #4]
 800317a:	6809      	ldr	r1, [r1, #0]
 800317c:	4313      	orrs	r3, r2
 800317e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	69da      	ldr	r2, [r3, #28]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a1b      	ldr	r3, [r3, #32]
 8003192:	431a      	orrs	r2, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	430a      	orrs	r2, r1
 800319a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80031a6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	6911      	ldr	r1, [r2, #16]
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	68d2      	ldr	r2, [r2, #12]
 80031b2:	4311      	orrs	r1, r2
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	6812      	ldr	r2, [r2, #0]
 80031b8:	430b      	orrs	r3, r1
 80031ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	695a      	ldr	r2, [r3, #20]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	699b      	ldr	r3, [r3, #24]
 80031ce:	431a      	orrs	r2, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	430a      	orrs	r2, r1
 80031d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f042 0201 	orr.w	r2, r2, #1
 80031e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2220      	movs	r2, #32
 80031f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	3710      	adds	r7, #16
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	000186a0 	.word	0x000186a0
 8003214:	001e847f 	.word	0x001e847f
 8003218:	003d08ff 	.word	0x003d08ff
 800321c:	431bde83 	.word	0x431bde83
 8003220:	10624dd3 	.word	0x10624dd3

08003224 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b088      	sub	sp, #32
 8003228:	af02      	add	r7, sp, #8
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	4608      	mov	r0, r1
 800322e:	4611      	mov	r1, r2
 8003230:	461a      	mov	r2, r3
 8003232:	4603      	mov	r3, r0
 8003234:	817b      	strh	r3, [r7, #10]
 8003236:	460b      	mov	r3, r1
 8003238:	813b      	strh	r3, [r7, #8]
 800323a:	4613      	mov	r3, r2
 800323c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800323e:	f7fe f853 	bl	80012e8 <HAL_GetTick>
 8003242:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800324a:	b2db      	uxtb	r3, r3
 800324c:	2b20      	cmp	r3, #32
 800324e:	f040 80d9 	bne.w	8003404 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	9300      	str	r3, [sp, #0]
 8003256:	2319      	movs	r3, #25
 8003258:	2201      	movs	r2, #1
 800325a:	496d      	ldr	r1, [pc, #436]	@ (8003410 <HAL_I2C_Mem_Write+0x1ec>)
 800325c:	68f8      	ldr	r0, [r7, #12]
 800325e:	f000 fcc1 	bl	8003be4 <I2C_WaitOnFlagUntilTimeout>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d001      	beq.n	800326c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003268:	2302      	movs	r3, #2
 800326a:	e0cc      	b.n	8003406 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003272:	2b01      	cmp	r3, #1
 8003274:	d101      	bne.n	800327a <HAL_I2C_Mem_Write+0x56>
 8003276:	2302      	movs	r3, #2
 8003278:	e0c5      	b.n	8003406 <HAL_I2C_Mem_Write+0x1e2>
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2201      	movs	r2, #1
 800327e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0301 	and.w	r3, r3, #1
 800328c:	2b01      	cmp	r3, #1
 800328e:	d007      	beq.n	80032a0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f042 0201 	orr.w	r2, r2, #1
 800329e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80032ae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2221      	movs	r2, #33	@ 0x21
 80032b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2240      	movs	r2, #64	@ 0x40
 80032bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2200      	movs	r2, #0
 80032c4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6a3a      	ldr	r2, [r7, #32]
 80032ca:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80032d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032d6:	b29a      	uxth	r2, r3
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	4a4d      	ldr	r2, [pc, #308]	@ (8003414 <HAL_I2C_Mem_Write+0x1f0>)
 80032e0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80032e2:	88f8      	ldrh	r0, [r7, #6]
 80032e4:	893a      	ldrh	r2, [r7, #8]
 80032e6:	8979      	ldrh	r1, [r7, #10]
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	9301      	str	r3, [sp, #4]
 80032ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032ee:	9300      	str	r3, [sp, #0]
 80032f0:	4603      	mov	r3, r0
 80032f2:	68f8      	ldr	r0, [r7, #12]
 80032f4:	f000 faf8 	bl	80038e8 <I2C_RequestMemoryWrite>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d052      	beq.n	80033a4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e081      	b.n	8003406 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003302:	697a      	ldr	r2, [r7, #20]
 8003304:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003306:	68f8      	ldr	r0, [r7, #12]
 8003308:	f000 fd86 	bl	8003e18 <I2C_WaitOnTXEFlagUntilTimeout>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d00d      	beq.n	800332e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003316:	2b04      	cmp	r3, #4
 8003318:	d107      	bne.n	800332a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003328:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e06b      	b.n	8003406 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003332:	781a      	ldrb	r2, [r3, #0]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800333e:	1c5a      	adds	r2, r3, #1
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003348:	3b01      	subs	r3, #1
 800334a:	b29a      	uxth	r2, r3
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003354:	b29b      	uxth	r3, r3
 8003356:	3b01      	subs	r3, #1
 8003358:	b29a      	uxth	r2, r3
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	695b      	ldr	r3, [r3, #20]
 8003364:	f003 0304 	and.w	r3, r3, #4
 8003368:	2b04      	cmp	r3, #4
 800336a:	d11b      	bne.n	80033a4 <HAL_I2C_Mem_Write+0x180>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003370:	2b00      	cmp	r3, #0
 8003372:	d017      	beq.n	80033a4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003378:	781a      	ldrb	r2, [r3, #0]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003384:	1c5a      	adds	r2, r3, #1
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800338e:	3b01      	subs	r3, #1
 8003390:	b29a      	uxth	r2, r3
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800339a:	b29b      	uxth	r3, r3
 800339c:	3b01      	subs	r3, #1
 800339e:	b29a      	uxth	r2, r3
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d1aa      	bne.n	8003302 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033ac:	697a      	ldr	r2, [r7, #20]
 80033ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80033b0:	68f8      	ldr	r0, [r7, #12]
 80033b2:	f000 fd79 	bl	8003ea8 <I2C_WaitOnBTFFlagUntilTimeout>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d00d      	beq.n	80033d8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c0:	2b04      	cmp	r3, #4
 80033c2:	d107      	bne.n	80033d4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033d2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e016      	b.n	8003406 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2220      	movs	r2, #32
 80033ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003400:	2300      	movs	r3, #0
 8003402:	e000      	b.n	8003406 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003404:	2302      	movs	r3, #2
  }
}
 8003406:	4618      	mov	r0, r3
 8003408:	3718      	adds	r7, #24
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	00100002 	.word	0x00100002
 8003414:	ffff0000 	.word	0xffff0000

08003418 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b08c      	sub	sp, #48	@ 0x30
 800341c:	af02      	add	r7, sp, #8
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	4608      	mov	r0, r1
 8003422:	4611      	mov	r1, r2
 8003424:	461a      	mov	r2, r3
 8003426:	4603      	mov	r3, r0
 8003428:	817b      	strh	r3, [r7, #10]
 800342a:	460b      	mov	r3, r1
 800342c:	813b      	strh	r3, [r7, #8]
 800342e:	4613      	mov	r3, r2
 8003430:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003432:	2300      	movs	r3, #0
 8003434:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003436:	f7fd ff57 	bl	80012e8 <HAL_GetTick>
 800343a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003442:	b2db      	uxtb	r3, r3
 8003444:	2b20      	cmp	r3, #32
 8003446:	f040 8244 	bne.w	80038d2 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800344a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800344c:	9300      	str	r3, [sp, #0]
 800344e:	2319      	movs	r3, #25
 8003450:	2201      	movs	r2, #1
 8003452:	4982      	ldr	r1, [pc, #520]	@ (800365c <HAL_I2C_Mem_Read+0x244>)
 8003454:	68f8      	ldr	r0, [r7, #12]
 8003456:	f000 fbc5 	bl	8003be4 <I2C_WaitOnFlagUntilTimeout>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d001      	beq.n	8003464 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003460:	2302      	movs	r3, #2
 8003462:	e237      	b.n	80038d4 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800346a:	2b01      	cmp	r3, #1
 800346c:	d101      	bne.n	8003472 <HAL_I2C_Mem_Read+0x5a>
 800346e:	2302      	movs	r3, #2
 8003470:	e230      	b.n	80038d4 <HAL_I2C_Mem_Read+0x4bc>
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2201      	movs	r2, #1
 8003476:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0301 	and.w	r3, r3, #1
 8003484:	2b01      	cmp	r3, #1
 8003486:	d007      	beq.n	8003498 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f042 0201 	orr.w	r2, r2, #1
 8003496:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80034a6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2222      	movs	r2, #34	@ 0x22
 80034ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2240      	movs	r2, #64	@ 0x40
 80034b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2200      	movs	r2, #0
 80034bc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034c2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80034c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034ce:	b29a      	uxth	r2, r3
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	4a62      	ldr	r2, [pc, #392]	@ (8003660 <HAL_I2C_Mem_Read+0x248>)
 80034d8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80034da:	88f8      	ldrh	r0, [r7, #6]
 80034dc:	893a      	ldrh	r2, [r7, #8]
 80034de:	8979      	ldrh	r1, [r7, #10]
 80034e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e2:	9301      	str	r3, [sp, #4]
 80034e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034e6:	9300      	str	r3, [sp, #0]
 80034e8:	4603      	mov	r3, r0
 80034ea:	68f8      	ldr	r0, [r7, #12]
 80034ec:	f000 fa92 	bl	8003a14 <I2C_RequestMemoryRead>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d001      	beq.n	80034fa <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e1ec      	b.n	80038d4 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d113      	bne.n	800352a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003502:	2300      	movs	r3, #0
 8003504:	61fb      	str	r3, [r7, #28]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	695b      	ldr	r3, [r3, #20]
 800350c:	61fb      	str	r3, [r7, #28]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	699b      	ldr	r3, [r3, #24]
 8003514:	61fb      	str	r3, [r7, #28]
 8003516:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003526:	601a      	str	r2, [r3, #0]
 8003528:	e1c0      	b.n	80038ac <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800352e:	2b01      	cmp	r3, #1
 8003530:	d11e      	bne.n	8003570 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003540:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003542:	b672      	cpsid	i
}
 8003544:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003546:	2300      	movs	r3, #0
 8003548:	61bb      	str	r3, [r7, #24]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	695b      	ldr	r3, [r3, #20]
 8003550:	61bb      	str	r3, [r7, #24]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	699b      	ldr	r3, [r3, #24]
 8003558:	61bb      	str	r3, [r7, #24]
 800355a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800356a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800356c:	b662      	cpsie	i
}
 800356e:	e035      	b.n	80035dc <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003574:	2b02      	cmp	r3, #2
 8003576:	d11e      	bne.n	80035b6 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003586:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003588:	b672      	cpsid	i
}
 800358a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800358c:	2300      	movs	r3, #0
 800358e:	617b      	str	r3, [r7, #20]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	695b      	ldr	r3, [r3, #20]
 8003596:	617b      	str	r3, [r7, #20]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	699b      	ldr	r3, [r3, #24]
 800359e:	617b      	str	r3, [r7, #20]
 80035a0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035b0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80035b2:	b662      	cpsie	i
}
 80035b4:	e012      	b.n	80035dc <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80035c4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035c6:	2300      	movs	r3, #0
 80035c8:	613b      	str	r3, [r7, #16]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	695b      	ldr	r3, [r3, #20]
 80035d0:	613b      	str	r3, [r7, #16]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	699b      	ldr	r3, [r3, #24]
 80035d8:	613b      	str	r3, [r7, #16]
 80035da:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80035dc:	e166      	b.n	80038ac <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035e2:	2b03      	cmp	r3, #3
 80035e4:	f200 811f 	bhi.w	8003826 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d123      	bne.n	8003638 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035f2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80035f4:	68f8      	ldr	r0, [r7, #12]
 80035f6:	f000 fc9f 	bl	8003f38 <I2C_WaitOnRXNEFlagUntilTimeout>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d001      	beq.n	8003604 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e167      	b.n	80038d4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	691a      	ldr	r2, [r3, #16]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800360e:	b2d2      	uxtb	r2, r2
 8003610:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003616:	1c5a      	adds	r2, r3, #1
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003620:	3b01      	subs	r3, #1
 8003622:	b29a      	uxth	r2, r3
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800362c:	b29b      	uxth	r3, r3
 800362e:	3b01      	subs	r3, #1
 8003630:	b29a      	uxth	r2, r3
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003636:	e139      	b.n	80038ac <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800363c:	2b02      	cmp	r3, #2
 800363e:	d152      	bne.n	80036e6 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003642:	9300      	str	r3, [sp, #0]
 8003644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003646:	2200      	movs	r2, #0
 8003648:	4906      	ldr	r1, [pc, #24]	@ (8003664 <HAL_I2C_Mem_Read+0x24c>)
 800364a:	68f8      	ldr	r0, [r7, #12]
 800364c:	f000 faca 	bl	8003be4 <I2C_WaitOnFlagUntilTimeout>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d008      	beq.n	8003668 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e13c      	b.n	80038d4 <HAL_I2C_Mem_Read+0x4bc>
 800365a:	bf00      	nop
 800365c:	00100002 	.word	0x00100002
 8003660:	ffff0000 	.word	0xffff0000
 8003664:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003668:	b672      	cpsid	i
}
 800366a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800367a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	691a      	ldr	r2, [r3, #16]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003686:	b2d2      	uxtb	r2, r2
 8003688:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800368e:	1c5a      	adds	r2, r3, #1
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003698:	3b01      	subs	r3, #1
 800369a:	b29a      	uxth	r2, r3
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	3b01      	subs	r3, #1
 80036a8:	b29a      	uxth	r2, r3
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80036ae:	b662      	cpsie	i
}
 80036b0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	691a      	ldr	r2, [r3, #16]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036bc:	b2d2      	uxtb	r2, r2
 80036be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c4:	1c5a      	adds	r2, r3, #1
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036ce:	3b01      	subs	r3, #1
 80036d0:	b29a      	uxth	r2, r3
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036da:	b29b      	uxth	r3, r3
 80036dc:	3b01      	subs	r3, #1
 80036de:	b29a      	uxth	r2, r3
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80036e4:	e0e2      	b.n	80038ac <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80036e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e8:	9300      	str	r3, [sp, #0]
 80036ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036ec:	2200      	movs	r2, #0
 80036ee:	497b      	ldr	r1, [pc, #492]	@ (80038dc <HAL_I2C_Mem_Read+0x4c4>)
 80036f0:	68f8      	ldr	r0, [r7, #12]
 80036f2:	f000 fa77 	bl	8003be4 <I2C_WaitOnFlagUntilTimeout>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d001      	beq.n	8003700 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e0e9      	b.n	80038d4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800370e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003710:	b672      	cpsid	i
}
 8003712:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	691a      	ldr	r2, [r3, #16]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800371e:	b2d2      	uxtb	r2, r2
 8003720:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003726:	1c5a      	adds	r2, r3, #1
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003730:	3b01      	subs	r3, #1
 8003732:	b29a      	uxth	r2, r3
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800373c:	b29b      	uxth	r3, r3
 800373e:	3b01      	subs	r3, #1
 8003740:	b29a      	uxth	r2, r3
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003746:	4b66      	ldr	r3, [pc, #408]	@ (80038e0 <HAL_I2C_Mem_Read+0x4c8>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	08db      	lsrs	r3, r3, #3
 800374c:	4a65      	ldr	r2, [pc, #404]	@ (80038e4 <HAL_I2C_Mem_Read+0x4cc>)
 800374e:	fba2 2303 	umull	r2, r3, r2, r3
 8003752:	0a1a      	lsrs	r2, r3, #8
 8003754:	4613      	mov	r3, r2
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	4413      	add	r3, r2
 800375a:	00da      	lsls	r2, r3, #3
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003760:	6a3b      	ldr	r3, [r7, #32]
 8003762:	3b01      	subs	r3, #1
 8003764:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003766:	6a3b      	ldr	r3, [r7, #32]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d118      	bne.n	800379e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2200      	movs	r2, #0
 8003770:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2220      	movs	r2, #32
 8003776:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2200      	movs	r2, #0
 800377e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003786:	f043 0220 	orr.w	r2, r3, #32
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800378e:	b662      	cpsie	i
}
 8003790:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e09a      	b.n	80038d4 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	695b      	ldr	r3, [r3, #20]
 80037a4:	f003 0304 	and.w	r3, r3, #4
 80037a8:	2b04      	cmp	r3, #4
 80037aa:	d1d9      	bne.n	8003760 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	691a      	ldr	r2, [r3, #16]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c6:	b2d2      	uxtb	r2, r2
 80037c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ce:	1c5a      	adds	r2, r3, #1
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037d8:	3b01      	subs	r3, #1
 80037da:	b29a      	uxth	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	3b01      	subs	r3, #1
 80037e8:	b29a      	uxth	r2, r3
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80037ee:	b662      	cpsie	i
}
 80037f0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	691a      	ldr	r2, [r3, #16]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037fc:	b2d2      	uxtb	r2, r2
 80037fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003804:	1c5a      	adds	r2, r3, #1
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800380e:	3b01      	subs	r3, #1
 8003810:	b29a      	uxth	r2, r3
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800381a:	b29b      	uxth	r3, r3
 800381c:	3b01      	subs	r3, #1
 800381e:	b29a      	uxth	r2, r3
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003824:	e042      	b.n	80038ac <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003826:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003828:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800382a:	68f8      	ldr	r0, [r7, #12]
 800382c:	f000 fb84 	bl	8003f38 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d001      	beq.n	800383a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e04c      	b.n	80038d4 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	691a      	ldr	r2, [r3, #16]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003844:	b2d2      	uxtb	r2, r2
 8003846:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800384c:	1c5a      	adds	r2, r3, #1
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003856:	3b01      	subs	r3, #1
 8003858:	b29a      	uxth	r2, r3
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003862:	b29b      	uxth	r3, r3
 8003864:	3b01      	subs	r3, #1
 8003866:	b29a      	uxth	r2, r3
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	695b      	ldr	r3, [r3, #20]
 8003872:	f003 0304 	and.w	r3, r3, #4
 8003876:	2b04      	cmp	r3, #4
 8003878:	d118      	bne.n	80038ac <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	691a      	ldr	r2, [r3, #16]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003884:	b2d2      	uxtb	r2, r2
 8003886:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800388c:	1c5a      	adds	r2, r3, #1
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003896:	3b01      	subs	r3, #1
 8003898:	b29a      	uxth	r2, r3
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	3b01      	subs	r3, #1
 80038a6:	b29a      	uxth	r2, r3
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	f47f ae94 	bne.w	80035de <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2220      	movs	r2, #32
 80038ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80038ce:	2300      	movs	r3, #0
 80038d0:	e000      	b.n	80038d4 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80038d2:	2302      	movs	r3, #2
  }
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3728      	adds	r7, #40	@ 0x28
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	00010004 	.word	0x00010004
 80038e0:	20000000 	.word	0x20000000
 80038e4:	14f8b589 	.word	0x14f8b589

080038e8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b088      	sub	sp, #32
 80038ec:	af02      	add	r7, sp, #8
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	4608      	mov	r0, r1
 80038f2:	4611      	mov	r1, r2
 80038f4:	461a      	mov	r2, r3
 80038f6:	4603      	mov	r3, r0
 80038f8:	817b      	strh	r3, [r7, #10]
 80038fa:	460b      	mov	r3, r1
 80038fc:	813b      	strh	r3, [r7, #8]
 80038fe:	4613      	mov	r3, r2
 8003900:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003910:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003914:	9300      	str	r3, [sp, #0]
 8003916:	6a3b      	ldr	r3, [r7, #32]
 8003918:	2200      	movs	r2, #0
 800391a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800391e:	68f8      	ldr	r0, [r7, #12]
 8003920:	f000 f960 	bl	8003be4 <I2C_WaitOnFlagUntilTimeout>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d00d      	beq.n	8003946 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003934:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003938:	d103      	bne.n	8003942 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003940:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e05f      	b.n	8003a06 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003946:	897b      	ldrh	r3, [r7, #10]
 8003948:	b2db      	uxtb	r3, r3
 800394a:	461a      	mov	r2, r3
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003954:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003958:	6a3a      	ldr	r2, [r7, #32]
 800395a:	492d      	ldr	r1, [pc, #180]	@ (8003a10 <I2C_RequestMemoryWrite+0x128>)
 800395c:	68f8      	ldr	r0, [r7, #12]
 800395e:	f000 f9bb 	bl	8003cd8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003962:	4603      	mov	r3, r0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d001      	beq.n	800396c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e04c      	b.n	8003a06 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800396c:	2300      	movs	r3, #0
 800396e:	617b      	str	r3, [r7, #20]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	695b      	ldr	r3, [r3, #20]
 8003976:	617b      	str	r3, [r7, #20]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	699b      	ldr	r3, [r3, #24]
 800397e:	617b      	str	r3, [r7, #20]
 8003980:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003982:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003984:	6a39      	ldr	r1, [r7, #32]
 8003986:	68f8      	ldr	r0, [r7, #12]
 8003988:	f000 fa46 	bl	8003e18 <I2C_WaitOnTXEFlagUntilTimeout>
 800398c:	4603      	mov	r3, r0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d00d      	beq.n	80039ae <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003996:	2b04      	cmp	r3, #4
 8003998:	d107      	bne.n	80039aa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039a8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e02b      	b.n	8003a06 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80039ae:	88fb      	ldrh	r3, [r7, #6]
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d105      	bne.n	80039c0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80039b4:	893b      	ldrh	r3, [r7, #8]
 80039b6:	b2da      	uxtb	r2, r3
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	611a      	str	r2, [r3, #16]
 80039be:	e021      	b.n	8003a04 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80039c0:	893b      	ldrh	r3, [r7, #8]
 80039c2:	0a1b      	lsrs	r3, r3, #8
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	b2da      	uxtb	r2, r3
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039d0:	6a39      	ldr	r1, [r7, #32]
 80039d2:	68f8      	ldr	r0, [r7, #12]
 80039d4:	f000 fa20 	bl	8003e18 <I2C_WaitOnTXEFlagUntilTimeout>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00d      	beq.n	80039fa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e2:	2b04      	cmp	r3, #4
 80039e4:	d107      	bne.n	80039f6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039f4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e005      	b.n	8003a06 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80039fa:	893b      	ldrh	r3, [r7, #8]
 80039fc:	b2da      	uxtb	r2, r3
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003a04:	2300      	movs	r3, #0
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3718      	adds	r7, #24
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	00010002 	.word	0x00010002

08003a14 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b088      	sub	sp, #32
 8003a18:	af02      	add	r7, sp, #8
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	4608      	mov	r0, r1
 8003a1e:	4611      	mov	r1, r2
 8003a20:	461a      	mov	r2, r3
 8003a22:	4603      	mov	r3, r0
 8003a24:	817b      	strh	r3, [r7, #10]
 8003a26:	460b      	mov	r3, r1
 8003a28:	813b      	strh	r3, [r7, #8]
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003a3c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a4c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a50:	9300      	str	r3, [sp, #0]
 8003a52:	6a3b      	ldr	r3, [r7, #32]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003a5a:	68f8      	ldr	r0, [r7, #12]
 8003a5c:	f000 f8c2 	bl	8003be4 <I2C_WaitOnFlagUntilTimeout>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d00d      	beq.n	8003a82 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a74:	d103      	bne.n	8003a7e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a7c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e0aa      	b.n	8003bd8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a82:	897b      	ldrh	r3, [r7, #10]
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	461a      	mov	r2, r3
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003a90:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a94:	6a3a      	ldr	r2, [r7, #32]
 8003a96:	4952      	ldr	r1, [pc, #328]	@ (8003be0 <I2C_RequestMemoryRead+0x1cc>)
 8003a98:	68f8      	ldr	r0, [r7, #12]
 8003a9a:	f000 f91d 	bl	8003cd8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d001      	beq.n	8003aa8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e097      	b.n	8003bd8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	617b      	str	r3, [r7, #20]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	695b      	ldr	r3, [r3, #20]
 8003ab2:	617b      	str	r3, [r7, #20]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	699b      	ldr	r3, [r3, #24]
 8003aba:	617b      	str	r3, [r7, #20]
 8003abc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003abe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ac0:	6a39      	ldr	r1, [r7, #32]
 8003ac2:	68f8      	ldr	r0, [r7, #12]
 8003ac4:	f000 f9a8 	bl	8003e18 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d00d      	beq.n	8003aea <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad2:	2b04      	cmp	r3, #4
 8003ad4:	d107      	bne.n	8003ae6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ae4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e076      	b.n	8003bd8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003aea:	88fb      	ldrh	r3, [r7, #6]
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d105      	bne.n	8003afc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003af0:	893b      	ldrh	r3, [r7, #8]
 8003af2:	b2da      	uxtb	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	611a      	str	r2, [r3, #16]
 8003afa:	e021      	b.n	8003b40 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003afc:	893b      	ldrh	r3, [r7, #8]
 8003afe:	0a1b      	lsrs	r3, r3, #8
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	b2da      	uxtb	r2, r3
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b0c:	6a39      	ldr	r1, [r7, #32]
 8003b0e:	68f8      	ldr	r0, [r7, #12]
 8003b10:	f000 f982 	bl	8003e18 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d00d      	beq.n	8003b36 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b1e:	2b04      	cmp	r3, #4
 8003b20:	d107      	bne.n	8003b32 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b30:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e050      	b.n	8003bd8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b36:	893b      	ldrh	r3, [r7, #8]
 8003b38:	b2da      	uxtb	r2, r3
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b42:	6a39      	ldr	r1, [r7, #32]
 8003b44:	68f8      	ldr	r0, [r7, #12]
 8003b46:	f000 f967 	bl	8003e18 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d00d      	beq.n	8003b6c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b54:	2b04      	cmp	r3, #4
 8003b56:	d107      	bne.n	8003b68 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b66:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e035      	b.n	8003bd8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b7a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b7e:	9300      	str	r3, [sp, #0]
 8003b80:	6a3b      	ldr	r3, [r7, #32]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003b88:	68f8      	ldr	r0, [r7, #12]
 8003b8a:	f000 f82b 	bl	8003be4 <I2C_WaitOnFlagUntilTimeout>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d00d      	beq.n	8003bb0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ba2:	d103      	bne.n	8003bac <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003baa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003bac:	2303      	movs	r3, #3
 8003bae:	e013      	b.n	8003bd8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003bb0:	897b      	ldrh	r3, [r7, #10]
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	f043 0301 	orr.w	r3, r3, #1
 8003bb8:	b2da      	uxtb	r2, r3
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bc2:	6a3a      	ldr	r2, [r7, #32]
 8003bc4:	4906      	ldr	r1, [pc, #24]	@ (8003be0 <I2C_RequestMemoryRead+0x1cc>)
 8003bc6:	68f8      	ldr	r0, [r7, #12]
 8003bc8:	f000 f886 	bl	8003cd8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d001      	beq.n	8003bd6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e000      	b.n	8003bd8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003bd6:	2300      	movs	r3, #0
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3718      	adds	r7, #24
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	00010002 	.word	0x00010002

08003be4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	603b      	str	r3, [r7, #0]
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bf4:	e048      	b.n	8003c88 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bfc:	d044      	beq.n	8003c88 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bfe:	f7fd fb73 	bl	80012e8 <HAL_GetTick>
 8003c02:	4602      	mov	r2, r0
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	683a      	ldr	r2, [r7, #0]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d302      	bcc.n	8003c14 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d139      	bne.n	8003c88 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	0c1b      	lsrs	r3, r3, #16
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d10d      	bne.n	8003c3a <I2C_WaitOnFlagUntilTimeout+0x56>
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	695b      	ldr	r3, [r3, #20]
 8003c24:	43da      	mvns	r2, r3
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	4013      	ands	r3, r2
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	bf0c      	ite	eq
 8003c30:	2301      	moveq	r3, #1
 8003c32:	2300      	movne	r3, #0
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	461a      	mov	r2, r3
 8003c38:	e00c      	b.n	8003c54 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	699b      	ldr	r3, [r3, #24]
 8003c40:	43da      	mvns	r2, r3
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	4013      	ands	r3, r2
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	bf0c      	ite	eq
 8003c4c:	2301      	moveq	r3, #1
 8003c4e:	2300      	movne	r3, #0
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	461a      	mov	r2, r3
 8003c54:	79fb      	ldrb	r3, [r7, #7]
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d116      	bne.n	8003c88 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2220      	movs	r2, #32
 8003c64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c74:	f043 0220 	orr.w	r2, r3, #32
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e023      	b.n	8003cd0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	0c1b      	lsrs	r3, r3, #16
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d10d      	bne.n	8003cae <I2C_WaitOnFlagUntilTimeout+0xca>
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	695b      	ldr	r3, [r3, #20]
 8003c98:	43da      	mvns	r2, r3
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	bf0c      	ite	eq
 8003ca4:	2301      	moveq	r3, #1
 8003ca6:	2300      	movne	r3, #0
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	461a      	mov	r2, r3
 8003cac:	e00c      	b.n	8003cc8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	699b      	ldr	r3, [r3, #24]
 8003cb4:	43da      	mvns	r2, r3
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	4013      	ands	r3, r2
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	bf0c      	ite	eq
 8003cc0:	2301      	moveq	r3, #1
 8003cc2:	2300      	movne	r3, #0
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	79fb      	ldrb	r3, [r7, #7]
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d093      	beq.n	8003bf6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003cce:	2300      	movs	r3, #0
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3710      	adds	r7, #16
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b084      	sub	sp, #16
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	60b9      	str	r1, [r7, #8]
 8003ce2:	607a      	str	r2, [r7, #4]
 8003ce4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ce6:	e071      	b.n	8003dcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	695b      	ldr	r3, [r3, #20]
 8003cee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cf2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cf6:	d123      	bne.n	8003d40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d06:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003d10:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2200      	movs	r2, #0
 8003d16:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2220      	movs	r2, #32
 8003d1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2200      	movs	r2, #0
 8003d24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d2c:	f043 0204 	orr.w	r2, r3, #4
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e067      	b.n	8003e10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d46:	d041      	beq.n	8003dcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d48:	f7fd face 	bl	80012e8 <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d302      	bcc.n	8003d5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d136      	bne.n	8003dcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	0c1b      	lsrs	r3, r3, #16
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d10c      	bne.n	8003d82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	695b      	ldr	r3, [r3, #20]
 8003d6e:	43da      	mvns	r2, r3
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	4013      	ands	r3, r2
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	bf14      	ite	ne
 8003d7a:	2301      	movne	r3, #1
 8003d7c:	2300      	moveq	r3, #0
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	e00b      	b.n	8003d9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	699b      	ldr	r3, [r3, #24]
 8003d88:	43da      	mvns	r2, r3
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	bf14      	ite	ne
 8003d94:	2301      	movne	r3, #1
 8003d96:	2300      	moveq	r3, #0
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d016      	beq.n	8003dcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2200      	movs	r2, #0
 8003da2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2220      	movs	r2, #32
 8003da8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2200      	movs	r2, #0
 8003db0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db8:	f043 0220 	orr.w	r2, r3, #32
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e021      	b.n	8003e10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	0c1b      	lsrs	r3, r3, #16
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d10c      	bne.n	8003df0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	695b      	ldr	r3, [r3, #20]
 8003ddc:	43da      	mvns	r2, r3
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	4013      	ands	r3, r2
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	bf14      	ite	ne
 8003de8:	2301      	movne	r3, #1
 8003dea:	2300      	moveq	r3, #0
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	e00b      	b.n	8003e08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	699b      	ldr	r3, [r3, #24]
 8003df6:	43da      	mvns	r2, r3
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	bf14      	ite	ne
 8003e02:	2301      	movne	r3, #1
 8003e04:	2300      	moveq	r3, #0
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	f47f af6d 	bne.w	8003ce8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003e0e:	2300      	movs	r3, #0
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3710      	adds	r7, #16
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	60b9      	str	r1, [r7, #8]
 8003e22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e24:	e034      	b.n	8003e90 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e26:	68f8      	ldr	r0, [r7, #12]
 8003e28:	f000 f8e3 	bl	8003ff2 <I2C_IsAcknowledgeFailed>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d001      	beq.n	8003e36 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e034      	b.n	8003ea0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e3c:	d028      	beq.n	8003e90 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e3e:	f7fd fa53 	bl	80012e8 <HAL_GetTick>
 8003e42:	4602      	mov	r2, r0
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	68ba      	ldr	r2, [r7, #8]
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d302      	bcc.n	8003e54 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d11d      	bne.n	8003e90 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	695b      	ldr	r3, [r3, #20]
 8003e5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e5e:	2b80      	cmp	r3, #128	@ 0x80
 8003e60:	d016      	beq.n	8003e90 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2200      	movs	r2, #0
 8003e66:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2220      	movs	r2, #32
 8003e6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e7c:	f043 0220 	orr.w	r2, r3, #32
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2200      	movs	r2, #0
 8003e88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e007      	b.n	8003ea0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	695b      	ldr	r3, [r3, #20]
 8003e96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e9a:	2b80      	cmp	r3, #128	@ 0x80
 8003e9c:	d1c3      	bne.n	8003e26 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003e9e:	2300      	movs	r3, #0
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3710      	adds	r7, #16
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	60b9      	str	r1, [r7, #8]
 8003eb2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003eb4:	e034      	b.n	8003f20 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003eb6:	68f8      	ldr	r0, [r7, #12]
 8003eb8:	f000 f89b 	bl	8003ff2 <I2C_IsAcknowledgeFailed>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d001      	beq.n	8003ec6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e034      	b.n	8003f30 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ecc:	d028      	beq.n	8003f20 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ece:	f7fd fa0b 	bl	80012e8 <HAL_GetTick>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	68ba      	ldr	r2, [r7, #8]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d302      	bcc.n	8003ee4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d11d      	bne.n	8003f20 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	695b      	ldr	r3, [r3, #20]
 8003eea:	f003 0304 	and.w	r3, r3, #4
 8003eee:	2b04      	cmp	r3, #4
 8003ef0:	d016      	beq.n	8003f20 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2220      	movs	r2, #32
 8003efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f0c:	f043 0220 	orr.w	r2, r3, #32
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2200      	movs	r2, #0
 8003f18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e007      	b.n	8003f30 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	695b      	ldr	r3, [r3, #20]
 8003f26:	f003 0304 	and.w	r3, r3, #4
 8003f2a:	2b04      	cmp	r3, #4
 8003f2c:	d1c3      	bne.n	8003eb6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003f2e:	2300      	movs	r3, #0
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3710      	adds	r7, #16
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f44:	e049      	b.n	8003fda <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	695b      	ldr	r3, [r3, #20]
 8003f4c:	f003 0310 	and.w	r3, r3, #16
 8003f50:	2b10      	cmp	r3, #16
 8003f52:	d119      	bne.n	8003f88 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f06f 0210 	mvn.w	r2, #16
 8003f5c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2200      	movs	r2, #0
 8003f62:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2220      	movs	r2, #32
 8003f68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e030      	b.n	8003fea <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f88:	f7fd f9ae 	bl	80012e8 <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	68ba      	ldr	r2, [r7, #8]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d302      	bcc.n	8003f9e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d11d      	bne.n	8003fda <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	695b      	ldr	r3, [r3, #20]
 8003fa4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fa8:	2b40      	cmp	r3, #64	@ 0x40
 8003faa:	d016      	beq.n	8003fda <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2220      	movs	r2, #32
 8003fb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc6:	f043 0220 	orr.w	r2, r3, #32
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e007      	b.n	8003fea <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	695b      	ldr	r3, [r3, #20]
 8003fe0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fe4:	2b40      	cmp	r3, #64	@ 0x40
 8003fe6:	d1ae      	bne.n	8003f46 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003fe8:	2300      	movs	r3, #0
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3710      	adds	r7, #16
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}

08003ff2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003ff2:	b480      	push	{r7}
 8003ff4:	b083      	sub	sp, #12
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	695b      	ldr	r3, [r3, #20]
 8004000:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004004:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004008:	d11b      	bne.n	8004042 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004012:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2220      	movs	r2, #32
 800401e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800402e:	f043 0204 	orr.w	r2, r3, #4
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e000      	b.n	8004044 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004042:	2300      	movs	r3, #0
}
 8004044:	4618      	mov	r0, r3
 8004046:	370c      	adds	r7, #12
 8004048:	46bd      	mov	sp, r7
 800404a:	bc80      	pop	{r7}
 800404c:	4770      	bx	lr
	...

08004050 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b086      	sub	sp, #24
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d101      	bne.n	8004062 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e272      	b.n	8004548 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0301 	and.w	r3, r3, #1
 800406a:	2b00      	cmp	r3, #0
 800406c:	f000 8087 	beq.w	800417e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004070:	4b92      	ldr	r3, [pc, #584]	@ (80042bc <HAL_RCC_OscConfig+0x26c>)
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f003 030c 	and.w	r3, r3, #12
 8004078:	2b04      	cmp	r3, #4
 800407a:	d00c      	beq.n	8004096 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800407c:	4b8f      	ldr	r3, [pc, #572]	@ (80042bc <HAL_RCC_OscConfig+0x26c>)
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	f003 030c 	and.w	r3, r3, #12
 8004084:	2b08      	cmp	r3, #8
 8004086:	d112      	bne.n	80040ae <HAL_RCC_OscConfig+0x5e>
 8004088:	4b8c      	ldr	r3, [pc, #560]	@ (80042bc <HAL_RCC_OscConfig+0x26c>)
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004090:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004094:	d10b      	bne.n	80040ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004096:	4b89      	ldr	r3, [pc, #548]	@ (80042bc <HAL_RCC_OscConfig+0x26c>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d06c      	beq.n	800417c <HAL_RCC_OscConfig+0x12c>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d168      	bne.n	800417c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e24c      	b.n	8004548 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040b6:	d106      	bne.n	80040c6 <HAL_RCC_OscConfig+0x76>
 80040b8:	4b80      	ldr	r3, [pc, #512]	@ (80042bc <HAL_RCC_OscConfig+0x26c>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a7f      	ldr	r2, [pc, #508]	@ (80042bc <HAL_RCC_OscConfig+0x26c>)
 80040be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040c2:	6013      	str	r3, [r2, #0]
 80040c4:	e02e      	b.n	8004124 <HAL_RCC_OscConfig+0xd4>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d10c      	bne.n	80040e8 <HAL_RCC_OscConfig+0x98>
 80040ce:	4b7b      	ldr	r3, [pc, #492]	@ (80042bc <HAL_RCC_OscConfig+0x26c>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a7a      	ldr	r2, [pc, #488]	@ (80042bc <HAL_RCC_OscConfig+0x26c>)
 80040d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040d8:	6013      	str	r3, [r2, #0]
 80040da:	4b78      	ldr	r3, [pc, #480]	@ (80042bc <HAL_RCC_OscConfig+0x26c>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a77      	ldr	r2, [pc, #476]	@ (80042bc <HAL_RCC_OscConfig+0x26c>)
 80040e0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80040e4:	6013      	str	r3, [r2, #0]
 80040e6:	e01d      	b.n	8004124 <HAL_RCC_OscConfig+0xd4>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80040f0:	d10c      	bne.n	800410c <HAL_RCC_OscConfig+0xbc>
 80040f2:	4b72      	ldr	r3, [pc, #456]	@ (80042bc <HAL_RCC_OscConfig+0x26c>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a71      	ldr	r2, [pc, #452]	@ (80042bc <HAL_RCC_OscConfig+0x26c>)
 80040f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80040fc:	6013      	str	r3, [r2, #0]
 80040fe:	4b6f      	ldr	r3, [pc, #444]	@ (80042bc <HAL_RCC_OscConfig+0x26c>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a6e      	ldr	r2, [pc, #440]	@ (80042bc <HAL_RCC_OscConfig+0x26c>)
 8004104:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004108:	6013      	str	r3, [r2, #0]
 800410a:	e00b      	b.n	8004124 <HAL_RCC_OscConfig+0xd4>
 800410c:	4b6b      	ldr	r3, [pc, #428]	@ (80042bc <HAL_RCC_OscConfig+0x26c>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a6a      	ldr	r2, [pc, #424]	@ (80042bc <HAL_RCC_OscConfig+0x26c>)
 8004112:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004116:	6013      	str	r3, [r2, #0]
 8004118:	4b68      	ldr	r3, [pc, #416]	@ (80042bc <HAL_RCC_OscConfig+0x26c>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a67      	ldr	r2, [pc, #412]	@ (80042bc <HAL_RCC_OscConfig+0x26c>)
 800411e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004122:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d013      	beq.n	8004154 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800412c:	f7fd f8dc 	bl	80012e8 <HAL_GetTick>
 8004130:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004132:	e008      	b.n	8004146 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004134:	f7fd f8d8 	bl	80012e8 <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	2b64      	cmp	r3, #100	@ 0x64
 8004140:	d901      	bls.n	8004146 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e200      	b.n	8004548 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004146:	4b5d      	ldr	r3, [pc, #372]	@ (80042bc <HAL_RCC_OscConfig+0x26c>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d0f0      	beq.n	8004134 <HAL_RCC_OscConfig+0xe4>
 8004152:	e014      	b.n	800417e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004154:	f7fd f8c8 	bl	80012e8 <HAL_GetTick>
 8004158:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800415a:	e008      	b.n	800416e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800415c:	f7fd f8c4 	bl	80012e8 <HAL_GetTick>
 8004160:	4602      	mov	r2, r0
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	2b64      	cmp	r3, #100	@ 0x64
 8004168:	d901      	bls.n	800416e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	e1ec      	b.n	8004548 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800416e:	4b53      	ldr	r3, [pc, #332]	@ (80042bc <HAL_RCC_OscConfig+0x26c>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d1f0      	bne.n	800415c <HAL_RCC_OscConfig+0x10c>
 800417a:	e000      	b.n	800417e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800417c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0302 	and.w	r3, r3, #2
 8004186:	2b00      	cmp	r3, #0
 8004188:	d063      	beq.n	8004252 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800418a:	4b4c      	ldr	r3, [pc, #304]	@ (80042bc <HAL_RCC_OscConfig+0x26c>)
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	f003 030c 	and.w	r3, r3, #12
 8004192:	2b00      	cmp	r3, #0
 8004194:	d00b      	beq.n	80041ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004196:	4b49      	ldr	r3, [pc, #292]	@ (80042bc <HAL_RCC_OscConfig+0x26c>)
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	f003 030c 	and.w	r3, r3, #12
 800419e:	2b08      	cmp	r3, #8
 80041a0:	d11c      	bne.n	80041dc <HAL_RCC_OscConfig+0x18c>
 80041a2:	4b46      	ldr	r3, [pc, #280]	@ (80042bc <HAL_RCC_OscConfig+0x26c>)
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d116      	bne.n	80041dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041ae:	4b43      	ldr	r3, [pc, #268]	@ (80042bc <HAL_RCC_OscConfig+0x26c>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0302 	and.w	r3, r3, #2
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d005      	beq.n	80041c6 <HAL_RCC_OscConfig+0x176>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	691b      	ldr	r3, [r3, #16]
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d001      	beq.n	80041c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e1c0      	b.n	8004548 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041c6:	4b3d      	ldr	r3, [pc, #244]	@ (80042bc <HAL_RCC_OscConfig+0x26c>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	695b      	ldr	r3, [r3, #20]
 80041d2:	00db      	lsls	r3, r3, #3
 80041d4:	4939      	ldr	r1, [pc, #228]	@ (80042bc <HAL_RCC_OscConfig+0x26c>)
 80041d6:	4313      	orrs	r3, r2
 80041d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041da:	e03a      	b.n	8004252 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	691b      	ldr	r3, [r3, #16]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d020      	beq.n	8004226 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041e4:	4b36      	ldr	r3, [pc, #216]	@ (80042c0 <HAL_RCC_OscConfig+0x270>)
 80041e6:	2201      	movs	r2, #1
 80041e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041ea:	f7fd f87d 	bl	80012e8 <HAL_GetTick>
 80041ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041f0:	e008      	b.n	8004204 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041f2:	f7fd f879 	bl	80012e8 <HAL_GetTick>
 80041f6:	4602      	mov	r2, r0
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	2b02      	cmp	r3, #2
 80041fe:	d901      	bls.n	8004204 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004200:	2303      	movs	r3, #3
 8004202:	e1a1      	b.n	8004548 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004204:	4b2d      	ldr	r3, [pc, #180]	@ (80042bc <HAL_RCC_OscConfig+0x26c>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 0302 	and.w	r3, r3, #2
 800420c:	2b00      	cmp	r3, #0
 800420e:	d0f0      	beq.n	80041f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004210:	4b2a      	ldr	r3, [pc, #168]	@ (80042bc <HAL_RCC_OscConfig+0x26c>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	695b      	ldr	r3, [r3, #20]
 800421c:	00db      	lsls	r3, r3, #3
 800421e:	4927      	ldr	r1, [pc, #156]	@ (80042bc <HAL_RCC_OscConfig+0x26c>)
 8004220:	4313      	orrs	r3, r2
 8004222:	600b      	str	r3, [r1, #0]
 8004224:	e015      	b.n	8004252 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004226:	4b26      	ldr	r3, [pc, #152]	@ (80042c0 <HAL_RCC_OscConfig+0x270>)
 8004228:	2200      	movs	r2, #0
 800422a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800422c:	f7fd f85c 	bl	80012e8 <HAL_GetTick>
 8004230:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004232:	e008      	b.n	8004246 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004234:	f7fd f858 	bl	80012e8 <HAL_GetTick>
 8004238:	4602      	mov	r2, r0
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	2b02      	cmp	r3, #2
 8004240:	d901      	bls.n	8004246 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e180      	b.n	8004548 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004246:	4b1d      	ldr	r3, [pc, #116]	@ (80042bc <HAL_RCC_OscConfig+0x26c>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 0302 	and.w	r3, r3, #2
 800424e:	2b00      	cmp	r3, #0
 8004250:	d1f0      	bne.n	8004234 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0308 	and.w	r3, r3, #8
 800425a:	2b00      	cmp	r3, #0
 800425c:	d03a      	beq.n	80042d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	699b      	ldr	r3, [r3, #24]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d019      	beq.n	800429a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004266:	4b17      	ldr	r3, [pc, #92]	@ (80042c4 <HAL_RCC_OscConfig+0x274>)
 8004268:	2201      	movs	r2, #1
 800426a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800426c:	f7fd f83c 	bl	80012e8 <HAL_GetTick>
 8004270:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004272:	e008      	b.n	8004286 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004274:	f7fd f838 	bl	80012e8 <HAL_GetTick>
 8004278:	4602      	mov	r2, r0
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	2b02      	cmp	r3, #2
 8004280:	d901      	bls.n	8004286 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	e160      	b.n	8004548 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004286:	4b0d      	ldr	r3, [pc, #52]	@ (80042bc <HAL_RCC_OscConfig+0x26c>)
 8004288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800428a:	f003 0302 	and.w	r3, r3, #2
 800428e:	2b00      	cmp	r3, #0
 8004290:	d0f0      	beq.n	8004274 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004292:	2001      	movs	r0, #1
 8004294:	f000 faba 	bl	800480c <RCC_Delay>
 8004298:	e01c      	b.n	80042d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800429a:	4b0a      	ldr	r3, [pc, #40]	@ (80042c4 <HAL_RCC_OscConfig+0x274>)
 800429c:	2200      	movs	r2, #0
 800429e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042a0:	f7fd f822 	bl	80012e8 <HAL_GetTick>
 80042a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042a6:	e00f      	b.n	80042c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042a8:	f7fd f81e 	bl	80012e8 <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d908      	bls.n	80042c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e146      	b.n	8004548 <HAL_RCC_OscConfig+0x4f8>
 80042ba:	bf00      	nop
 80042bc:	40021000 	.word	0x40021000
 80042c0:	42420000 	.word	0x42420000
 80042c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042c8:	4b92      	ldr	r3, [pc, #584]	@ (8004514 <HAL_RCC_OscConfig+0x4c4>)
 80042ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042cc:	f003 0302 	and.w	r3, r3, #2
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d1e9      	bne.n	80042a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 0304 	and.w	r3, r3, #4
 80042dc:	2b00      	cmp	r3, #0
 80042de:	f000 80a6 	beq.w	800442e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042e2:	2300      	movs	r3, #0
 80042e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042e6:	4b8b      	ldr	r3, [pc, #556]	@ (8004514 <HAL_RCC_OscConfig+0x4c4>)
 80042e8:	69db      	ldr	r3, [r3, #28]
 80042ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d10d      	bne.n	800430e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042f2:	4b88      	ldr	r3, [pc, #544]	@ (8004514 <HAL_RCC_OscConfig+0x4c4>)
 80042f4:	69db      	ldr	r3, [r3, #28]
 80042f6:	4a87      	ldr	r2, [pc, #540]	@ (8004514 <HAL_RCC_OscConfig+0x4c4>)
 80042f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042fc:	61d3      	str	r3, [r2, #28]
 80042fe:	4b85      	ldr	r3, [pc, #532]	@ (8004514 <HAL_RCC_OscConfig+0x4c4>)
 8004300:	69db      	ldr	r3, [r3, #28]
 8004302:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004306:	60bb      	str	r3, [r7, #8]
 8004308:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800430a:	2301      	movs	r3, #1
 800430c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800430e:	4b82      	ldr	r3, [pc, #520]	@ (8004518 <HAL_RCC_OscConfig+0x4c8>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004316:	2b00      	cmp	r3, #0
 8004318:	d118      	bne.n	800434c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800431a:	4b7f      	ldr	r3, [pc, #508]	@ (8004518 <HAL_RCC_OscConfig+0x4c8>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a7e      	ldr	r2, [pc, #504]	@ (8004518 <HAL_RCC_OscConfig+0x4c8>)
 8004320:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004324:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004326:	f7fc ffdf 	bl	80012e8 <HAL_GetTick>
 800432a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800432c:	e008      	b.n	8004340 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800432e:	f7fc ffdb 	bl	80012e8 <HAL_GetTick>
 8004332:	4602      	mov	r2, r0
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	1ad3      	subs	r3, r2, r3
 8004338:	2b64      	cmp	r3, #100	@ 0x64
 800433a:	d901      	bls.n	8004340 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800433c:	2303      	movs	r3, #3
 800433e:	e103      	b.n	8004548 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004340:	4b75      	ldr	r3, [pc, #468]	@ (8004518 <HAL_RCC_OscConfig+0x4c8>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004348:	2b00      	cmp	r3, #0
 800434a:	d0f0      	beq.n	800432e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	2b01      	cmp	r3, #1
 8004352:	d106      	bne.n	8004362 <HAL_RCC_OscConfig+0x312>
 8004354:	4b6f      	ldr	r3, [pc, #444]	@ (8004514 <HAL_RCC_OscConfig+0x4c4>)
 8004356:	6a1b      	ldr	r3, [r3, #32]
 8004358:	4a6e      	ldr	r2, [pc, #440]	@ (8004514 <HAL_RCC_OscConfig+0x4c4>)
 800435a:	f043 0301 	orr.w	r3, r3, #1
 800435e:	6213      	str	r3, [r2, #32]
 8004360:	e02d      	b.n	80043be <HAL_RCC_OscConfig+0x36e>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d10c      	bne.n	8004384 <HAL_RCC_OscConfig+0x334>
 800436a:	4b6a      	ldr	r3, [pc, #424]	@ (8004514 <HAL_RCC_OscConfig+0x4c4>)
 800436c:	6a1b      	ldr	r3, [r3, #32]
 800436e:	4a69      	ldr	r2, [pc, #420]	@ (8004514 <HAL_RCC_OscConfig+0x4c4>)
 8004370:	f023 0301 	bic.w	r3, r3, #1
 8004374:	6213      	str	r3, [r2, #32]
 8004376:	4b67      	ldr	r3, [pc, #412]	@ (8004514 <HAL_RCC_OscConfig+0x4c4>)
 8004378:	6a1b      	ldr	r3, [r3, #32]
 800437a:	4a66      	ldr	r2, [pc, #408]	@ (8004514 <HAL_RCC_OscConfig+0x4c4>)
 800437c:	f023 0304 	bic.w	r3, r3, #4
 8004380:	6213      	str	r3, [r2, #32]
 8004382:	e01c      	b.n	80043be <HAL_RCC_OscConfig+0x36e>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	2b05      	cmp	r3, #5
 800438a:	d10c      	bne.n	80043a6 <HAL_RCC_OscConfig+0x356>
 800438c:	4b61      	ldr	r3, [pc, #388]	@ (8004514 <HAL_RCC_OscConfig+0x4c4>)
 800438e:	6a1b      	ldr	r3, [r3, #32]
 8004390:	4a60      	ldr	r2, [pc, #384]	@ (8004514 <HAL_RCC_OscConfig+0x4c4>)
 8004392:	f043 0304 	orr.w	r3, r3, #4
 8004396:	6213      	str	r3, [r2, #32]
 8004398:	4b5e      	ldr	r3, [pc, #376]	@ (8004514 <HAL_RCC_OscConfig+0x4c4>)
 800439a:	6a1b      	ldr	r3, [r3, #32]
 800439c:	4a5d      	ldr	r2, [pc, #372]	@ (8004514 <HAL_RCC_OscConfig+0x4c4>)
 800439e:	f043 0301 	orr.w	r3, r3, #1
 80043a2:	6213      	str	r3, [r2, #32]
 80043a4:	e00b      	b.n	80043be <HAL_RCC_OscConfig+0x36e>
 80043a6:	4b5b      	ldr	r3, [pc, #364]	@ (8004514 <HAL_RCC_OscConfig+0x4c4>)
 80043a8:	6a1b      	ldr	r3, [r3, #32]
 80043aa:	4a5a      	ldr	r2, [pc, #360]	@ (8004514 <HAL_RCC_OscConfig+0x4c4>)
 80043ac:	f023 0301 	bic.w	r3, r3, #1
 80043b0:	6213      	str	r3, [r2, #32]
 80043b2:	4b58      	ldr	r3, [pc, #352]	@ (8004514 <HAL_RCC_OscConfig+0x4c4>)
 80043b4:	6a1b      	ldr	r3, [r3, #32]
 80043b6:	4a57      	ldr	r2, [pc, #348]	@ (8004514 <HAL_RCC_OscConfig+0x4c4>)
 80043b8:	f023 0304 	bic.w	r3, r3, #4
 80043bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d015      	beq.n	80043f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043c6:	f7fc ff8f 	bl	80012e8 <HAL_GetTick>
 80043ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043cc:	e00a      	b.n	80043e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043ce:	f7fc ff8b 	bl	80012e8 <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043dc:	4293      	cmp	r3, r2
 80043de:	d901      	bls.n	80043e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80043e0:	2303      	movs	r3, #3
 80043e2:	e0b1      	b.n	8004548 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043e4:	4b4b      	ldr	r3, [pc, #300]	@ (8004514 <HAL_RCC_OscConfig+0x4c4>)
 80043e6:	6a1b      	ldr	r3, [r3, #32]
 80043e8:	f003 0302 	and.w	r3, r3, #2
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d0ee      	beq.n	80043ce <HAL_RCC_OscConfig+0x37e>
 80043f0:	e014      	b.n	800441c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043f2:	f7fc ff79 	bl	80012e8 <HAL_GetTick>
 80043f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043f8:	e00a      	b.n	8004410 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043fa:	f7fc ff75 	bl	80012e8 <HAL_GetTick>
 80043fe:	4602      	mov	r2, r0
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004408:	4293      	cmp	r3, r2
 800440a:	d901      	bls.n	8004410 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800440c:	2303      	movs	r3, #3
 800440e:	e09b      	b.n	8004548 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004410:	4b40      	ldr	r3, [pc, #256]	@ (8004514 <HAL_RCC_OscConfig+0x4c4>)
 8004412:	6a1b      	ldr	r3, [r3, #32]
 8004414:	f003 0302 	and.w	r3, r3, #2
 8004418:	2b00      	cmp	r3, #0
 800441a:	d1ee      	bne.n	80043fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800441c:	7dfb      	ldrb	r3, [r7, #23]
 800441e:	2b01      	cmp	r3, #1
 8004420:	d105      	bne.n	800442e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004422:	4b3c      	ldr	r3, [pc, #240]	@ (8004514 <HAL_RCC_OscConfig+0x4c4>)
 8004424:	69db      	ldr	r3, [r3, #28]
 8004426:	4a3b      	ldr	r2, [pc, #236]	@ (8004514 <HAL_RCC_OscConfig+0x4c4>)
 8004428:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800442c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	69db      	ldr	r3, [r3, #28]
 8004432:	2b00      	cmp	r3, #0
 8004434:	f000 8087 	beq.w	8004546 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004438:	4b36      	ldr	r3, [pc, #216]	@ (8004514 <HAL_RCC_OscConfig+0x4c4>)
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	f003 030c 	and.w	r3, r3, #12
 8004440:	2b08      	cmp	r3, #8
 8004442:	d061      	beq.n	8004508 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	69db      	ldr	r3, [r3, #28]
 8004448:	2b02      	cmp	r3, #2
 800444a:	d146      	bne.n	80044da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800444c:	4b33      	ldr	r3, [pc, #204]	@ (800451c <HAL_RCC_OscConfig+0x4cc>)
 800444e:	2200      	movs	r2, #0
 8004450:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004452:	f7fc ff49 	bl	80012e8 <HAL_GetTick>
 8004456:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004458:	e008      	b.n	800446c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800445a:	f7fc ff45 	bl	80012e8 <HAL_GetTick>
 800445e:	4602      	mov	r2, r0
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	2b02      	cmp	r3, #2
 8004466:	d901      	bls.n	800446c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004468:	2303      	movs	r3, #3
 800446a:	e06d      	b.n	8004548 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800446c:	4b29      	ldr	r3, [pc, #164]	@ (8004514 <HAL_RCC_OscConfig+0x4c4>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004474:	2b00      	cmp	r3, #0
 8004476:	d1f0      	bne.n	800445a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6a1b      	ldr	r3, [r3, #32]
 800447c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004480:	d108      	bne.n	8004494 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004482:	4b24      	ldr	r3, [pc, #144]	@ (8004514 <HAL_RCC_OscConfig+0x4c4>)
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	4921      	ldr	r1, [pc, #132]	@ (8004514 <HAL_RCC_OscConfig+0x4c4>)
 8004490:	4313      	orrs	r3, r2
 8004492:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004494:	4b1f      	ldr	r3, [pc, #124]	@ (8004514 <HAL_RCC_OscConfig+0x4c4>)
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6a19      	ldr	r1, [r3, #32]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044a4:	430b      	orrs	r3, r1
 80044a6:	491b      	ldr	r1, [pc, #108]	@ (8004514 <HAL_RCC_OscConfig+0x4c4>)
 80044a8:	4313      	orrs	r3, r2
 80044aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044ac:	4b1b      	ldr	r3, [pc, #108]	@ (800451c <HAL_RCC_OscConfig+0x4cc>)
 80044ae:	2201      	movs	r2, #1
 80044b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044b2:	f7fc ff19 	bl	80012e8 <HAL_GetTick>
 80044b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80044b8:	e008      	b.n	80044cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044ba:	f7fc ff15 	bl	80012e8 <HAL_GetTick>
 80044be:	4602      	mov	r2, r0
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	2b02      	cmp	r3, #2
 80044c6:	d901      	bls.n	80044cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80044c8:	2303      	movs	r3, #3
 80044ca:	e03d      	b.n	8004548 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80044cc:	4b11      	ldr	r3, [pc, #68]	@ (8004514 <HAL_RCC_OscConfig+0x4c4>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d0f0      	beq.n	80044ba <HAL_RCC_OscConfig+0x46a>
 80044d8:	e035      	b.n	8004546 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044da:	4b10      	ldr	r3, [pc, #64]	@ (800451c <HAL_RCC_OscConfig+0x4cc>)
 80044dc:	2200      	movs	r2, #0
 80044de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044e0:	f7fc ff02 	bl	80012e8 <HAL_GetTick>
 80044e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044e6:	e008      	b.n	80044fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044e8:	f7fc fefe 	bl	80012e8 <HAL_GetTick>
 80044ec:	4602      	mov	r2, r0
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	2b02      	cmp	r3, #2
 80044f4:	d901      	bls.n	80044fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	e026      	b.n	8004548 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044fa:	4b06      	ldr	r3, [pc, #24]	@ (8004514 <HAL_RCC_OscConfig+0x4c4>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d1f0      	bne.n	80044e8 <HAL_RCC_OscConfig+0x498>
 8004506:	e01e      	b.n	8004546 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	69db      	ldr	r3, [r3, #28]
 800450c:	2b01      	cmp	r3, #1
 800450e:	d107      	bne.n	8004520 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e019      	b.n	8004548 <HAL_RCC_OscConfig+0x4f8>
 8004514:	40021000 	.word	0x40021000
 8004518:	40007000 	.word	0x40007000
 800451c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004520:	4b0b      	ldr	r3, [pc, #44]	@ (8004550 <HAL_RCC_OscConfig+0x500>)
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6a1b      	ldr	r3, [r3, #32]
 8004530:	429a      	cmp	r2, r3
 8004532:	d106      	bne.n	8004542 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800453e:	429a      	cmp	r2, r3
 8004540:	d001      	beq.n	8004546 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e000      	b.n	8004548 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004546:	2300      	movs	r3, #0
}
 8004548:	4618      	mov	r0, r3
 800454a:	3718      	adds	r7, #24
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}
 8004550:	40021000 	.word	0x40021000

08004554 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b084      	sub	sp, #16
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d101      	bne.n	8004568 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e0d0      	b.n	800470a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004568:	4b6a      	ldr	r3, [pc, #424]	@ (8004714 <HAL_RCC_ClockConfig+0x1c0>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0307 	and.w	r3, r3, #7
 8004570:	683a      	ldr	r2, [r7, #0]
 8004572:	429a      	cmp	r2, r3
 8004574:	d910      	bls.n	8004598 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004576:	4b67      	ldr	r3, [pc, #412]	@ (8004714 <HAL_RCC_ClockConfig+0x1c0>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f023 0207 	bic.w	r2, r3, #7
 800457e:	4965      	ldr	r1, [pc, #404]	@ (8004714 <HAL_RCC_ClockConfig+0x1c0>)
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	4313      	orrs	r3, r2
 8004584:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004586:	4b63      	ldr	r3, [pc, #396]	@ (8004714 <HAL_RCC_ClockConfig+0x1c0>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0307 	and.w	r3, r3, #7
 800458e:	683a      	ldr	r2, [r7, #0]
 8004590:	429a      	cmp	r2, r3
 8004592:	d001      	beq.n	8004598 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	e0b8      	b.n	800470a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 0302 	and.w	r3, r3, #2
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d020      	beq.n	80045e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0304 	and.w	r3, r3, #4
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d005      	beq.n	80045bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045b0:	4b59      	ldr	r3, [pc, #356]	@ (8004718 <HAL_RCC_ClockConfig+0x1c4>)
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	4a58      	ldr	r2, [pc, #352]	@ (8004718 <HAL_RCC_ClockConfig+0x1c4>)
 80045b6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80045ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0308 	and.w	r3, r3, #8
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d005      	beq.n	80045d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045c8:	4b53      	ldr	r3, [pc, #332]	@ (8004718 <HAL_RCC_ClockConfig+0x1c4>)
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	4a52      	ldr	r2, [pc, #328]	@ (8004718 <HAL_RCC_ClockConfig+0x1c4>)
 80045ce:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80045d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045d4:	4b50      	ldr	r3, [pc, #320]	@ (8004718 <HAL_RCC_ClockConfig+0x1c4>)
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	494d      	ldr	r1, [pc, #308]	@ (8004718 <HAL_RCC_ClockConfig+0x1c4>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0301 	and.w	r3, r3, #1
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d040      	beq.n	8004674 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d107      	bne.n	800460a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045fa:	4b47      	ldr	r3, [pc, #284]	@ (8004718 <HAL_RCC_ClockConfig+0x1c4>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d115      	bne.n	8004632 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e07f      	b.n	800470a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	2b02      	cmp	r3, #2
 8004610:	d107      	bne.n	8004622 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004612:	4b41      	ldr	r3, [pc, #260]	@ (8004718 <HAL_RCC_ClockConfig+0x1c4>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d109      	bne.n	8004632 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e073      	b.n	800470a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004622:	4b3d      	ldr	r3, [pc, #244]	@ (8004718 <HAL_RCC_ClockConfig+0x1c4>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 0302 	and.w	r3, r3, #2
 800462a:	2b00      	cmp	r3, #0
 800462c:	d101      	bne.n	8004632 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e06b      	b.n	800470a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004632:	4b39      	ldr	r3, [pc, #228]	@ (8004718 <HAL_RCC_ClockConfig+0x1c4>)
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	f023 0203 	bic.w	r2, r3, #3
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	4936      	ldr	r1, [pc, #216]	@ (8004718 <HAL_RCC_ClockConfig+0x1c4>)
 8004640:	4313      	orrs	r3, r2
 8004642:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004644:	f7fc fe50 	bl	80012e8 <HAL_GetTick>
 8004648:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800464a:	e00a      	b.n	8004662 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800464c:	f7fc fe4c 	bl	80012e8 <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	f241 3288 	movw	r2, #5000	@ 0x1388
 800465a:	4293      	cmp	r3, r2
 800465c:	d901      	bls.n	8004662 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e053      	b.n	800470a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004662:	4b2d      	ldr	r3, [pc, #180]	@ (8004718 <HAL_RCC_ClockConfig+0x1c4>)
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	f003 020c 	and.w	r2, r3, #12
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	429a      	cmp	r2, r3
 8004672:	d1eb      	bne.n	800464c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004674:	4b27      	ldr	r3, [pc, #156]	@ (8004714 <HAL_RCC_ClockConfig+0x1c0>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0307 	and.w	r3, r3, #7
 800467c:	683a      	ldr	r2, [r7, #0]
 800467e:	429a      	cmp	r2, r3
 8004680:	d210      	bcs.n	80046a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004682:	4b24      	ldr	r3, [pc, #144]	@ (8004714 <HAL_RCC_ClockConfig+0x1c0>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f023 0207 	bic.w	r2, r3, #7
 800468a:	4922      	ldr	r1, [pc, #136]	@ (8004714 <HAL_RCC_ClockConfig+0x1c0>)
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	4313      	orrs	r3, r2
 8004690:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004692:	4b20      	ldr	r3, [pc, #128]	@ (8004714 <HAL_RCC_ClockConfig+0x1c0>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0307 	and.w	r3, r3, #7
 800469a:	683a      	ldr	r2, [r7, #0]
 800469c:	429a      	cmp	r2, r3
 800469e:	d001      	beq.n	80046a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e032      	b.n	800470a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 0304 	and.w	r3, r3, #4
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d008      	beq.n	80046c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046b0:	4b19      	ldr	r3, [pc, #100]	@ (8004718 <HAL_RCC_ClockConfig+0x1c4>)
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	4916      	ldr	r1, [pc, #88]	@ (8004718 <HAL_RCC_ClockConfig+0x1c4>)
 80046be:	4313      	orrs	r3, r2
 80046c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0308 	and.w	r3, r3, #8
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d009      	beq.n	80046e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80046ce:	4b12      	ldr	r3, [pc, #72]	@ (8004718 <HAL_RCC_ClockConfig+0x1c4>)
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	00db      	lsls	r3, r3, #3
 80046dc:	490e      	ldr	r1, [pc, #56]	@ (8004718 <HAL_RCC_ClockConfig+0x1c4>)
 80046de:	4313      	orrs	r3, r2
 80046e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80046e2:	f000 f821 	bl	8004728 <HAL_RCC_GetSysClockFreq>
 80046e6:	4602      	mov	r2, r0
 80046e8:	4b0b      	ldr	r3, [pc, #44]	@ (8004718 <HAL_RCC_ClockConfig+0x1c4>)
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	091b      	lsrs	r3, r3, #4
 80046ee:	f003 030f 	and.w	r3, r3, #15
 80046f2:	490a      	ldr	r1, [pc, #40]	@ (800471c <HAL_RCC_ClockConfig+0x1c8>)
 80046f4:	5ccb      	ldrb	r3, [r1, r3]
 80046f6:	fa22 f303 	lsr.w	r3, r2, r3
 80046fa:	4a09      	ldr	r2, [pc, #36]	@ (8004720 <HAL_RCC_ClockConfig+0x1cc>)
 80046fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80046fe:	4b09      	ldr	r3, [pc, #36]	@ (8004724 <HAL_RCC_ClockConfig+0x1d0>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4618      	mov	r0, r3
 8004704:	f7fc fdae 	bl	8001264 <HAL_InitTick>

  return HAL_OK;
 8004708:	2300      	movs	r3, #0
}
 800470a:	4618      	mov	r0, r3
 800470c:	3710      	adds	r7, #16
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop
 8004714:	40022000 	.word	0x40022000
 8004718:	40021000 	.word	0x40021000
 800471c:	08005394 	.word	0x08005394
 8004720:	20000000 	.word	0x20000000
 8004724:	20000004 	.word	0x20000004

08004728 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004728:	b480      	push	{r7}
 800472a:	b087      	sub	sp, #28
 800472c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800472e:	2300      	movs	r3, #0
 8004730:	60fb      	str	r3, [r7, #12]
 8004732:	2300      	movs	r3, #0
 8004734:	60bb      	str	r3, [r7, #8]
 8004736:	2300      	movs	r3, #0
 8004738:	617b      	str	r3, [r7, #20]
 800473a:	2300      	movs	r3, #0
 800473c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800473e:	2300      	movs	r3, #0
 8004740:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004742:	4b1e      	ldr	r3, [pc, #120]	@ (80047bc <HAL_RCC_GetSysClockFreq+0x94>)
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f003 030c 	and.w	r3, r3, #12
 800474e:	2b04      	cmp	r3, #4
 8004750:	d002      	beq.n	8004758 <HAL_RCC_GetSysClockFreq+0x30>
 8004752:	2b08      	cmp	r3, #8
 8004754:	d003      	beq.n	800475e <HAL_RCC_GetSysClockFreq+0x36>
 8004756:	e027      	b.n	80047a8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004758:	4b19      	ldr	r3, [pc, #100]	@ (80047c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800475a:	613b      	str	r3, [r7, #16]
      break;
 800475c:	e027      	b.n	80047ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	0c9b      	lsrs	r3, r3, #18
 8004762:	f003 030f 	and.w	r3, r3, #15
 8004766:	4a17      	ldr	r2, [pc, #92]	@ (80047c4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004768:	5cd3      	ldrb	r3, [r2, r3]
 800476a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d010      	beq.n	8004798 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004776:	4b11      	ldr	r3, [pc, #68]	@ (80047bc <HAL_RCC_GetSysClockFreq+0x94>)
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	0c5b      	lsrs	r3, r3, #17
 800477c:	f003 0301 	and.w	r3, r3, #1
 8004780:	4a11      	ldr	r2, [pc, #68]	@ (80047c8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004782:	5cd3      	ldrb	r3, [r2, r3]
 8004784:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4a0d      	ldr	r2, [pc, #52]	@ (80047c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800478a:	fb03 f202 	mul.w	r2, r3, r2
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	fbb2 f3f3 	udiv	r3, r2, r3
 8004794:	617b      	str	r3, [r7, #20]
 8004796:	e004      	b.n	80047a2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	4a0c      	ldr	r2, [pc, #48]	@ (80047cc <HAL_RCC_GetSysClockFreq+0xa4>)
 800479c:	fb02 f303 	mul.w	r3, r2, r3
 80047a0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	613b      	str	r3, [r7, #16]
      break;
 80047a6:	e002      	b.n	80047ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80047a8:	4b05      	ldr	r3, [pc, #20]	@ (80047c0 <HAL_RCC_GetSysClockFreq+0x98>)
 80047aa:	613b      	str	r3, [r7, #16]
      break;
 80047ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047ae:	693b      	ldr	r3, [r7, #16]
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	371c      	adds	r7, #28
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bc80      	pop	{r7}
 80047b8:	4770      	bx	lr
 80047ba:	bf00      	nop
 80047bc:	40021000 	.word	0x40021000
 80047c0:	007a1200 	.word	0x007a1200
 80047c4:	080053ac 	.word	0x080053ac
 80047c8:	080053bc 	.word	0x080053bc
 80047cc:	003d0900 	.word	0x003d0900

080047d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047d0:	b480      	push	{r7}
 80047d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047d4:	4b02      	ldr	r3, [pc, #8]	@ (80047e0 <HAL_RCC_GetHCLKFreq+0x10>)
 80047d6:	681b      	ldr	r3, [r3, #0]
}
 80047d8:	4618      	mov	r0, r3
 80047da:	46bd      	mov	sp, r7
 80047dc:	bc80      	pop	{r7}
 80047de:	4770      	bx	lr
 80047e0:	20000000 	.word	0x20000000

080047e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80047e8:	f7ff fff2 	bl	80047d0 <HAL_RCC_GetHCLKFreq>
 80047ec:	4602      	mov	r2, r0
 80047ee:	4b05      	ldr	r3, [pc, #20]	@ (8004804 <HAL_RCC_GetPCLK1Freq+0x20>)
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	0a1b      	lsrs	r3, r3, #8
 80047f4:	f003 0307 	and.w	r3, r3, #7
 80047f8:	4903      	ldr	r1, [pc, #12]	@ (8004808 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047fa:	5ccb      	ldrb	r3, [r1, r3]
 80047fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004800:	4618      	mov	r0, r3
 8004802:	bd80      	pop	{r7, pc}
 8004804:	40021000 	.word	0x40021000
 8004808:	080053a4 	.word	0x080053a4

0800480c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800480c:	b480      	push	{r7}
 800480e:	b085      	sub	sp, #20
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004814:	4b0a      	ldr	r3, [pc, #40]	@ (8004840 <RCC_Delay+0x34>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a0a      	ldr	r2, [pc, #40]	@ (8004844 <RCC_Delay+0x38>)
 800481a:	fba2 2303 	umull	r2, r3, r2, r3
 800481e:	0a5b      	lsrs	r3, r3, #9
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	fb02 f303 	mul.w	r3, r2, r3
 8004826:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004828:	bf00      	nop
  }
  while (Delay --);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	1e5a      	subs	r2, r3, #1
 800482e:	60fa      	str	r2, [r7, #12]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d1f9      	bne.n	8004828 <RCC_Delay+0x1c>
}
 8004834:	bf00      	nop
 8004836:	bf00      	nop
 8004838:	3714      	adds	r7, #20
 800483a:	46bd      	mov	sp, r7
 800483c:	bc80      	pop	{r7}
 800483e:	4770      	bx	lr
 8004840:	20000000 	.word	0x20000000
 8004844:	10624dd3 	.word	0x10624dd3

08004848 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b086      	sub	sp, #24
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004850:	2300      	movs	r3, #0
 8004852:	613b      	str	r3, [r7, #16]
 8004854:	2300      	movs	r3, #0
 8004856:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0301 	and.w	r3, r3, #1
 8004860:	2b00      	cmp	r3, #0
 8004862:	d07d      	beq.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004864:	2300      	movs	r3, #0
 8004866:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004868:	4b4f      	ldr	r3, [pc, #316]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800486a:	69db      	ldr	r3, [r3, #28]
 800486c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004870:	2b00      	cmp	r3, #0
 8004872:	d10d      	bne.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004874:	4b4c      	ldr	r3, [pc, #304]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004876:	69db      	ldr	r3, [r3, #28]
 8004878:	4a4b      	ldr	r2, [pc, #300]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800487a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800487e:	61d3      	str	r3, [r2, #28]
 8004880:	4b49      	ldr	r3, [pc, #292]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004882:	69db      	ldr	r3, [r3, #28]
 8004884:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004888:	60bb      	str	r3, [r7, #8]
 800488a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800488c:	2301      	movs	r3, #1
 800488e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004890:	4b46      	ldr	r3, [pc, #280]	@ (80049ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004898:	2b00      	cmp	r3, #0
 800489a:	d118      	bne.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800489c:	4b43      	ldr	r3, [pc, #268]	@ (80049ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a42      	ldr	r2, [pc, #264]	@ (80049ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80048a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048a8:	f7fc fd1e 	bl	80012e8 <HAL_GetTick>
 80048ac:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048ae:	e008      	b.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048b0:	f7fc fd1a 	bl	80012e8 <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	2b64      	cmp	r3, #100	@ 0x64
 80048bc:	d901      	bls.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e06d      	b.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048c2:	4b3a      	ldr	r3, [pc, #232]	@ (80049ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d0f0      	beq.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80048ce:	4b36      	ldr	r3, [pc, #216]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048d0:	6a1b      	ldr	r3, [r3, #32]
 80048d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048d6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d02e      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048e6:	68fa      	ldr	r2, [r7, #12]
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d027      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80048ec:	4b2e      	ldr	r3, [pc, #184]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048ee:	6a1b      	ldr	r3, [r3, #32]
 80048f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048f4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80048f6:	4b2e      	ldr	r3, [pc, #184]	@ (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80048f8:	2201      	movs	r2, #1
 80048fa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80048fc:	4b2c      	ldr	r3, [pc, #176]	@ (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80048fe:	2200      	movs	r2, #0
 8004900:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004902:	4a29      	ldr	r2, [pc, #164]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f003 0301 	and.w	r3, r3, #1
 800490e:	2b00      	cmp	r3, #0
 8004910:	d014      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004912:	f7fc fce9 	bl	80012e8 <HAL_GetTick>
 8004916:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004918:	e00a      	b.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800491a:	f7fc fce5 	bl	80012e8 <HAL_GetTick>
 800491e:	4602      	mov	r2, r0
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	1ad3      	subs	r3, r2, r3
 8004924:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004928:	4293      	cmp	r3, r2
 800492a:	d901      	bls.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800492c:	2303      	movs	r3, #3
 800492e:	e036      	b.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004930:	4b1d      	ldr	r3, [pc, #116]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004932:	6a1b      	ldr	r3, [r3, #32]
 8004934:	f003 0302 	and.w	r3, r3, #2
 8004938:	2b00      	cmp	r3, #0
 800493a:	d0ee      	beq.n	800491a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800493c:	4b1a      	ldr	r3, [pc, #104]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800493e:	6a1b      	ldr	r3, [r3, #32]
 8004940:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	4917      	ldr	r1, [pc, #92]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800494a:	4313      	orrs	r3, r2
 800494c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800494e:	7dfb      	ldrb	r3, [r7, #23]
 8004950:	2b01      	cmp	r3, #1
 8004952:	d105      	bne.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004954:	4b14      	ldr	r3, [pc, #80]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004956:	69db      	ldr	r3, [r3, #28]
 8004958:	4a13      	ldr	r2, [pc, #76]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800495a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800495e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 0302 	and.w	r3, r3, #2
 8004968:	2b00      	cmp	r3, #0
 800496a:	d008      	beq.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800496c:	4b0e      	ldr	r3, [pc, #56]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	490b      	ldr	r1, [pc, #44]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800497a:	4313      	orrs	r3, r2
 800497c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 0310 	and.w	r3, r3, #16
 8004986:	2b00      	cmp	r3, #0
 8004988:	d008      	beq.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800498a:	4b07      	ldr	r3, [pc, #28]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	4904      	ldr	r1, [pc, #16]	@ (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004998:	4313      	orrs	r3, r2
 800499a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800499c:	2300      	movs	r3, #0
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3718      	adds	r7, #24
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	40021000 	.word	0x40021000
 80049ac:	40007000 	.word	0x40007000
 80049b0:	42420440 	.word	0x42420440

080049b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b082      	sub	sp, #8
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d101      	bne.n	80049c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e04c      	b.n	8004a60 <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d111      	bne.n	80049f6 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f000 fbd0 	bl	8005180 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d102      	bne.n	80049ee <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	4a1f      	ldr	r2, [pc, #124]	@ (8004a68 <HAL_TIM_Base_Init+0xb4>)
 80049ec:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2202      	movs	r2, #2
 80049fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	3304      	adds	r3, #4
 8004a06:	4619      	mov	r1, r3
 8004a08:	4610      	mov	r0, r2
 8004a0a:	f000 fac1 	bl	8004f90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2201      	movs	r2, #1
 8004a12:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2201      	movs	r2, #1
 8004a1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2201      	movs	r2, #1
 8004a22:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2201      	movs	r2, #1
 8004a2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2201      	movs	r2, #1
 8004a32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2201      	movs	r2, #1
 8004a3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2201      	movs	r2, #1
 8004a42:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2201      	movs	r2, #1
 8004a4a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2201      	movs	r2, #1
 8004a52:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2201      	movs	r2, #1
 8004a5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a5e:	2300      	movs	r3, #0
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3708      	adds	r7, #8
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	08000fb9 	.word	0x08000fb9

08004a6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b085      	sub	sp, #20
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d001      	beq.n	8004a84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	e03a      	b.n	8004afa <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2202      	movs	r2, #2
 8004a88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68da      	ldr	r2, [r3, #12]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f042 0201 	orr.w	r2, r2, #1
 8004a9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a18      	ldr	r2, [pc, #96]	@ (8004b04 <HAL_TIM_Base_Start_IT+0x98>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d00e      	beq.n	8004ac4 <HAL_TIM_Base_Start_IT+0x58>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004aae:	d009      	beq.n	8004ac4 <HAL_TIM_Base_Start_IT+0x58>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a14      	ldr	r2, [pc, #80]	@ (8004b08 <HAL_TIM_Base_Start_IT+0x9c>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d004      	beq.n	8004ac4 <HAL_TIM_Base_Start_IT+0x58>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a13      	ldr	r2, [pc, #76]	@ (8004b0c <HAL_TIM_Base_Start_IT+0xa0>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d111      	bne.n	8004ae8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	f003 0307 	and.w	r3, r3, #7
 8004ace:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2b06      	cmp	r3, #6
 8004ad4:	d010      	beq.n	8004af8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f042 0201 	orr.w	r2, r2, #1
 8004ae4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ae6:	e007      	b.n	8004af8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f042 0201 	orr.w	r2, r2, #1
 8004af6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004af8:	2300      	movs	r3, #0
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3714      	adds	r7, #20
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bc80      	pop	{r7}
 8004b02:	4770      	bx	lr
 8004b04:	40012c00 	.word	0x40012c00
 8004b08:	40000400 	.word	0x40000400
 8004b0c:	40000800 	.word	0x40000800

08004b10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	691b      	ldr	r3, [r3, #16]
 8004b1e:	f003 0302 	and.w	r3, r3, #2
 8004b22:	2b02      	cmp	r3, #2
 8004b24:	d128      	bne.n	8004b78 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	f003 0302 	and.w	r3, r3, #2
 8004b30:	2b02      	cmp	r3, #2
 8004b32:	d121      	bne.n	8004b78 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f06f 0202 	mvn.w	r2, #2
 8004b3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2201      	movs	r2, #1
 8004b42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	699b      	ldr	r3, [r3, #24]
 8004b4a:	f003 0303 	and.w	r3, r3, #3
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d005      	beq.n	8004b5e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	4798      	blx	r3
 8004b5c:	e009      	b.n	8004b72 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	f003 0304 	and.w	r3, r3, #4
 8004b82:	2b04      	cmp	r3, #4
 8004b84:	d128      	bne.n	8004bd8 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	f003 0304 	and.w	r3, r3, #4
 8004b90:	2b04      	cmp	r3, #4
 8004b92:	d121      	bne.n	8004bd8 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f06f 0204 	mvn.w	r2, #4
 8004b9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2202      	movs	r2, #2
 8004ba2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	699b      	ldr	r3, [r3, #24]
 8004baa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d005      	beq.n	8004bbe <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	4798      	blx	r3
 8004bbc:	e009      	b.n	8004bd2 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	f003 0308 	and.w	r3, r3, #8
 8004be2:	2b08      	cmp	r3, #8
 8004be4:	d128      	bne.n	8004c38 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	68db      	ldr	r3, [r3, #12]
 8004bec:	f003 0308 	and.w	r3, r3, #8
 8004bf0:	2b08      	cmp	r3, #8
 8004bf2:	d121      	bne.n	8004c38 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f06f 0208 	mvn.w	r2, #8
 8004bfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2204      	movs	r2, #4
 8004c02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	69db      	ldr	r3, [r3, #28]
 8004c0a:	f003 0303 	and.w	r3, r3, #3
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d005      	beq.n	8004c1e <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	4798      	blx	r3
 8004c1c:	e009      	b.n	8004c32 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	f003 0310 	and.w	r3, r3, #16
 8004c42:	2b10      	cmp	r3, #16
 8004c44:	d128      	bne.n	8004c98 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	f003 0310 	and.w	r3, r3, #16
 8004c50:	2b10      	cmp	r3, #16
 8004c52:	d121      	bne.n	8004c98 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f06f 0210 	mvn.w	r2, #16
 8004c5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2208      	movs	r2, #8
 8004c62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	69db      	ldr	r3, [r3, #28]
 8004c6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d005      	beq.n	8004c7e <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	4798      	blx	r3
 8004c7c:	e009      	b.n	8004c92 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	691b      	ldr	r3, [r3, #16]
 8004c9e:	f003 0301 	and.w	r3, r3, #1
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d110      	bne.n	8004cc8 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	f003 0301 	and.w	r3, r3, #1
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d109      	bne.n	8004cc8 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f06f 0201 	mvn.w	r2, #1
 8004cbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	691b      	ldr	r3, [r3, #16]
 8004cce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cd2:	2b80      	cmp	r3, #128	@ 0x80
 8004cd4:	d110      	bne.n	8004cf8 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ce0:	2b80      	cmp	r3, #128	@ 0x80
 8004ce2:	d109      	bne.n	8004cf8 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004cec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d02:	2b40      	cmp	r3, #64	@ 0x40
 8004d04:	d110      	bne.n	8004d28 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d10:	2b40      	cmp	r3, #64	@ 0x40
 8004d12:	d109      	bne.n	8004d28 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004d1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	f003 0320 	and.w	r3, r3, #32
 8004d32:	2b20      	cmp	r3, #32
 8004d34:	d110      	bne.n	8004d58 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	f003 0320 	and.w	r3, r3, #32
 8004d40:	2b20      	cmp	r3, #32
 8004d42:	d109      	bne.n	8004d58 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f06f 0220 	mvn.w	r2, #32
 8004d4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d58:	bf00      	nop
 8004d5a:	3708      	adds	r7, #8
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}

08004d60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b084      	sub	sp, #16
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d101      	bne.n	8004d7c <HAL_TIM_ConfigClockSource+0x1c>
 8004d78:	2302      	movs	r3, #2
 8004d7a:	e0b4      	b.n	8004ee6 <HAL_TIM_ConfigClockSource+0x186>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2202      	movs	r2, #2
 8004d88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004d9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004da2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	68ba      	ldr	r2, [r7, #8]
 8004daa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004db4:	d03e      	beq.n	8004e34 <HAL_TIM_ConfigClockSource+0xd4>
 8004db6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004dba:	f200 8087 	bhi.w	8004ecc <HAL_TIM_ConfigClockSource+0x16c>
 8004dbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dc2:	f000 8086 	beq.w	8004ed2 <HAL_TIM_ConfigClockSource+0x172>
 8004dc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dca:	d87f      	bhi.n	8004ecc <HAL_TIM_ConfigClockSource+0x16c>
 8004dcc:	2b70      	cmp	r3, #112	@ 0x70
 8004dce:	d01a      	beq.n	8004e06 <HAL_TIM_ConfigClockSource+0xa6>
 8004dd0:	2b70      	cmp	r3, #112	@ 0x70
 8004dd2:	d87b      	bhi.n	8004ecc <HAL_TIM_ConfigClockSource+0x16c>
 8004dd4:	2b60      	cmp	r3, #96	@ 0x60
 8004dd6:	d050      	beq.n	8004e7a <HAL_TIM_ConfigClockSource+0x11a>
 8004dd8:	2b60      	cmp	r3, #96	@ 0x60
 8004dda:	d877      	bhi.n	8004ecc <HAL_TIM_ConfigClockSource+0x16c>
 8004ddc:	2b50      	cmp	r3, #80	@ 0x50
 8004dde:	d03c      	beq.n	8004e5a <HAL_TIM_ConfigClockSource+0xfa>
 8004de0:	2b50      	cmp	r3, #80	@ 0x50
 8004de2:	d873      	bhi.n	8004ecc <HAL_TIM_ConfigClockSource+0x16c>
 8004de4:	2b40      	cmp	r3, #64	@ 0x40
 8004de6:	d058      	beq.n	8004e9a <HAL_TIM_ConfigClockSource+0x13a>
 8004de8:	2b40      	cmp	r3, #64	@ 0x40
 8004dea:	d86f      	bhi.n	8004ecc <HAL_TIM_ConfigClockSource+0x16c>
 8004dec:	2b30      	cmp	r3, #48	@ 0x30
 8004dee:	d064      	beq.n	8004eba <HAL_TIM_ConfigClockSource+0x15a>
 8004df0:	2b30      	cmp	r3, #48	@ 0x30
 8004df2:	d86b      	bhi.n	8004ecc <HAL_TIM_ConfigClockSource+0x16c>
 8004df4:	2b20      	cmp	r3, #32
 8004df6:	d060      	beq.n	8004eba <HAL_TIM_ConfigClockSource+0x15a>
 8004df8:	2b20      	cmp	r3, #32
 8004dfa:	d867      	bhi.n	8004ecc <HAL_TIM_ConfigClockSource+0x16c>
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d05c      	beq.n	8004eba <HAL_TIM_ConfigClockSource+0x15a>
 8004e00:	2b10      	cmp	r3, #16
 8004e02:	d05a      	beq.n	8004eba <HAL_TIM_ConfigClockSource+0x15a>
 8004e04:	e062      	b.n	8004ecc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e16:	f000 f994 	bl	8005142 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004e28:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	68ba      	ldr	r2, [r7, #8]
 8004e30:	609a      	str	r2, [r3, #8]
      break;
 8004e32:	e04f      	b.n	8004ed4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e44:	f000 f97d 	bl	8005142 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	689a      	ldr	r2, [r3, #8]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004e56:	609a      	str	r2, [r3, #8]
      break;
 8004e58:	e03c      	b.n	8004ed4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e66:	461a      	mov	r2, r3
 8004e68:	f000 f8f4 	bl	8005054 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	2150      	movs	r1, #80	@ 0x50
 8004e72:	4618      	mov	r0, r3
 8004e74:	f000 f94b 	bl	800510e <TIM_ITRx_SetConfig>
      break;
 8004e78:	e02c      	b.n	8004ed4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e86:	461a      	mov	r2, r3
 8004e88:	f000 f912 	bl	80050b0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	2160      	movs	r1, #96	@ 0x60
 8004e92:	4618      	mov	r0, r3
 8004e94:	f000 f93b 	bl	800510e <TIM_ITRx_SetConfig>
      break;
 8004e98:	e01c      	b.n	8004ed4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	f000 f8d4 	bl	8005054 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	2140      	movs	r1, #64	@ 0x40
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f000 f92b 	bl	800510e <TIM_ITRx_SetConfig>
      break;
 8004eb8:	e00c      	b.n	8004ed4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4619      	mov	r1, r3
 8004ec4:	4610      	mov	r0, r2
 8004ec6:	f000 f922 	bl	800510e <TIM_ITRx_SetConfig>
      break;
 8004eca:	e003      	b.n	8004ed4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	73fb      	strb	r3, [r7, #15]
      break;
 8004ed0:	e000      	b.n	8004ed4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004ed2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3710      	adds	r7, #16
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}

08004eee <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004eee:	b480      	push	{r7}
 8004ef0:	b083      	sub	sp, #12
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8004ef6:	bf00      	nop
 8004ef8:	370c      	adds	r7, #12
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bc80      	pop	{r7}
 8004efe:	4770      	bx	lr

08004f00 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b083      	sub	sp, #12
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f08:	bf00      	nop
 8004f0a:	370c      	adds	r7, #12
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bc80      	pop	{r7}
 8004f10:	4770      	bx	lr

08004f12 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f12:	b480      	push	{r7}
 8004f14:	b083      	sub	sp, #12
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f1a:	bf00      	nop
 8004f1c:	370c      	adds	r7, #12
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bc80      	pop	{r7}
 8004f22:	4770      	bx	lr

08004f24 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8004f2c:	bf00      	nop
 8004f2e:	370c      	adds	r7, #12
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bc80      	pop	{r7}
 8004f34:	4770      	bx	lr

08004f36 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f36:	b480      	push	{r7}
 8004f38:	b083      	sub	sp, #12
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f3e:	bf00      	nop
 8004f40:	370c      	adds	r7, #12
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bc80      	pop	{r7}
 8004f46:	4770      	bx	lr

08004f48 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b083      	sub	sp, #12
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004f50:	bf00      	nop
 8004f52:	370c      	adds	r7, #12
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bc80      	pop	{r7}
 8004f58:	4770      	bx	lr

08004f5a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f5a:	b480      	push	{r7}
 8004f5c:	b083      	sub	sp, #12
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f62:	bf00      	nop
 8004f64:	370c      	adds	r7, #12
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bc80      	pop	{r7}
 8004f6a:	4770      	bx	lr

08004f6c <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8004f74:	bf00      	nop
 8004f76:	370c      	adds	r7, #12
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bc80      	pop	{r7}
 8004f7c:	4770      	bx	lr

08004f7e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004f7e:	b480      	push	{r7}
 8004f80:	b083      	sub	sp, #12
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004f86:	bf00      	nop
 8004f88:	370c      	adds	r7, #12
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bc80      	pop	{r7}
 8004f8e:	4770      	bx	lr

08004f90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b085      	sub	sp, #20
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	4a29      	ldr	r2, [pc, #164]	@ (8005048 <TIM_Base_SetConfig+0xb8>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d00b      	beq.n	8004fc0 <TIM_Base_SetConfig+0x30>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fae:	d007      	beq.n	8004fc0 <TIM_Base_SetConfig+0x30>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	4a26      	ldr	r2, [pc, #152]	@ (800504c <TIM_Base_SetConfig+0xbc>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d003      	beq.n	8004fc0 <TIM_Base_SetConfig+0x30>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4a25      	ldr	r2, [pc, #148]	@ (8005050 <TIM_Base_SetConfig+0xc0>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d108      	bne.n	8004fd2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	68fa      	ldr	r2, [r7, #12]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4a1c      	ldr	r2, [pc, #112]	@ (8005048 <TIM_Base_SetConfig+0xb8>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d00b      	beq.n	8004ff2 <TIM_Base_SetConfig+0x62>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fe0:	d007      	beq.n	8004ff2 <TIM_Base_SetConfig+0x62>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4a19      	ldr	r2, [pc, #100]	@ (800504c <TIM_Base_SetConfig+0xbc>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d003      	beq.n	8004ff2 <TIM_Base_SetConfig+0x62>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4a18      	ldr	r2, [pc, #96]	@ (8005050 <TIM_Base_SetConfig+0xc0>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d108      	bne.n	8005004 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ff8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	68fa      	ldr	r2, [r7, #12]
 8005000:	4313      	orrs	r3, r2
 8005002:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	695b      	ldr	r3, [r3, #20]
 800500e:	4313      	orrs	r3, r2
 8005010:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	68fa      	ldr	r2, [r7, #12]
 8005016:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	689a      	ldr	r2, [r3, #8]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	4a07      	ldr	r2, [pc, #28]	@ (8005048 <TIM_Base_SetConfig+0xb8>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d103      	bne.n	8005038 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	691a      	ldr	r2, [r3, #16]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	615a      	str	r2, [r3, #20]
}
 800503e:	bf00      	nop
 8005040:	3714      	adds	r7, #20
 8005042:	46bd      	mov	sp, r7
 8005044:	bc80      	pop	{r7}
 8005046:	4770      	bx	lr
 8005048:	40012c00 	.word	0x40012c00
 800504c:	40000400 	.word	0x40000400
 8005050:	40000800 	.word	0x40000800

08005054 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005054:	b480      	push	{r7}
 8005056:	b087      	sub	sp, #28
 8005058:	af00      	add	r7, sp, #0
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	60b9      	str	r1, [r7, #8]
 800505e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	6a1b      	ldr	r3, [r3, #32]
 8005064:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	6a1b      	ldr	r3, [r3, #32]
 800506a:	f023 0201 	bic.w	r2, r3, #1
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	699b      	ldr	r3, [r3, #24]
 8005076:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800507e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	011b      	lsls	r3, r3, #4
 8005084:	693a      	ldr	r2, [r7, #16]
 8005086:	4313      	orrs	r3, r2
 8005088:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	f023 030a 	bic.w	r3, r3, #10
 8005090:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005092:	697a      	ldr	r2, [r7, #20]
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	4313      	orrs	r3, r2
 8005098:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	693a      	ldr	r2, [r7, #16]
 800509e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	697a      	ldr	r2, [r7, #20]
 80050a4:	621a      	str	r2, [r3, #32]
}
 80050a6:	bf00      	nop
 80050a8:	371c      	adds	r7, #28
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bc80      	pop	{r7}
 80050ae:	4770      	bx	lr

080050b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b087      	sub	sp, #28
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	60b9      	str	r1, [r7, #8]
 80050ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	6a1b      	ldr	r3, [r3, #32]
 80050c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	6a1b      	ldr	r3, [r3, #32]
 80050c6:	f023 0210 	bic.w	r2, r3, #16
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	699b      	ldr	r3, [r3, #24]
 80050d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80050da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	031b      	lsls	r3, r3, #12
 80050e0:	693a      	ldr	r2, [r7, #16]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80050ec:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	011b      	lsls	r3, r3, #4
 80050f2:	697a      	ldr	r2, [r7, #20]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	693a      	ldr	r2, [r7, #16]
 80050fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	697a      	ldr	r2, [r7, #20]
 8005102:	621a      	str	r2, [r3, #32]
}
 8005104:	bf00      	nop
 8005106:	371c      	adds	r7, #28
 8005108:	46bd      	mov	sp, r7
 800510a:	bc80      	pop	{r7}
 800510c:	4770      	bx	lr

0800510e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800510e:	b480      	push	{r7}
 8005110:	b085      	sub	sp, #20
 8005112:	af00      	add	r7, sp, #0
 8005114:	6078      	str	r0, [r7, #4]
 8005116:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005124:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005126:	683a      	ldr	r2, [r7, #0]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	4313      	orrs	r3, r2
 800512c:	f043 0307 	orr.w	r3, r3, #7
 8005130:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	68fa      	ldr	r2, [r7, #12]
 8005136:	609a      	str	r2, [r3, #8]
}
 8005138:	bf00      	nop
 800513a:	3714      	adds	r7, #20
 800513c:	46bd      	mov	sp, r7
 800513e:	bc80      	pop	{r7}
 8005140:	4770      	bx	lr

08005142 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005142:	b480      	push	{r7}
 8005144:	b087      	sub	sp, #28
 8005146:	af00      	add	r7, sp, #0
 8005148:	60f8      	str	r0, [r7, #12]
 800514a:	60b9      	str	r1, [r7, #8]
 800514c:	607a      	str	r2, [r7, #4]
 800514e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800515c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	021a      	lsls	r2, r3, #8
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	431a      	orrs	r2, r3
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	4313      	orrs	r3, r2
 800516a:	697a      	ldr	r2, [r7, #20]
 800516c:	4313      	orrs	r3, r2
 800516e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	697a      	ldr	r2, [r7, #20]
 8005174:	609a      	str	r2, [r3, #8]
}
 8005176:	bf00      	nop
 8005178:	371c      	adds	r7, #28
 800517a:	46bd      	mov	sp, r7
 800517c:	bc80      	pop	{r7}
 800517e:	4770      	bx	lr

08005180 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8005180:	b480      	push	{r7}
 8005182:	b083      	sub	sp, #12
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	4a1c      	ldr	r2, [pc, #112]	@ (80051fc <TIM_ResetCallback+0x7c>)
 800518c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	4a1b      	ldr	r2, [pc, #108]	@ (8005200 <TIM_ResetCallback+0x80>)
 8005194:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	4a1a      	ldr	r2, [pc, #104]	@ (8005204 <TIM_ResetCallback+0x84>)
 800519c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	4a19      	ldr	r2, [pc, #100]	@ (8005208 <TIM_ResetCallback+0x88>)
 80051a4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	4a18      	ldr	r2, [pc, #96]	@ (800520c <TIM_ResetCallback+0x8c>)
 80051ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	4a17      	ldr	r2, [pc, #92]	@ (8005210 <TIM_ResetCallback+0x90>)
 80051b4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	4a16      	ldr	r2, [pc, #88]	@ (8005214 <TIM_ResetCallback+0x94>)
 80051bc:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	4a15      	ldr	r2, [pc, #84]	@ (8005218 <TIM_ResetCallback+0x98>)
 80051c4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	4a14      	ldr	r2, [pc, #80]	@ (800521c <TIM_ResetCallback+0x9c>)
 80051cc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	4a13      	ldr	r2, [pc, #76]	@ (8005220 <TIM_ResetCallback+0xa0>)
 80051d4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	4a12      	ldr	r2, [pc, #72]	@ (8005224 <TIM_ResetCallback+0xa4>)
 80051dc:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	4a11      	ldr	r2, [pc, #68]	@ (8005228 <TIM_ResetCallback+0xa8>)
 80051e4:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4a10      	ldr	r2, [pc, #64]	@ (800522c <TIM_ResetCallback+0xac>)
 80051ec:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 80051f0:	bf00      	nop
 80051f2:	370c      	adds	r7, #12
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bc80      	pop	{r7}
 80051f8:	4770      	bx	lr
 80051fa:	bf00      	nop
 80051fc:	08000355 	.word	0x08000355
 8005200:	08004eef 	.word	0x08004eef
 8005204:	08004f5b 	.word	0x08004f5b
 8005208:	08004f6d 	.word	0x08004f6d
 800520c:	08004f13 	.word	0x08004f13
 8005210:	08004f25 	.word	0x08004f25
 8005214:	08004f01 	.word	0x08004f01
 8005218:	08004f37 	.word	0x08004f37
 800521c:	08004f49 	.word	0x08004f49
 8005220:	08004f7f 	.word	0x08004f7f
 8005224:	080052ed 	.word	0x080052ed
 8005228:	080052ff 	.word	0x080052ff
 800522c:	08005311 	.word	0x08005311

08005230 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005230:	b480      	push	{r7}
 8005232:	b085      	sub	sp, #20
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005240:	2b01      	cmp	r3, #1
 8005242:	d101      	bne.n	8005248 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005244:	2302      	movs	r3, #2
 8005246:	e046      	b.n	80052d6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2202      	movs	r2, #2
 8005254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800526e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	68fa      	ldr	r2, [r7, #12]
 8005276:	4313      	orrs	r3, r2
 8005278:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	68fa      	ldr	r2, [r7, #12]
 8005280:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a16      	ldr	r2, [pc, #88]	@ (80052e0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d00e      	beq.n	80052aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005294:	d009      	beq.n	80052aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a12      	ldr	r2, [pc, #72]	@ (80052e4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d004      	beq.n	80052aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a10      	ldr	r2, [pc, #64]	@ (80052e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d10c      	bne.n	80052c4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80052b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	68ba      	ldr	r2, [r7, #8]
 80052b8:	4313      	orrs	r3, r2
 80052ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	68ba      	ldr	r2, [r7, #8]
 80052c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2200      	movs	r2, #0
 80052d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80052d4:	2300      	movs	r3, #0
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3714      	adds	r7, #20
 80052da:	46bd      	mov	sp, r7
 80052dc:	bc80      	pop	{r7}
 80052de:	4770      	bx	lr
 80052e0:	40012c00 	.word	0x40012c00
 80052e4:	40000400 	.word	0x40000400
 80052e8:	40000800 	.word	0x40000800

080052ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052f4:	bf00      	nop
 80052f6:	370c      	adds	r7, #12
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bc80      	pop	{r7}
 80052fc:	4770      	bx	lr

080052fe <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80052fe:	b480      	push	{r7}
 8005300:	b083      	sub	sp, #12
 8005302:	af00      	add	r7, sp, #0
 8005304:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8005306:	bf00      	nop
 8005308:	370c      	adds	r7, #12
 800530a:	46bd      	mov	sp, r7
 800530c:	bc80      	pop	{r7}
 800530e:	4770      	bx	lr

08005310 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005310:	b480      	push	{r7}
 8005312:	b083      	sub	sp, #12
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005318:	bf00      	nop
 800531a:	370c      	adds	r7, #12
 800531c:	46bd      	mov	sp, r7
 800531e:	bc80      	pop	{r7}
 8005320:	4770      	bx	lr

08005322 <memset>:
 8005322:	4603      	mov	r3, r0
 8005324:	4402      	add	r2, r0
 8005326:	4293      	cmp	r3, r2
 8005328:	d100      	bne.n	800532c <memset+0xa>
 800532a:	4770      	bx	lr
 800532c:	f803 1b01 	strb.w	r1, [r3], #1
 8005330:	e7f9      	b.n	8005326 <memset+0x4>
	...

08005334 <__libc_init_array>:
 8005334:	b570      	push	{r4, r5, r6, lr}
 8005336:	2600      	movs	r6, #0
 8005338:	4d0c      	ldr	r5, [pc, #48]	@ (800536c <__libc_init_array+0x38>)
 800533a:	4c0d      	ldr	r4, [pc, #52]	@ (8005370 <__libc_init_array+0x3c>)
 800533c:	1b64      	subs	r4, r4, r5
 800533e:	10a4      	asrs	r4, r4, #2
 8005340:	42a6      	cmp	r6, r4
 8005342:	d109      	bne.n	8005358 <__libc_init_array+0x24>
 8005344:	f000 f81a 	bl	800537c <_init>
 8005348:	2600      	movs	r6, #0
 800534a:	4d0a      	ldr	r5, [pc, #40]	@ (8005374 <__libc_init_array+0x40>)
 800534c:	4c0a      	ldr	r4, [pc, #40]	@ (8005378 <__libc_init_array+0x44>)
 800534e:	1b64      	subs	r4, r4, r5
 8005350:	10a4      	asrs	r4, r4, #2
 8005352:	42a6      	cmp	r6, r4
 8005354:	d105      	bne.n	8005362 <__libc_init_array+0x2e>
 8005356:	bd70      	pop	{r4, r5, r6, pc}
 8005358:	f855 3b04 	ldr.w	r3, [r5], #4
 800535c:	4798      	blx	r3
 800535e:	3601      	adds	r6, #1
 8005360:	e7ee      	b.n	8005340 <__libc_init_array+0xc>
 8005362:	f855 3b04 	ldr.w	r3, [r5], #4
 8005366:	4798      	blx	r3
 8005368:	3601      	adds	r6, #1
 800536a:	e7f2      	b.n	8005352 <__libc_init_array+0x1e>
 800536c:	080053c0 	.word	0x080053c0
 8005370:	080053c0 	.word	0x080053c0
 8005374:	080053c0 	.word	0x080053c0
 8005378:	080053c4 	.word	0x080053c4

0800537c <_init>:
 800537c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800537e:	bf00      	nop
 8005380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005382:	bc08      	pop	{r3}
 8005384:	469e      	mov	lr, r3
 8005386:	4770      	bx	lr

08005388 <_fini>:
 8005388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800538a:	bf00      	nop
 800538c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800538e:	bc08      	pop	{r3}
 8005390:	469e      	mov	lr, r3
 8005392:	4770      	bx	lr
