
TER_PEDAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044ac  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080045b8  080045b8  000055b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045dc  080045dc  0000600c  2**0
                  CONTENTS
  4 .ARM          00000000  080045dc  080045dc  0000600c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080045dc  080045dc  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045dc  080045dc  000055dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080045e0  080045e0  000055e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080045e4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005c0  20000010  080045f0  00006010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200005d0  080045f0  000065d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013391  00000000  00000000  00006035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003407  00000000  00000000  000193c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001938  00000000  00000000  0001c7d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000132a  00000000  00000000  0001e108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a2d1  00000000  00000000  0001f432  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015e7f  00000000  00000000  00039703  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093465  00000000  00000000  0004f582  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e29e7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006aa4  00000000  00000000  000e2a2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000e94d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	080045a0 	.word	0x080045a0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	080045a0 	.word	0x080045a0

0800014c <initCAN>:
uint8_t msgIndex = 0; //Hasta 255 mensajes
/* -------------------------------------------------------------------------- */

struct TeR_t TeR;

uint8_t initCAN(CAN_HandleTypeDef *hcan, TIM_HandleTypeDef *htim) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	6039      	str	r1, [r7, #0]
	//Inicializacion del periferico CAN
	can = hcan;
 8000156:	4a0d      	ldr	r2, [pc, #52]	@ (800018c <initCAN+0x40>)
 8000158:	687b      	ldr	r3, [r7, #4]
 800015a:	6013      	str	r3, [r2, #0]
	tim = htim;
 800015c:	4a0c      	ldr	r2, [pc, #48]	@ (8000190 <initCAN+0x44>)
 800015e:	683b      	ldr	r3, [r7, #0]
 8000160:	6013      	str	r3, [r2, #0]
	//Arranque del periferico y la interrupcion
	HAL_CAN_Start(can); //Activamos el can
 8000162:	4b0a      	ldr	r3, [pc, #40]	@ (800018c <initCAN+0x40>)
 8000164:	681b      	ldr	r3, [r3, #0]
 8000166:	4618      	mov	r0, r3
 8000168:	f001 ff0b 	bl	8001f82 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(can, CAN_IT_RX_FIFO0_MSG_PENDING); //Activamos notificación de mensaje pendiente a lectura
 800016c:	4b07      	ldr	r3, [pc, #28]	@ (800018c <initCAN+0x40>)
 800016e:	681b      	ldr	r3, [r3, #0]
 8000170:	2102      	movs	r1, #2
 8000172:	4618      	mov	r0, r3
 8000174:	f002 f96d 	bl	8002452 <HAL_CAN_ActivateNotification>
	HAL_TIM_Base_Start_IT(tim); //Arranca el envio temporizado
 8000178:	4b05      	ldr	r3, [pc, #20]	@ (8000190 <initCAN+0x44>)
 800017a:	681b      	ldr	r3, [r3, #0]
 800017c:	4618      	mov	r0, r3
 800017e:	f003 fe27 	bl	8003dd0 <HAL_TIM_Base_Start_IT>
	return 1;
 8000182:	2301      	movs	r3, #1
}
 8000184:	4618      	mov	r0, r3
 8000186:	3708      	adds	r7, #8
 8000188:	46bd      	mov	sp, r7
 800018a:	bd80      	pop	{r7, pc}
 800018c:	2000002c 	.word	0x2000002c
 8000190:	20000030 	.word	0x20000030

08000194 <HAL_TIM_PeriodElapsedCallback>:

//Envío temporizado
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { //Envio temporizado
 8000194:	b580      	push	{r7, lr}
 8000196:	b082      	sub	sp, #8
 8000198:	af00      	add	r7, sp, #0
 800019a:	6078      	str	r0, [r7, #4]
	if (htim == tim) { //Si es nuestro timer(Da igual si solo hay 1)
 800019c:	4b06      	ldr	r3, [pc, #24]	@ (80001b8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800019e:	681b      	ldr	r3, [r3, #0]
 80001a0:	687a      	ldr	r2, [r7, #4]
 80001a2:	429a      	cmp	r2, r3
 80001a4:	d103      	bne.n	80001ae <HAL_TIM_PeriodElapsedCallback+0x1a>
		readSensors(); //Lee los sensores
 80001a6:	f000 fe35 	bl	8000e14 <readSensors>
		sendCAN();
 80001aa:	f000 f83d 	bl	8000228 <sendCAN>
	}
}
 80001ae:	bf00      	nop
 80001b0:	3708      	adds	r7, #8
 80001b2:	46bd      	mov	sp, r7
 80001b4:	bd80      	pop	{r7, pc}
 80001b6:	bf00      	nop
 80001b8:	20000030 	.word	0x20000030

080001bc <HAL_CAN_RxFifo0MsgPendingCallback>:

//Recepción asincrona
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) { //No hay distinción de bus
 80001bc:	b580      	push	{r7, lr}
 80001be:	b082      	sub	sp, #8
 80001c0:	af00      	add	r7, sp, #0
 80001c2:	6078      	str	r0, [r7, #4]
	if (hcan == can) { //Si es nuestro can (Da igual si solo hay 1)
 80001c4:	4b0a      	ldr	r3, [pc, #40]	@ (80001f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 80001c6:	681b      	ldr	r3, [r3, #0]
 80001c8:	687a      	ldr	r2, [r7, #4]
 80001ca:	429a      	cmp	r2, r3
 80001cc:	d10c      	bne.n	80001e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>
		HAL_CAN_GetRxMessage(can, CAN_RX_FIFO0, &RxHeader, RxData); //Recoge el mensaje
 80001ce:	4b08      	ldr	r3, [pc, #32]	@ (80001f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 80001d0:	6818      	ldr	r0, [r3, #0]
 80001d2:	4b08      	ldr	r3, [pc, #32]	@ (80001f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 80001d4:	4a08      	ldr	r2, [pc, #32]	@ (80001f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 80001d6:	2100      	movs	r1, #0
 80001d8:	f002 f81a 	bl	8002210 <HAL_CAN_GetRxMessage>
		decodeMsg(RxHeader.StdId, RxData); //llama a la decodificación
 80001dc:	4b06      	ldr	r3, [pc, #24]	@ (80001f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	4904      	ldr	r1, [pc, #16]	@ (80001f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 80001e2:	4618      	mov	r0, r3
 80001e4:	f000 f80a 	bl	80001fc <decodeMsg>
	}
}
 80001e8:	bf00      	nop
 80001ea:	3708      	adds	r7, #8
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bd80      	pop	{r7, pc}
 80001f0:	2000002c 	.word	0x2000002c
 80001f4:	20000074 	.word	0x20000074
 80001f8:	20000058 	.word	0x20000058

080001fc <decodeMsg>:
/* -------------------------------------------------------------------------- */

//Función de decodificación del CAN, si quieres que la ecu disponga de una señal hay que añadirla aquí.
uint8_t decodeMsg(uint32_t canId, uint8_t *data) {
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b082      	sub	sp, #8
 8000200:	af00      	add	r7, sp, #0
 8000202:	6078      	str	r0, [r7, #4]
 8000204:	6039      	str	r1, [r7, #0]

	switch (canId) {
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	2b01      	cmp	r3, #1
 800020a:	d107      	bne.n	800021c <decodeMsg+0x20>
	//Attend the command
	case TER_COMMAND_FRAME_ID:
		command(data[0]); //Llama a la interpretación del comando
 800020c:	683b      	ldr	r3, [r7, #0]
 800020e:	781b      	ldrb	r3, [r3, #0]
 8000210:	4618      	mov	r0, r3
 8000212:	f000 f875 	bl	8000300 <command>
		break;
 8000216:	bf00      	nop
	default:
		return -1;
		break;

	}
	return 1;
 8000218:	2301      	movs	r3, #1
 800021a:	e000      	b.n	800021e <decodeMsg+0x22>
		return -1;
 800021c:	23ff      	movs	r3, #255	@ 0xff
}
 800021e:	4618      	mov	r0, r3
 8000220:	3708      	adds	r7, #8
 8000222:	46bd      	mov	sp, r7
 8000224:	bd80      	pop	{r7, pc}
	...

08000228 <sendCAN>:

//Función de envío de mensajes
uint8_t sendCAN(void) {
 8000228:	b580      	push	{r7, lr}
 800022a:	af00      	add	r7, sp, #0
	TxHeader.IDE = CAN_ID_STD;
 800022c:	4b2b      	ldr	r3, [pc, #172]	@ (80002dc <sendCAN+0xb4>)
 800022e:	2200      	movs	r2, #0
 8000230:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 8000232:	4b2a      	ldr	r3, [pc, #168]	@ (80002dc <sendCAN+0xb4>)
 8000234:	2200      	movs	r2, #0
 8000236:	60da      	str	r2, [r3, #12]
	if (HAL_CAN_GetTxMailboxesFreeLevel(can) > 0) { // Hay un slot para nuestro mensaje
 8000238:	4b29      	ldr	r3, [pc, #164]	@ (80002e0 <sendCAN+0xb8>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4618      	mov	r0, r3
 800023e:	f001 ffb3 	bl	80021a8 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000242:	4603      	mov	r3, r0
 8000244:	2b00      	cmp	r3, #0
 8000246:	d046      	beq.n	80002d6 <sendCAN+0xae>
		switch (msgIndex++) {
 8000248:	4b26      	ldr	r3, [pc, #152]	@ (80002e4 <sendCAN+0xbc>)
 800024a:	781b      	ldrb	r3, [r3, #0]
 800024c:	1c5a      	adds	r2, r3, #1
 800024e:	b2d1      	uxtb	r1, r2
 8000250:	4a24      	ldr	r2, [pc, #144]	@ (80002e4 <sendCAN+0xbc>)
 8000252:	7011      	strb	r1, [r2, #0]
 8000254:	2b02      	cmp	r3, #2
 8000256:	d01e      	beq.n	8000296 <sendCAN+0x6e>
 8000258:	2b02      	cmp	r3, #2
 800025a:	dc28      	bgt.n	80002ae <sendCAN+0x86>
 800025c:	2b00      	cmp	r3, #0
 800025e:	d002      	beq.n	8000266 <sendCAN+0x3e>
 8000260:	2b01      	cmp	r3, #1
 8000262:	d00c      	beq.n	800027e <sendCAN+0x56>
 8000264:	e023      	b.n	80002ae <sendCAN+0x86>

		case 0: //APPS
			TxHeader.StdId = TER_APPS_FRAME_ID;
 8000266:	4b1d      	ldr	r3, [pc, #116]	@ (80002dc <sendCAN+0xb4>)
 8000268:	2203      	movs	r2, #3
 800026a:	601a      	str	r2, [r3, #0]
			TxHeader.DLC = TER_APPS_LENGTH;
 800026c:	4b1b      	ldr	r3, [pc, #108]	@ (80002dc <sendCAN+0xb4>)
 800026e:	2208      	movs	r2, #8
 8000270:	611a      	str	r2, [r3, #16]
			ter_apps_pack(TxData, &TeR.apps, sizeof(TxData)); //Empaquetamos
 8000272:	2208      	movs	r2, #8
 8000274:	491c      	ldr	r1, [pc, #112]	@ (80002e8 <sendCAN+0xc0>)
 8000276:	481d      	ldr	r0, [pc, #116]	@ (80002ec <sendCAN+0xc4>)
 8000278:	f000 ffdd 	bl	8001236 <ter_apps_pack>
			break;
 800027c:	e01c      	b.n	80002b8 <sendCAN+0x90>
		case 1: //BPPS
			TxHeader.StdId = TER_BPPS_FRAME_ID;
 800027e:	4b17      	ldr	r3, [pc, #92]	@ (80002dc <sendCAN+0xb4>)
 8000280:	2204      	movs	r2, #4
 8000282:	601a      	str	r2, [r3, #0]
			TxHeader.DLC = TER_BPPS_LENGTH;
 8000284:	4b15      	ldr	r3, [pc, #84]	@ (80002dc <sendCAN+0xb4>)
 8000286:	2201      	movs	r2, #1
 8000288:	611a      	str	r2, [r3, #16]
			ter_bpps_pack(TxData, &TeR.bpps, sizeof(TxData)); //Empaquetamos
 800028a:	2208      	movs	r2, #8
 800028c:	4918      	ldr	r1, [pc, #96]	@ (80002f0 <sendCAN+0xc8>)
 800028e:	4817      	ldr	r0, [pc, #92]	@ (80002ec <sendCAN+0xc4>)
 8000290:	f001 f829 	bl	80012e6 <ter_bpps_pack>
			break;
 8000294:	e010      	b.n	80002b8 <sendCAN+0x90>

		case 2: //STEER
			TxHeader.StdId = TER_STEER_FRAME_ID;
 8000296:	4b11      	ldr	r3, [pc, #68]	@ (80002dc <sendCAN+0xb4>)
 8000298:	2205      	movs	r2, #5
 800029a:	601a      	str	r2, [r3, #0]
			TxHeader.DLC = TER_STEER_LENGTH;
 800029c:	4b0f      	ldr	r3, [pc, #60]	@ (80002dc <sendCAN+0xb4>)
 800029e:	2208      	movs	r2, #8
 80002a0:	611a      	str	r2, [r3, #16]
			ter_steer_pack(TxData, &TeR.steer, sizeof(TxData)); //Empaquetamos
 80002a2:	2208      	movs	r2, #8
 80002a4:	4913      	ldr	r1, [pc, #76]	@ (80002f4 <sendCAN+0xcc>)
 80002a6:	4811      	ldr	r0, [pc, #68]	@ (80002ec <sendCAN+0xc4>)
 80002a8:	f001 f842 	bl	8001330 <ter_steer_pack>
			break;
 80002ac:	e004      	b.n	80002b8 <sendCAN+0x90>

		default: //Esto evita tener que contar mensajes
			msgIndex = 0; //cualquier otro valor retorna al ultimo mensaje
 80002ae:	4b0d      	ldr	r3, [pc, #52]	@ (80002e4 <sendCAN+0xbc>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	701a      	strb	r2, [r3, #0]
			return 1; //Evita que se envíe un mensaje doble terminando la funcion
 80002b4:	2301      	movs	r3, #1
 80002b6:	e00f      	b.n	80002d8 <sendCAN+0xb0>
			break;
		}
		if (HAL_CAN_AddTxMessage(can, &TxHeader, TxData, &TxMailbox)
 80002b8:	4b09      	ldr	r3, [pc, #36]	@ (80002e0 <sendCAN+0xb8>)
 80002ba:	6818      	ldr	r0, [r3, #0]
 80002bc:	4b0e      	ldr	r3, [pc, #56]	@ (80002f8 <sendCAN+0xd0>)
 80002be:	4a0b      	ldr	r2, [pc, #44]	@ (80002ec <sendCAN+0xc4>)
 80002c0:	4906      	ldr	r1, [pc, #24]	@ (80002dc <sendCAN+0xb4>)
 80002c2:	f001 fea2 	bl	800200a <HAL_CAN_AddTxMessage>
 80002c6:	4603      	mov	r3, r0
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d004      	beq.n	80002d6 <sendCAN+0xae>
				!= HAL_OK) {
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1); //Indicate Error with light
 80002cc:	2201      	movs	r2, #1
 80002ce:	2108      	movs	r1, #8
 80002d0:	480a      	ldr	r0, [pc, #40]	@ (80002fc <sendCAN+0xd4>)
 80002d2:	f003 f881 	bl	80033d8 <HAL_GPIO_WritePin>
		}
	}
	return 1;
 80002d6:	2301      	movs	r3, #1
}
 80002d8:	4618      	mov	r0, r3
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	20000034 	.word	0x20000034
 80002e0:	2000002c 	.word	0x2000002c
 80002e4:	2000007c 	.word	0x2000007c
 80002e8:	20000080 	.word	0x20000080
 80002ec:	2000004c 	.word	0x2000004c
 80002f0:	20000084 	.word	0x20000084
 80002f4:	20000086 	.word	0x20000086
 80002f8:	20000054 	.word	0x20000054
 80002fc:	40010800 	.word	0x40010800

08000300 <command>:

//Implementa aqui los comandos que se han de ejecutar
uint8_t command(uint8_t cmd) {
 8000300:	b580      	push	{r7, lr}
 8000302:	b082      	sub	sp, #8
 8000304:	af00      	add	r7, sp, #0
 8000306:	4603      	mov	r3, r0
 8000308:	71fb      	strb	r3, [r7, #7]
	switch (cmd) {
 800030a:	79fb      	ldrb	r3, [r7, #7]
 800030c:	3b01      	subs	r3, #1
 800030e:	2b06      	cmp	r3, #6
 8000310:	d85a      	bhi.n	80003c8 <command+0xc8>
 8000312:	a201      	add	r2, pc, #4	@ (adr r2, 8000318 <command+0x18>)
 8000314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000318:	08000335 	.word	0x08000335
 800031c:	08000355 	.word	0x08000355
 8000320:	08000371 	.word	0x08000371
 8000324:	08000385 	.word	0x08000385
 8000328:	080003ad 	.word	0x080003ad
 800032c:	08000399 	.word	0x08000399
 8000330:	080003c1 	.word	0x080003c1
	case TER_COMMAND_CMD_CALIBRATE_APPS_MIN_CHOICE: //Calibrate ACC 0% Pos and Store
		offset.low[2] = adcReadings[2]; //Recoje el valor actual
 8000334:	4b29      	ldr	r3, [pc, #164]	@ (80003dc <command+0xdc>)
 8000336:	689b      	ldr	r3, [r3, #8]
 8000338:	4a29      	ldr	r2, [pc, #164]	@ (80003e0 <command+0xe0>)
 800033a:	6093      	str	r3, [r2, #8]
		offset.low[1] = adcReadings[1];
 800033c:	4b27      	ldr	r3, [pc, #156]	@ (80003dc <command+0xdc>)
 800033e:	685b      	ldr	r3, [r3, #4]
 8000340:	4a27      	ldr	r2, [pc, #156]	@ (80003e0 <command+0xe0>)
 8000342:	6053      	str	r3, [r2, #4]
		ee_writeToRam(0, sizeof(offset), (uint8_t*) &offset); //Almacena
 8000344:	4a26      	ldr	r2, [pc, #152]	@ (80003e0 <command+0xe0>)
 8000346:	2124      	movs	r1, #36	@ 0x24
 8000348:	2000      	movs	r0, #0
 800034a:	f000 fc03 	bl	8000b54 <ee_writeToRam>
		ee_commit();
 800034e:	f000 fc23 	bl	8000b98 <ee_commit>
		break;
 8000352:	e03b      	b.n	80003cc <command+0xcc>

	case TER_COMMAND_CMD_CALIBRATE_APPS_MAX_CHOICE: //Calibrate ACC 100% Pos and Store
		offset.high[2] = adcReadings[2]; //Recoje el valor actual
 8000354:	4b21      	ldr	r3, [pc, #132]	@ (80003dc <command+0xdc>)
 8000356:	689b      	ldr	r3, [r3, #8]
 8000358:	4a21      	ldr	r2, [pc, #132]	@ (80003e0 <command+0xe0>)
 800035a:	6193      	str	r3, [r2, #24]
		offset.high[1] = adcReadings[1];
 800035c:	4b1f      	ldr	r3, [pc, #124]	@ (80003dc <command+0xdc>)
 800035e:	685b      	ldr	r3, [r3, #4]
 8000360:	4a1f      	ldr	r2, [pc, #124]	@ (80003e0 <command+0xe0>)
 8000362:	6153      	str	r3, [r2, #20]
		ee_writeToRam(0, sizeof(offset), (uint8_t*) &offset); //Almacena
 8000364:	4a1e      	ldr	r2, [pc, #120]	@ (80003e0 <command+0xe0>)
 8000366:	2124      	movs	r1, #36	@ 0x24
 8000368:	2000      	movs	r0, #0
 800036a:	f000 fbf3 	bl	8000b54 <ee_writeToRam>
		break;
 800036e:	e02d      	b.n	80003cc <command+0xcc>
	case TER_COMMAND_CMD_CALIBRATE_BPPS_MIN_CHOICE: //Calibrate BPPS 0% Pos
		offset.low[3] = adcReadings[3]; //Recoje el valor actual
 8000370:	4b1a      	ldr	r3, [pc, #104]	@ (80003dc <command+0xdc>)
 8000372:	68db      	ldr	r3, [r3, #12]
 8000374:	4a1a      	ldr	r2, [pc, #104]	@ (80003e0 <command+0xe0>)
 8000376:	60d3      	str	r3, [r2, #12]
		ee_writeToRam(0, sizeof(offset), (uint8_t*) &offset); //Almacena
 8000378:	4a19      	ldr	r2, [pc, #100]	@ (80003e0 <command+0xe0>)
 800037a:	2124      	movs	r1, #36	@ 0x24
 800037c:	2000      	movs	r0, #0
 800037e:	f000 fbe9 	bl	8000b54 <ee_writeToRam>
		break;
 8000382:	e023      	b.n	80003cc <command+0xcc>

	case TER_COMMAND_CMD_CALIBRATE_BPPS_MAX_CHOICE: //Calibrate BPPS 100% Pos
		offset.high[3] = adcReadings[3]; //Recoje el valor actual
 8000384:	4b15      	ldr	r3, [pc, #84]	@ (80003dc <command+0xdc>)
 8000386:	68db      	ldr	r3, [r3, #12]
 8000388:	4a15      	ldr	r2, [pc, #84]	@ (80003e0 <command+0xe0>)
 800038a:	61d3      	str	r3, [r2, #28]
		ee_writeToRam(0, sizeof(offset), (uint8_t*) &offset); //Almacena
 800038c:	4a14      	ldr	r2, [pc, #80]	@ (80003e0 <command+0xe0>)
 800038e:	2124      	movs	r1, #36	@ 0x24
 8000390:	2000      	movs	r0, #0
 8000392:	f000 fbdf 	bl	8000b54 <ee_writeToRam>
		break;
 8000396:	e019      	b.n	80003cc <command+0xcc>

	case TER_COMMAND_CMD_CALIBRATE_STEER_RIGHTEST_CHOICE: //Calibrate Rightest Steer Position
		offset.low[0] = adcReadings[0]; //Recoje el valor actual
 8000398:	4b10      	ldr	r3, [pc, #64]	@ (80003dc <command+0xdc>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	4a10      	ldr	r2, [pc, #64]	@ (80003e0 <command+0xe0>)
 800039e:	6013      	str	r3, [r2, #0]
		ee_writeToRam(0, sizeof(offset), (uint8_t*) &offset); //Almacena
 80003a0:	4a0f      	ldr	r2, [pc, #60]	@ (80003e0 <command+0xe0>)
 80003a2:	2124      	movs	r1, #36	@ 0x24
 80003a4:	2000      	movs	r0, #0
 80003a6:	f000 fbd5 	bl	8000b54 <ee_writeToRam>
		break;
 80003aa:	e00f      	b.n	80003cc <command+0xcc>

	case TER_COMMAND_CMD_CALIBRATE_STEER_LEFTEST_CHOICE: //Calibrate Leftest Steer Position
		offset.high[0] = adcReadings[0]; //Recoje el valor actual
 80003ac:	4b0b      	ldr	r3, [pc, #44]	@ (80003dc <command+0xdc>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	4a0b      	ldr	r2, [pc, #44]	@ (80003e0 <command+0xe0>)
 80003b2:	6113      	str	r3, [r2, #16]
		ee_writeToRam(0, sizeof(offset), (uint8_t*) &offset); //Almacena
 80003b4:	4a0a      	ldr	r2, [pc, #40]	@ (80003e0 <command+0xe0>)
 80003b6:	2124      	movs	r1, #36	@ 0x24
 80003b8:	2000      	movs	r0, #0
 80003ba:	f000 fbcb 	bl	8000b54 <ee_writeToRam>
		break;
 80003be:	e005      	b.n	80003cc <command+0xcc>

	case TER_COMMAND_CMD_RESET_APPS_IMPLAUSABILITY_CHOICE: //Reset de la implausability
		TeR.apps.imp_flag = 0;
 80003c0:	4b08      	ldr	r3, [pc, #32]	@ (80003e4 <command+0xe4>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	70da      	strb	r2, [r3, #3]
		break;
 80003c6:	e001      	b.n	80003cc <command+0xcc>

	default:
		return 0;
 80003c8:	2300      	movs	r3, #0
 80003ca:	e002      	b.n	80003d2 <command+0xd2>
		break;

	}
	ee_commit(); //Almacena en la flash la calibración
 80003cc:	f000 fbe4 	bl	8000b98 <ee_commit>
	return 1;
 80003d0:	2301      	movs	r3, #1
}
 80003d2:	4618      	mov	r0, r3
 80003d4:	3708      	adds	r7, #8
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	20000554 	.word	0x20000554
 80003e0:	20000530 	.word	0x20000530
 80003e4:	20000080 	.word	0x20000080

080003e8 <checkPersistance>:
 *      Author: Ozuba
 */
#include "TeR_UTILS.h"

//Comprueba que un error sucede durante más de tMax (La función prefiere mantener el estado OK)
uint8_t checkPersistance(persist_t *instance, uint8_t ok, uint32_t tMax) {
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b084      	sub	sp, #16
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	60f8      	str	r0, [r7, #12]
 80003f0:	460b      	mov	r3, r1
 80003f2:	607a      	str	r2, [r7, #4]
 80003f4:	72fb      	strb	r3, [r7, #11]

	if (*instance > 0) { //Estabamos en error
 80003f6:	68fb      	ldr	r3, [r7, #12]
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d011      	beq.n	8000422 <checkPersistance+0x3a>
		if (ok) { //No tenemos error
 80003fe:	7afb      	ldrb	r3, [r7, #11]
 8000400:	2b00      	cmp	r3, #0
 8000402:	d003      	beq.n	800040c <checkPersistance+0x24>
			*instance = 0; //Ponemos el timestamp a 0, ya no hay error
 8000404:	68fb      	ldr	r3, [r7, #12]
 8000406:	2200      	movs	r2, #0
 8000408:	601a      	str	r2, [r3, #0]
 800040a:	e012      	b.n	8000432 <checkPersistance+0x4a>
		} else if (HAL_GetTick() - *instance >= tMax) { //El error supera maxtime
 800040c:	f001 f820 	bl	8001450 <HAL_GetTick>
 8000410:	4602      	mov	r2, r0
 8000412:	68fb      	ldr	r3, [r7, #12]
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	1ad3      	subs	r3, r2, r3
 8000418:	687a      	ldr	r2, [r7, #4]
 800041a:	429a      	cmp	r2, r3
 800041c:	d809      	bhi.n	8000432 <checkPersistance+0x4a>
			return 0; //Damos el error
 800041e:	2300      	movs	r3, #0
 8000420:	e008      	b.n	8000434 <checkPersistance+0x4c>
		}
	} else if (!ok) { // no estabamos en error y ahora si
 8000422:	7afb      	ldrb	r3, [r7, #11]
 8000424:	2b00      	cmp	r3, #0
 8000426:	d104      	bne.n	8000432 <checkPersistance+0x4a>
		*instance = HAL_GetTick();
 8000428:	f001 f812 	bl	8001450 <HAL_GetTick>
 800042c:	4602      	mov	r2, r0
 800042e:	68fb      	ldr	r3, [r7, #12]
 8000430:	601a      	str	r2, [r3, #0]
	}

	return 1; //Tenemos Error pero no hemos superado maxTime
 8000432:	2301      	movs	r3, #1
}
 8000434:	4618      	mov	r0, r3
 8000436:	3710      	adds	r7, #16
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}

0800043c <map>:


// Mapea un intervalo
int32_t map(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min,
		int32_t out_max) {
 800043c:	b480      	push	{r7}
 800043e:	b087      	sub	sp, #28
 8000440:	af00      	add	r7, sp, #0
 8000442:	60f8      	str	r0, [r7, #12]
 8000444:	60b9      	str	r1, [r7, #8]
 8000446:	607a      	str	r2, [r7, #4]
 8000448:	603b      	str	r3, [r7, #0]
//Saturar las salidas si la entrada excede el límite de calibracion
	if (x < in_min)
 800044a:	68fa      	ldr	r2, [r7, #12]
 800044c:	68bb      	ldr	r3, [r7, #8]
 800044e:	429a      	cmp	r2, r3
 8000450:	da01      	bge.n	8000456 <map+0x1a>
		return out_min;
 8000452:	683b      	ldr	r3, [r7, #0]
 8000454:	e016      	b.n	8000484 <map+0x48>
	if (x > in_max)
 8000456:	68fa      	ldr	r2, [r7, #12]
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	429a      	cmp	r2, r3
 800045c:	dd01      	ble.n	8000462 <map+0x26>
		return out_max;
 800045e:	6a3b      	ldr	r3, [r7, #32]
 8000460:	e010      	b.n	8000484 <map+0x48>
//Mapear si estamos en rango seguro
	long val = (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000462:	68fa      	ldr	r2, [r7, #12]
 8000464:	68bb      	ldr	r3, [r7, #8]
 8000466:	1ad3      	subs	r3, r2, r3
 8000468:	6a39      	ldr	r1, [r7, #32]
 800046a:	683a      	ldr	r2, [r7, #0]
 800046c:	1a8a      	subs	r2, r1, r2
 800046e:	fb03 f202 	mul.w	r2, r3, r2
 8000472:	6879      	ldr	r1, [r7, #4]
 8000474:	68bb      	ldr	r3, [r7, #8]
 8000476:	1acb      	subs	r3, r1, r3
 8000478:	fb92 f3f3 	sdiv	r3, r2, r3
 800047c:	683a      	ldr	r2, [r7, #0]
 800047e:	4413      	add	r3, r2
 8000480:	617b      	str	r3, [r7, #20]
	return val;
 8000482:	697b      	ldr	r3, [r7, #20]
}
 8000484:	4618      	mov	r0, r3
 8000486:	371c      	adds	r7, #28
 8000488:	46bd      	mov	sp, r7
 800048a:	bc80      	pop	{r7}
 800048c:	4770      	bx	lr
	...

08000490 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b084      	sub	sp, #16
 8000494:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000496:	1d3b      	adds	r3, r7, #4
 8000498:	2200      	movs	r2, #0
 800049a:	601a      	str	r2, [r3, #0]
 800049c:	605a      	str	r2, [r3, #4]
 800049e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80004a0:	4b2e      	ldr	r3, [pc, #184]	@ (800055c <MX_ADC1_Init+0xcc>)
 80004a2:	4a2f      	ldr	r2, [pc, #188]	@ (8000560 <MX_ADC1_Init+0xd0>)
 80004a4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80004a6:	4b2d      	ldr	r3, [pc, #180]	@ (800055c <MX_ADC1_Init+0xcc>)
 80004a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80004ac:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80004ae:	4b2b      	ldr	r3, [pc, #172]	@ (800055c <MX_ADC1_Init+0xcc>)
 80004b0:	2201      	movs	r2, #1
 80004b2:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004b4:	4b29      	ldr	r3, [pc, #164]	@ (800055c <MX_ADC1_Init+0xcc>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004ba:	4b28      	ldr	r3, [pc, #160]	@ (800055c <MX_ADC1_Init+0xcc>)
 80004bc:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80004c0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004c2:	4b26      	ldr	r3, [pc, #152]	@ (800055c <MX_ADC1_Init+0xcc>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 80004c8:	4b24      	ldr	r3, [pc, #144]	@ (800055c <MX_ADC1_Init+0xcc>)
 80004ca:	2204      	movs	r2, #4
 80004cc:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80004ce:	4823      	ldr	r0, [pc, #140]	@ (800055c <MX_ADC1_Init+0xcc>)
 80004d0:	f000 ffc8 	bl	8001464 <HAL_ADC_Init>
 80004d4:	4603      	mov	r3, r0
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d001      	beq.n	80004de <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80004da:	f000 fc48 	bl	8000d6e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80004de:	2306      	movs	r3, #6
 80004e0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004e2:	2301      	movs	r3, #1
 80004e4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80004e6:	2300      	movs	r3, #0
 80004e8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004ea:	1d3b      	adds	r3, r7, #4
 80004ec:	4619      	mov	r1, r3
 80004ee:	481b      	ldr	r0, [pc, #108]	@ (800055c <MX_ADC1_Init+0xcc>)
 80004f0:	f001 f98a 	bl	8001808 <HAL_ADC_ConfigChannel>
 80004f4:	4603      	mov	r3, r0
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d001      	beq.n	80004fe <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80004fa:	f000 fc38 	bl	8000d6e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80004fe:	2307      	movs	r3, #7
 8000500:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000502:	2302      	movs	r3, #2
 8000504:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000506:	1d3b      	adds	r3, r7, #4
 8000508:	4619      	mov	r1, r3
 800050a:	4814      	ldr	r0, [pc, #80]	@ (800055c <MX_ADC1_Init+0xcc>)
 800050c:	f001 f97c 	bl	8001808 <HAL_ADC_ConfigChannel>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d001      	beq.n	800051a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000516:	f000 fc2a 	bl	8000d6e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800051a:	2308      	movs	r3, #8
 800051c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800051e:	2303      	movs	r3, #3
 8000520:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000522:	1d3b      	adds	r3, r7, #4
 8000524:	4619      	mov	r1, r3
 8000526:	480d      	ldr	r0, [pc, #52]	@ (800055c <MX_ADC1_Init+0xcc>)
 8000528:	f001 f96e 	bl	8001808 <HAL_ADC_ConfigChannel>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000532:	f000 fc1c 	bl	8000d6e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000536:	2309      	movs	r3, #9
 8000538:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800053a:	2304      	movs	r3, #4
 800053c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800053e:	1d3b      	adds	r3, r7, #4
 8000540:	4619      	mov	r1, r3
 8000542:	4806      	ldr	r0, [pc, #24]	@ (800055c <MX_ADC1_Init+0xcc>)
 8000544:	f001 f960 	bl	8001808 <HAL_ADC_ConfigChannel>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 800054e:	f000 fc0e 	bl	8000d6e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000552:	bf00      	nop
 8000554:	3710      	adds	r7, #16
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	20000088 	.word	0x20000088
 8000560:	40012400 	.word	0x40012400

08000564 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b08a      	sub	sp, #40	@ 0x28
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800056c:	f107 0318 	add.w	r3, r7, #24
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	4a33      	ldr	r2, [pc, #204]	@ (800064c <HAL_ADC_MspInit+0xe8>)
 8000580:	4293      	cmp	r3, r2
 8000582:	d15f      	bne.n	8000644 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000584:	4b32      	ldr	r3, [pc, #200]	@ (8000650 <HAL_ADC_MspInit+0xec>)
 8000586:	699b      	ldr	r3, [r3, #24]
 8000588:	4a31      	ldr	r2, [pc, #196]	@ (8000650 <HAL_ADC_MspInit+0xec>)
 800058a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800058e:	6193      	str	r3, [r2, #24]
 8000590:	4b2f      	ldr	r3, [pc, #188]	@ (8000650 <HAL_ADC_MspInit+0xec>)
 8000592:	699b      	ldr	r3, [r3, #24]
 8000594:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000598:	617b      	str	r3, [r7, #20]
 800059a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800059c:	4b2c      	ldr	r3, [pc, #176]	@ (8000650 <HAL_ADC_MspInit+0xec>)
 800059e:	699b      	ldr	r3, [r3, #24]
 80005a0:	4a2b      	ldr	r2, [pc, #172]	@ (8000650 <HAL_ADC_MspInit+0xec>)
 80005a2:	f043 0304 	orr.w	r3, r3, #4
 80005a6:	6193      	str	r3, [r2, #24]
 80005a8:	4b29      	ldr	r3, [pc, #164]	@ (8000650 <HAL_ADC_MspInit+0xec>)
 80005aa:	699b      	ldr	r3, [r3, #24]
 80005ac:	f003 0304 	and.w	r3, r3, #4
 80005b0:	613b      	str	r3, [r7, #16]
 80005b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005b4:	4b26      	ldr	r3, [pc, #152]	@ (8000650 <HAL_ADC_MspInit+0xec>)
 80005b6:	699b      	ldr	r3, [r3, #24]
 80005b8:	4a25      	ldr	r2, [pc, #148]	@ (8000650 <HAL_ADC_MspInit+0xec>)
 80005ba:	f043 0308 	orr.w	r3, r3, #8
 80005be:	6193      	str	r3, [r2, #24]
 80005c0:	4b23      	ldr	r3, [pc, #140]	@ (8000650 <HAL_ADC_MspInit+0xec>)
 80005c2:	699b      	ldr	r3, [r3, #24]
 80005c4:	f003 0308 	and.w	r3, r3, #8
 80005c8:	60fb      	str	r3, [r7, #12]
 80005ca:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80005cc:	23c0      	movs	r3, #192	@ 0xc0
 80005ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005d0:	2303      	movs	r3, #3
 80005d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d4:	f107 0318 	add.w	r3, r7, #24
 80005d8:	4619      	mov	r1, r3
 80005da:	481e      	ldr	r0, [pc, #120]	@ (8000654 <HAL_ADC_MspInit+0xf0>)
 80005dc:	f002 fd78 	bl	80030d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80005e0:	2303      	movs	r3, #3
 80005e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005e4:	2303      	movs	r3, #3
 80005e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005e8:	f107 0318 	add.w	r3, r7, #24
 80005ec:	4619      	mov	r1, r3
 80005ee:	481a      	ldr	r0, [pc, #104]	@ (8000658 <HAL_ADC_MspInit+0xf4>)
 80005f0:	f002 fd6e 	bl	80030d0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80005f4:	4b19      	ldr	r3, [pc, #100]	@ (800065c <HAL_ADC_MspInit+0xf8>)
 80005f6:	4a1a      	ldr	r2, [pc, #104]	@ (8000660 <HAL_ADC_MspInit+0xfc>)
 80005f8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80005fa:	4b18      	ldr	r3, [pc, #96]	@ (800065c <HAL_ADC_MspInit+0xf8>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000600:	4b16      	ldr	r3, [pc, #88]	@ (800065c <HAL_ADC_MspInit+0xf8>)
 8000602:	2200      	movs	r2, #0
 8000604:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000606:	4b15      	ldr	r3, [pc, #84]	@ (800065c <HAL_ADC_MspInit+0xf8>)
 8000608:	2280      	movs	r2, #128	@ 0x80
 800060a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800060c:	4b13      	ldr	r3, [pc, #76]	@ (800065c <HAL_ADC_MspInit+0xf8>)
 800060e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000612:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000614:	4b11      	ldr	r3, [pc, #68]	@ (800065c <HAL_ADC_MspInit+0xf8>)
 8000616:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800061a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800061c:	4b0f      	ldr	r3, [pc, #60]	@ (800065c <HAL_ADC_MspInit+0xf8>)
 800061e:	2220      	movs	r2, #32
 8000620:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000622:	4b0e      	ldr	r3, [pc, #56]	@ (800065c <HAL_ADC_MspInit+0xf8>)
 8000624:	2200      	movs	r2, #0
 8000626:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000628:	480c      	ldr	r0, [pc, #48]	@ (800065c <HAL_ADC_MspInit+0xf8>)
 800062a:	f002 fa69 	bl	8002b00 <HAL_DMA_Init>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 8000634:	f000 fb9b 	bl	8000d6e <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	4a08      	ldr	r2, [pc, #32]	@ (800065c <HAL_ADC_MspInit+0xf8>)
 800063c:	621a      	str	r2, [r3, #32]
 800063e:	4a07      	ldr	r2, [pc, #28]	@ (800065c <HAL_ADC_MspInit+0xf8>)
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000644:	bf00      	nop
 8000646:	3728      	adds	r7, #40	@ 0x28
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	40012400 	.word	0x40012400
 8000650:	40021000 	.word	0x40021000
 8000654:	40010800 	.word	0x40010800
 8000658:	40010c00 	.word	0x40010c00
 800065c:	200000b8 	.word	0x200000b8
 8000660:	40020008 	.word	0x40020008

08000664 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b08a      	sub	sp, #40	@ 0x28
 8000668:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800066a:	4b25      	ldr	r3, [pc, #148]	@ (8000700 <MX_CAN_Init+0x9c>)
 800066c:	4a25      	ldr	r2, [pc, #148]	@ (8000704 <MX_CAN_Init+0xa0>)
 800066e:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000670:	4b23      	ldr	r3, [pc, #140]	@ (8000700 <MX_CAN_Init+0x9c>)
 8000672:	2204      	movs	r2, #4
 8000674:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000676:	4b22      	ldr	r3, [pc, #136]	@ (8000700 <MX_CAN_Init+0x9c>)
 8000678:	2200      	movs	r2, #0
 800067a:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_2TQ;
 800067c:	4b20      	ldr	r3, [pc, #128]	@ (8000700 <MX_CAN_Init+0x9c>)
 800067e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000682:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 8000684:	4b1e      	ldr	r3, [pc, #120]	@ (8000700 <MX_CAN_Init+0x9c>)
 8000686:	f44f 22a0 	mov.w	r2, #327680	@ 0x50000
 800068a:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800068c:	4b1c      	ldr	r3, [pc, #112]	@ (8000700 <MX_CAN_Init+0x9c>)
 800068e:	2200      	movs	r2, #0
 8000690:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000692:	4b1b      	ldr	r3, [pc, #108]	@ (8000700 <MX_CAN_Init+0x9c>)
 8000694:	2200      	movs	r2, #0
 8000696:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 8000698:	4b19      	ldr	r3, [pc, #100]	@ (8000700 <MX_CAN_Init+0x9c>)
 800069a:	2201      	movs	r2, #1
 800069c:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800069e:	4b18      	ldr	r3, [pc, #96]	@ (8000700 <MX_CAN_Init+0x9c>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80006a4:	4b16      	ldr	r3, [pc, #88]	@ (8000700 <MX_CAN_Init+0x9c>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80006aa:	4b15      	ldr	r3, [pc, #84]	@ (8000700 <MX_CAN_Init+0x9c>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80006b0:	4b13      	ldr	r3, [pc, #76]	@ (8000700 <MX_CAN_Init+0x9c>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80006b6:	4812      	ldr	r0, [pc, #72]	@ (8000700 <MX_CAN_Init+0x9c>)
 80006b8:	f001 fa9f 	bl	8001bfa <HAL_CAN_Init>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 80006c2:	f000 fb54 	bl	8000d6e <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
	CAN_FilterTypeDef canfilterconfig; //Configured for it to just respond to cmd commands
	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80006c6:	2301      	movs	r3, #1
 80006c8:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterBank = 0; // which filter bank to use from the assigned ones
 80006ca:	2300      	movs	r3, #0
 80006cc:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterIdHigh = TER_COMMAND_FRAME_ID << 5;
 80006d2:	2320      	movs	r3, #32
 80006d4:	603b      	str	r3, [r7, #0]
	canfilterconfig.FilterIdLow = 0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	607b      	str	r3, [r7, #4]
	canfilterconfig.FilterMaskIdHigh = 0;
 80006da:	2300      	movs	r3, #0
 80006dc:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterMaskIdLow = 0;
 80006de:	2300      	movs	r3, #0
 80006e0:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDLIST;
 80006e2:	2301      	movs	r3, #1
 80006e4:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80006e6:	2301      	movs	r3, #1
 80006e8:	61fb      	str	r3, [r7, #28]
	canfilterconfig.SlaveStartFilterBank = 0; // doesn't matter in single can controllers
 80006ea:	2300      	movs	r3, #0
 80006ec:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 80006ee:	463b      	mov	r3, r7
 80006f0:	4619      	mov	r1, r3
 80006f2:	4803      	ldr	r0, [pc, #12]	@ (8000700 <MX_CAN_Init+0x9c>)
 80006f4:	f001 fb7c 	bl	8001df0 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN_Init 2 */

}
 80006f8:	bf00      	nop
 80006fa:	3728      	adds	r7, #40	@ 0x28
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	200000fc 	.word	0x200000fc
 8000704:	40006400 	.word	0x40006400

08000708 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b088      	sub	sp, #32
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000710:	f107 0310 	add.w	r3, r7, #16
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	4a1c      	ldr	r2, [pc, #112]	@ (8000794 <HAL_CAN_MspInit+0x8c>)
 8000724:	4293      	cmp	r3, r2
 8000726:	d131      	bne.n	800078c <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000728:	4b1b      	ldr	r3, [pc, #108]	@ (8000798 <HAL_CAN_MspInit+0x90>)
 800072a:	69db      	ldr	r3, [r3, #28]
 800072c:	4a1a      	ldr	r2, [pc, #104]	@ (8000798 <HAL_CAN_MspInit+0x90>)
 800072e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000732:	61d3      	str	r3, [r2, #28]
 8000734:	4b18      	ldr	r3, [pc, #96]	@ (8000798 <HAL_CAN_MspInit+0x90>)
 8000736:	69db      	ldr	r3, [r3, #28]
 8000738:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800073c:	60fb      	str	r3, [r7, #12]
 800073e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000740:	4b15      	ldr	r3, [pc, #84]	@ (8000798 <HAL_CAN_MspInit+0x90>)
 8000742:	699b      	ldr	r3, [r3, #24]
 8000744:	4a14      	ldr	r2, [pc, #80]	@ (8000798 <HAL_CAN_MspInit+0x90>)
 8000746:	f043 0304 	orr.w	r3, r3, #4
 800074a:	6193      	str	r3, [r2, #24]
 800074c:	4b12      	ldr	r3, [pc, #72]	@ (8000798 <HAL_CAN_MspInit+0x90>)
 800074e:	699b      	ldr	r3, [r3, #24]
 8000750:	f003 0304 	and.w	r3, r3, #4
 8000754:	60bb      	str	r3, [r7, #8]
 8000756:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000758:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800075c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800075e:	2300      	movs	r3, #0
 8000760:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000762:	2300      	movs	r3, #0
 8000764:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000766:	f107 0310 	add.w	r3, r7, #16
 800076a:	4619      	mov	r1, r3
 800076c:	480b      	ldr	r0, [pc, #44]	@ (800079c <HAL_CAN_MspInit+0x94>)
 800076e:	f002 fcaf 	bl	80030d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000772:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000776:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000778:	2302      	movs	r3, #2
 800077a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800077c:	2303      	movs	r3, #3
 800077e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000780:	f107 0310 	add.w	r3, r7, #16
 8000784:	4619      	mov	r1, r3
 8000786:	4805      	ldr	r0, [pc, #20]	@ (800079c <HAL_CAN_MspInit+0x94>)
 8000788:	f002 fca2 	bl	80030d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800078c:	bf00      	nop
 800078e:	3720      	adds	r7, #32
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	40006400 	.word	0x40006400
 8000798:	40021000 	.word	0x40021000
 800079c:	40010800 	.word	0x40010800

080007a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007a6:	4b08      	ldr	r3, [pc, #32]	@ (80007c8 <MX_DMA_Init+0x28>)
 80007a8:	695b      	ldr	r3, [r3, #20]
 80007aa:	4a07      	ldr	r2, [pc, #28]	@ (80007c8 <MX_DMA_Init+0x28>)
 80007ac:	f043 0301 	orr.w	r3, r3, #1
 80007b0:	6153      	str	r3, [r2, #20]
 80007b2:	4b05      	ldr	r3, [pc, #20]	@ (80007c8 <MX_DMA_Init+0x28>)
 80007b4:	695b      	ldr	r3, [r3, #20]
 80007b6:	f003 0301 	and.w	r3, r3, #1
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]

}
 80007be:	bf00      	nop
 80007c0:	370c      	adds	r7, #12
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bc80      	pop	{r7}
 80007c6:	4770      	bx	lr
 80007c8:	40021000 	.word	0x40021000

080007cc <ee_init>:
uint8_t ee_ram[_EE_USE_RAM_BYTE];
#endif

//##########################################################################################################
bool ee_init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
#if (_EE_USE_RAM_BYTE > 0)
  return ee_read(0, _EE_USE_RAM_BYTE, NULL);
 80007d0:	2200      	movs	r2, #0
 80007d2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007d6:	2000      	movs	r0, #0
 80007d8:	f000 f840 	bl	800085c <ee_read>
 80007dc:	4603      	mov	r3, r0
#else
  return true;
#endif
}
 80007de:	4618      	mov	r0, r3
 80007e0:	bd80      	pop	{r7, pc}
	...

080007e4 <ee_format>:
//##########################################################################################################
bool ee_format(bool keepRamData)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b088      	sub	sp, #32
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	4603      	mov	r3, r0
 80007ec:	71fb      	strb	r3, [r7, #7]
  uint32_t error;
  HAL_FLASH_Unlock();
 80007ee:	f002 fadf 	bl	8002db0 <HAL_FLASH_Unlock>
  FLASH_EraseInitTypeDef flashErase;
#if _EE_PAGE_OR_SECTOR == PAGE
	flashErase.NbPages = 1;
 80007f2:	2301      	movs	r3, #1
 80007f4:	61bb      	str	r3, [r7, #24]
  flashErase.PageAddress = _EE_ADDR_INUSE;
 80007f6:	4b17      	ldr	r3, [pc, #92]	@ (8000854 <ee_format+0x70>)
 80007f8:	617b      	str	r3, [r7, #20]
  flashErase.TypeErase = FLASH_TYPEERASE_PAGES;
 80007fa:	2300      	movs	r3, #0
 80007fc:	60fb      	str	r3, [r7, #12]
  flashErase.NbPages = 1;
  flashErase.Page = _EE_USE_FLASH_PAGE_OR_SECTOR;
  flashErase.TypeErase = FLASH_TYPEERASE_PAGES;
#endif
#ifdef _EE_FLASH_BANK
  flashErase.Banks = _EE_FLASH_BANK;
 80007fe:	2301      	movs	r3, #1
 8000800:	613b      	str	r3, [r7, #16]
#endif
#ifdef _EE_VOLTAGE_RANGE
  flashErase.VoltageRange = _EE_VOLTAGE_RANGE;
#endif
  if (HAL_FLASHEx_Erase(&flashErase, &error) == HAL_OK)
 8000802:	f107 021c 	add.w	r2, r7, #28
 8000806:	f107 030c 	add.w	r3, r7, #12
 800080a:	4611      	mov	r1, r2
 800080c:	4618      	mov	r0, r3
 800080e:	f002 fbb7 	bl	8002f80 <HAL_FLASHEx_Erase>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d115      	bne.n	8000844 <ee_format+0x60>
  {
    HAL_FLASH_Lock();
 8000818:	f002 faf0 	bl	8002dfc <HAL_FLASH_Lock>
    if (error != 0xFFFFFFFF)
 800081c:	69fb      	ldr	r3, [r7, #28]
 800081e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000822:	d001      	beq.n	8000828 <ee_format+0x44>
      return false;
 8000824:	2300      	movs	r3, #0
 8000826:	e010      	b.n	800084a <ee_format+0x66>
    else
    {
#if (_EE_USE_RAM_BYTE > 0)
      if (keepRamData == false)
 8000828:	79fb      	ldrb	r3, [r7, #7]
 800082a:	f083 0301 	eor.w	r3, r3, #1
 800082e:	b2db      	uxtb	r3, r3
 8000830:	2b00      	cmp	r3, #0
 8000832:	d005      	beq.n	8000840 <ee_format+0x5c>
        memset(ee_ram, 0xFF, _EE_USE_RAM_BYTE);
 8000834:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000838:	21ff      	movs	r1, #255	@ 0xff
 800083a:	4807      	ldr	r0, [pc, #28]	@ (8000858 <ee_format+0x74>)
 800083c:	f003 fe76 	bl	800452c <memset>
#endif
      return true;
 8000840:	2301      	movs	r3, #1
 8000842:	e002      	b.n	800084a <ee_format+0x66>
    }
  }
  HAL_FLASH_Lock();
 8000844:	f002 fada 	bl	8002dfc <HAL_FLASH_Lock>
  return false;
 8000848:	2300      	movs	r3, #0
}
 800084a:	4618      	mov	r0, r3
 800084c:	3720      	adds	r7, #32
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	08007c00 	.word	0x08007c00
 8000858:	20000124 	.word	0x20000124

0800085c <ee_read>:
//##########################################################################################################
bool ee_read(uint32_t startVirtualAddress, uint32_t len, uint8_t* data)
{
 800085c:	b480      	push	{r7}
 800085e:	b087      	sub	sp, #28
 8000860:	af00      	add	r7, sp, #0
 8000862:	60f8      	str	r0, [r7, #12]
 8000864:	60b9      	str	r1, [r7, #8]
 8000866:	607a      	str	r2, [r7, #4]
  if ((startVirtualAddress + len) > _EE_SIZE)
 8000868:	68fa      	ldr	r2, [r7, #12]
 800086a:	68bb      	ldr	r3, [r7, #8]
 800086c:	4413      	add	r3, r2
 800086e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000872:	d901      	bls.n	8000878 <ee_read+0x1c>
    return false;
 8000874:	2300      	movs	r3, #0
 8000876:	e02b      	b.n	80008d0 <ee_read+0x74>
  for (uint32_t i = startVirtualAddress; i < len + startVirtualAddress; i++)
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	617b      	str	r3, [r7, #20]
 800087c:	e021      	b.n	80008c2 <ee_read+0x66>
  {
    if (data != NULL)
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d00b      	beq.n	800089c <ee_read+0x40>
    {
      *data = (*(__IO uint8_t*) (i + _EE_ADDR_INUSE));
 8000884:	697b      	ldr	r3, [r7, #20]
 8000886:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 800088a:	f503 43f8 	add.w	r3, r3, #31744	@ 0x7c00
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	b2da      	uxtb	r2, r3
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	701a      	strb	r2, [r3, #0]
      data++;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	3301      	adds	r3, #1
 800089a:	607b      	str	r3, [r7, #4]
    }
#if (_EE_USE_RAM_BYTE > 0)
    if (i < _EE_USE_RAM_BYTE)
 800089c:	697b      	ldr	r3, [r7, #20]
 800089e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80008a2:	d20b      	bcs.n	80008bc <ee_read+0x60>
      ee_ram[i] = (*(__IO uint8_t*) (i + _EE_ADDR_INUSE));
 80008a4:	697b      	ldr	r3, [r7, #20]
 80008a6:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 80008aa:	f503 43f8 	add.w	r3, r3, #31744	@ 0x7c00
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	b2d9      	uxtb	r1, r3
 80008b2:	4a0a      	ldr	r2, [pc, #40]	@ (80008dc <ee_read+0x80>)
 80008b4:	697b      	ldr	r3, [r7, #20]
 80008b6:	4413      	add	r3, r2
 80008b8:	460a      	mov	r2, r1
 80008ba:	701a      	strb	r2, [r3, #0]
  for (uint32_t i = startVirtualAddress; i < len + startVirtualAddress; i++)
 80008bc:	697b      	ldr	r3, [r7, #20]
 80008be:	3301      	adds	r3, #1
 80008c0:	617b      	str	r3, [r7, #20]
 80008c2:	68ba      	ldr	r2, [r7, #8]
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	4413      	add	r3, r2
 80008c8:	697a      	ldr	r2, [r7, #20]
 80008ca:	429a      	cmp	r2, r3
 80008cc:	d3d7      	bcc.n	800087e <ee_read+0x22>
#endif
  }
  return true;
 80008ce:	2301      	movs	r3, #1
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	371c      	adds	r7, #28
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bc80      	pop	{r7}
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	20000124 	.word	0x20000124

080008e0 <ee_write>:
//##########################################################################################################
bool ee_write(uint32_t startVirtualAddress, uint32_t len, uint8_t *data)
{
 80008e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80008e4:	b0a2      	sub	sp, #136	@ 0x88
 80008e6:	af00      	add	r7, sp, #0
 80008e8:	6778      	str	r0, [r7, #116]	@ 0x74
 80008ea:	6739      	str	r1, [r7, #112]	@ 0x70
 80008ec:	66fa      	str	r2, [r7, #108]	@ 0x6c
  if ((startVirtualAddress + len) > _EE_SIZE)
 80008ee:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80008f0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80008f2:	4413      	add	r3, r2
 80008f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80008f8:	d901      	bls.n	80008fe <ee_write+0x1e>
    return false;
 80008fa:	2300      	movs	r3, #0
 80008fc:	e124      	b.n	8000b48 <ee_write+0x268>
  if (data == NULL)
 80008fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000900:	2b00      	cmp	r3, #0
 8000902:	d101      	bne.n	8000908 <ee_write+0x28>
    return false;
 8000904:	2300      	movs	r3, #0
 8000906:	e11f      	b.n	8000b48 <ee_write+0x268>
  HAL_FLASH_Unlock();
 8000908:	f002 fa52 	bl	8002db0 <HAL_FLASH_Unlock>
      return false;
    }
  }	
#endif
#ifdef FLASH_TYPEPROGRAM_HALFWORD
  for (uint32_t i = 0; i < len ; i+=2)
 800090c:	2300      	movs	r3, #0
 800090e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8000912:	e029      	b.n	8000968 <ee_write+0x88>
  {		
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, ((i + startVirtualAddress)) + _EE_ADDR_INUSE, (uint64_t)(data[i] | (data[i+1] << 8))) != HAL_OK)
 8000914:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8000918:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800091a:	4413      	add	r3, r2
 800091c:	f103 6100 	add.w	r1, r3, #134217728	@ 0x8000000
 8000920:	f501 41f8 	add.w	r1, r1, #31744	@ 0x7c00
 8000924:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000926:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800092a:	4413      	add	r3, r2
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	4618      	mov	r0, r3
 8000930:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000934:	1c5a      	adds	r2, r3, #1
 8000936:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000938:	4413      	add	r3, r2
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	021b      	lsls	r3, r3, #8
 800093e:	4303      	orrs	r3, r0
 8000940:	17da      	asrs	r2, r3, #31
 8000942:	461c      	mov	r4, r3
 8000944:	4615      	mov	r5, r2
 8000946:	4622      	mov	r2, r4
 8000948:	462b      	mov	r3, r5
 800094a:	2001      	movs	r0, #1
 800094c:	f002 f9c0 	bl	8002cd0 <HAL_FLASH_Program>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d003      	beq.n	800095e <ee_write+0x7e>
    {
      HAL_FLASH_Lock();
 8000956:	f002 fa51 	bl	8002dfc <HAL_FLASH_Lock>
      return false;
 800095a:	2300      	movs	r3, #0
 800095c:	e0f4      	b.n	8000b48 <ee_write+0x268>
  for (uint32_t i = 0; i < len ; i+=2)
 800095e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000962:	3302      	adds	r3, #2
 8000964:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8000968:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800096c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800096e:	429a      	cmp	r2, r3
 8000970:	d3d0      	bcc.n	8000914 <ee_write+0x34>
    }
  }	
#endif
#ifdef FLASH_TYPEPROGRAM_DOUBLEWORD
  for (uint32_t i = 0; i < len; i += 8)
 8000972:	2300      	movs	r3, #0
 8000974:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000978:	e0dd      	b.n	8000b36 <ee_write+0x256>
  {
    uint64_t data64 = data[i];
 800097a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800097c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000980:	4413      	add	r3, r2
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	b2db      	uxtb	r3, r3
 8000986:	2200      	movs	r2, #0
 8000988:	62bb      	str	r3, [r7, #40]	@ 0x28
 800098a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800098c:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8000990:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
    data64 += data[i + 1] * 0x100;
 8000994:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000998:	1c5a      	adds	r2, r3, #1
 800099a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800099c:	4413      	add	r3, r2
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	021b      	lsls	r3, r3, #8
 80009a2:	17da      	asrs	r2, r3, #31
 80009a4:	663b      	str	r3, [r7, #96]	@ 0x60
 80009a6:	667a      	str	r2, [r7, #100]	@ 0x64
 80009a8:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 80009ac:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80009b0:	4621      	mov	r1, r4
 80009b2:	1851      	adds	r1, r2, r1
 80009b4:	6239      	str	r1, [r7, #32]
 80009b6:	4629      	mov	r1, r5
 80009b8:	414b      	adcs	r3, r1
 80009ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80009bc:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80009c0:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
    data64 += data[i + 2] * 0x10000;
 80009c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80009c8:	1c9a      	adds	r2, r3, #2
 80009ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80009cc:	4413      	add	r3, r2
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	041b      	lsls	r3, r3, #16
 80009d2:	17da      	asrs	r2, r3, #31
 80009d4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80009d6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80009d8:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 80009dc:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 80009e0:	4621      	mov	r1, r4
 80009e2:	1851      	adds	r1, r2, r1
 80009e4:	61b9      	str	r1, [r7, #24]
 80009e6:	4629      	mov	r1, r5
 80009e8:	414b      	adcs	r3, r1
 80009ea:	61fb      	str	r3, [r7, #28]
 80009ec:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80009f0:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
    data64 += data[i + 3] * 0x1000000;
 80009f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80009f8:	1cda      	adds	r2, r3, #3
 80009fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80009fc:	4413      	add	r3, r2
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	061b      	lsls	r3, r3, #24
 8000a02:	17da      	asrs	r2, r3, #31
 8000a04:	653b      	str	r3, [r7, #80]	@ 0x50
 8000a06:	657a      	str	r2, [r7, #84]	@ 0x54
 8000a08:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8000a0c:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8000a10:	4621      	mov	r1, r4
 8000a12:	1851      	adds	r1, r2, r1
 8000a14:	6139      	str	r1, [r7, #16]
 8000a16:	4629      	mov	r1, r5
 8000a18:	414b      	adcs	r3, r1
 8000a1a:	617b      	str	r3, [r7, #20]
 8000a1c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8000a20:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
    data64 += data[i + 4] * 0x100000000;
 8000a24:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000a28:	1d1a      	adds	r2, r3, #4
 8000a2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000a2c:	4413      	add	r3, r2
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	2200      	movs	r2, #0
 8000a34:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000a36:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8000a38:	f04f 0200 	mov.w	r2, #0
 8000a3c:	f04f 0300 	mov.w	r3, #0
 8000a40:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8000a42:	000b      	movs	r3, r1
 8000a44:	2200      	movs	r2, #0
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8000a4e:	1814      	adds	r4, r2, r0
 8000a50:	60bc      	str	r4, [r7, #8]
 8000a52:	414b      	adcs	r3, r1
 8000a54:	60fb      	str	r3, [r7, #12]
 8000a56:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8000a5a:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
    data64 += data[i + 5] * 0x10000000000;
 8000a5e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000a62:	1d5a      	adds	r2, r3, #5
 8000a64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000a66:	4413      	add	r3, r2
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	b2db      	uxtb	r3, r3
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	643b      	str	r3, [r7, #64]	@ 0x40
 8000a70:	647a      	str	r2, [r7, #68]	@ 0x44
 8000a72:	f04f 0200 	mov.w	r2, #0
 8000a76:	f04f 0300 	mov.w	r3, #0
 8000a7a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8000a7c:	020b      	lsls	r3, r1, #8
 8000a7e:	2200      	movs	r2, #0
 8000a80:	4610      	mov	r0, r2
 8000a82:	4619      	mov	r1, r3
 8000a84:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8000a88:	1814      	adds	r4, r2, r0
 8000a8a:	603c      	str	r4, [r7, #0]
 8000a8c:	414b      	adcs	r3, r1
 8000a8e:	607b      	str	r3, [r7, #4]
 8000a90:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000a94:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
    data64 += data[i + 6] * 0x1000000000000;
 8000a98:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000a9c:	1d9a      	adds	r2, r3, #6
 8000a9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000aa0:	4413      	add	r3, r2
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000aaa:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8000aac:	f04f 0200 	mov.w	r2, #0
 8000ab0:	f04f 0300 	mov.w	r3, #0
 8000ab4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8000ab6:	040b      	lsls	r3, r1, #16
 8000ab8:	2200      	movs	r2, #0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4619      	mov	r1, r3
 8000abe:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8000ac2:	eb12 0a00 	adds.w	sl, r2, r0
 8000ac6:	eb43 0b01 	adc.w	fp, r3, r1
 8000aca:	e9c7 ab1e 	strd	sl, fp, [r7, #120]	@ 0x78
    data64 += data[i + 7] * 0x100000000000000;
 8000ace:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000ad2:	1dda      	adds	r2, r3, #7
 8000ad4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000ad6:	4413      	add	r3, r2
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	b2db      	uxtb	r3, r3
 8000adc:	2200      	movs	r2, #0
 8000ade:	633b      	str	r3, [r7, #48]	@ 0x30
 8000ae0:	637a      	str	r2, [r7, #52]	@ 0x34
 8000ae2:	f04f 0200 	mov.w	r2, #0
 8000ae6:	f04f 0300 	mov.w	r3, #0
 8000aea:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8000aec:	060b      	lsls	r3, r1, #24
 8000aee:	2200      	movs	r2, #0
 8000af0:	4610      	mov	r0, r2
 8000af2:	4619      	mov	r1, r3
 8000af4:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8000af8:	eb12 0800 	adds.w	r8, r2, r0
 8000afc:	eb43 0901 	adc.w	r9, r3, r1
 8000b00:	e9c7 891e 	strd	r8, r9, [r7, #120]	@ 0x78
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, ((i + startVirtualAddress)) + _EE_ADDR_INUSE, data64) != HAL_OK)
 8000b04:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8000b08:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000b0a:	4413      	add	r3, r2
 8000b0c:	f103 6100 	add.w	r1, r3, #134217728	@ 0x8000000
 8000b10:	f501 41f8 	add.w	r1, r1, #31744	@ 0x7c00
 8000b14:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8000b18:	2003      	movs	r0, #3
 8000b1a:	f002 f8d9 	bl	8002cd0 <HAL_FLASH_Program>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d003      	beq.n	8000b2c <ee_write+0x24c>
    {
      HAL_FLASH_Lock();
 8000b24:	f002 f96a 	bl	8002dfc <HAL_FLASH_Lock>
      return false;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	e00d      	b.n	8000b48 <ee_write+0x268>
  for (uint32_t i = 0; i < len; i += 8)
 8000b2c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000b30:	3308      	adds	r3, #8
 8000b32:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000b36:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8000b3a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	f4ff af1c 	bcc.w	800097a <ee_write+0x9a>
    }
  }
#endif
  HAL_FLASH_Lock();
 8000b42:	f002 f95b 	bl	8002dfc <HAL_FLASH_Lock>
  return true;
 8000b46:	2301      	movs	r3, #1
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	3788      	adds	r7, #136	@ 0x88
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08000b54 <ee_writeToRam>:
//##########################################################################################################
bool ee_writeToRam(uint32_t startVirtualAddress, uint32_t len, uint8_t* data)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	60f8      	str	r0, [r7, #12]
 8000b5c:	60b9      	str	r1, [r7, #8]
 8000b5e:	607a      	str	r2, [r7, #4]
#if (_EE_USE_RAM_BYTE > 0)
  if ((startVirtualAddress + len) > _EE_USE_RAM_BYTE)
 8000b60:	68fa      	ldr	r2, [r7, #12]
 8000b62:	68bb      	ldr	r3, [r7, #8]
 8000b64:	4413      	add	r3, r2
 8000b66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000b6a:	d901      	bls.n	8000b70 <ee_writeToRam+0x1c>
    return false;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	e00d      	b.n	8000b8c <ee_writeToRam+0x38>
  if (data == NULL)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d101      	bne.n	8000b7a <ee_writeToRam+0x26>
    return false;
 8000b76:	2300      	movs	r3, #0
 8000b78:	e008      	b.n	8000b8c <ee_writeToRam+0x38>
  memcpy(&ee_ram[startVirtualAddress], data, len);
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	4a05      	ldr	r2, [pc, #20]	@ (8000b94 <ee_writeToRam+0x40>)
 8000b7e:	4413      	add	r3, r2
 8000b80:	68ba      	ldr	r2, [r7, #8]
 8000b82:	6879      	ldr	r1, [r7, #4]
 8000b84:	4618      	mov	r0, r3
 8000b86:	f003 fcfd 	bl	8004584 <memcpy>
  return true;
 8000b8a:	2301      	movs	r3, #1
#else
  return false;
#endif
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	3710      	adds	r7, #16
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	20000124 	.word	0x20000124

08000b98 <ee_commit>:
//##########################################################################################################
bool  ee_commit(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
#if (_EE_USE_RAM_BYTE > 0)
  if (ee_format(true) == false)
 8000b9c:	2001      	movs	r0, #1
 8000b9e:	f7ff fe21 	bl	80007e4 <ee_format>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	f083 0301 	eor.w	r3, r3, #1
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <ee_commit+0x1a>
    return false;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	e006      	b.n	8000bc0 <ee_commit+0x28>
  return ee_write(0, _EE_USE_RAM_BYTE, ee_ram);
 8000bb2:	4a04      	ldr	r2, [pc, #16]	@ (8000bc4 <ee_commit+0x2c>)
 8000bb4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000bb8:	2000      	movs	r0, #0
 8000bba:	f7ff fe91 	bl	80008e0 <ee_write>
 8000bbe:	4603      	mov	r3, r0
#else
  return false;
#endif
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	20000124 	.word	0x20000124

08000bc8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b088      	sub	sp, #32
 8000bcc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bce:	f107 0310 	add.w	r3, r7, #16
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	605a      	str	r2, [r3, #4]
 8000bd8:	609a      	str	r2, [r3, #8]
 8000bda:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bdc:	4b1d      	ldr	r3, [pc, #116]	@ (8000c54 <MX_GPIO_Init+0x8c>)
 8000bde:	699b      	ldr	r3, [r3, #24]
 8000be0:	4a1c      	ldr	r2, [pc, #112]	@ (8000c54 <MX_GPIO_Init+0x8c>)
 8000be2:	f043 0320 	orr.w	r3, r3, #32
 8000be6:	6193      	str	r3, [r2, #24]
 8000be8:	4b1a      	ldr	r3, [pc, #104]	@ (8000c54 <MX_GPIO_Init+0x8c>)
 8000bea:	699b      	ldr	r3, [r3, #24]
 8000bec:	f003 0320 	and.w	r3, r3, #32
 8000bf0:	60fb      	str	r3, [r7, #12]
 8000bf2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf4:	4b17      	ldr	r3, [pc, #92]	@ (8000c54 <MX_GPIO_Init+0x8c>)
 8000bf6:	699b      	ldr	r3, [r3, #24]
 8000bf8:	4a16      	ldr	r2, [pc, #88]	@ (8000c54 <MX_GPIO_Init+0x8c>)
 8000bfa:	f043 0304 	orr.w	r3, r3, #4
 8000bfe:	6193      	str	r3, [r2, #24]
 8000c00:	4b14      	ldr	r3, [pc, #80]	@ (8000c54 <MX_GPIO_Init+0x8c>)
 8000c02:	699b      	ldr	r3, [r3, #24]
 8000c04:	f003 0304 	and.w	r3, r3, #4
 8000c08:	60bb      	str	r3, [r7, #8]
 8000c0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c0c:	4b11      	ldr	r3, [pc, #68]	@ (8000c54 <MX_GPIO_Init+0x8c>)
 8000c0e:	699b      	ldr	r3, [r3, #24]
 8000c10:	4a10      	ldr	r2, [pc, #64]	@ (8000c54 <MX_GPIO_Init+0x8c>)
 8000c12:	f043 0308 	orr.w	r3, r3, #8
 8000c16:	6193      	str	r3, [r2, #24]
 8000c18:	4b0e      	ldr	r3, [pc, #56]	@ (8000c54 <MX_GPIO_Init+0x8c>)
 8000c1a:	699b      	ldr	r3, [r3, #24]
 8000c1c:	f003 0308 	and.w	r3, r3, #8
 8000c20:	607b      	str	r3, [r7, #4]
 8000c22:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8000c24:	2200      	movs	r2, #0
 8000c26:	2118      	movs	r1, #24
 8000c28:	480b      	ldr	r0, [pc, #44]	@ (8000c58 <MX_GPIO_Init+0x90>)
 8000c2a:	f002 fbd5 	bl	80033d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000c2e:	2318      	movs	r3, #24
 8000c30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c32:	2301      	movs	r3, #1
 8000c34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3e:	f107 0310 	add.w	r3, r7, #16
 8000c42:	4619      	mov	r1, r3
 8000c44:	4804      	ldr	r0, [pc, #16]	@ (8000c58 <MX_GPIO_Init+0x90>)
 8000c46:	f002 fa43 	bl	80030d0 <HAL_GPIO_Init>

}
 8000c4a:	bf00      	nop
 8000c4c:	3720      	adds	r7, #32
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40021000 	.word	0x40021000
 8000c58:	40010800 	.word	0x40010800

08000c5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c60:	f000 fb9e 	bl	80013a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c64:	f000 f81c 	bl	8000ca0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c68:	f7ff ffae 	bl	8000bc8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c6c:	f7ff fd98 	bl	80007a0 <MX_DMA_Init>
  MX_ADC1_Init();
 8000c70:	f7ff fc0e 	bl	8000490 <MX_ADC1_Init>
  MX_CAN_Init();
 8000c74:	f7ff fcf6 	bl	8000664 <MX_CAN_Init>
  MX_TIM2_Init();
 8000c78:	f000 fa06 	bl	8001088 <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000c7c:	f000 f86b 	bl	8000d56 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
	initPedal(&hadc1); //Carga los offsets en la placa y arranca enganchada al adc1
 8000c80:	4804      	ldr	r0, [pc, #16]	@ (8000c94 <main+0x38>)
 8000c82:	f000 f87b 	bl	8000d7c <initPedal>
	initCAN(&hcan, &htim2); //Arranca el can enganchado a el timer 2
 8000c86:	4904      	ldr	r1, [pc, #16]	@ (8000c98 <main+0x3c>)
 8000c88:	4804      	ldr	r0, [pc, #16]	@ (8000c9c <main+0x40>)
 8000c8a:	f7ff fa5f 	bl	800014c <initCAN>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000c8e:	bf00      	nop
 8000c90:	e7fd      	b.n	8000c8e <main+0x32>
 8000c92:	bf00      	nop
 8000c94:	20000088 	.word	0x20000088
 8000c98:	20000564 	.word	0x20000564
 8000c9c:	200000fc 	.word	0x200000fc

08000ca0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b094      	sub	sp, #80	@ 0x50
 8000ca4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ca6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000caa:	2228      	movs	r2, #40	@ 0x28
 8000cac:	2100      	movs	r1, #0
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f003 fc3c 	bl	800452c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cb4:	f107 0314 	add.w	r3, r7, #20
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]
 8000cc0:	60da      	str	r2, [r3, #12]
 8000cc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cc4:	1d3b      	adds	r3, r7, #4
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
 8000cca:	605a      	str	r2, [r3, #4]
 8000ccc:	609a      	str	r2, [r3, #8]
 8000cce:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cd4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000cd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ce6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000cea:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000cec:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8000cf0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cf2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f002 fb86 	bl	8003408 <HAL_RCC_OscConfig>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000d02:	f000 f834 	bl	8000d6e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d06:	230f      	movs	r3, #15
 8000d08:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d12:	2300      	movs	r3, #0
 8000d14:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d1a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d1c:	f107 0314 	add.w	r3, r7, #20
 8000d20:	2101      	movs	r1, #1
 8000d22:	4618      	mov	r0, r3
 8000d24:	f002 fdf2 	bl	800390c <HAL_RCC_ClockConfig>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000d2e:	f000 f81e 	bl	8000d6e <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d32:	2302      	movs	r3, #2
 8000d34:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8000d36:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000d3a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d3c:	1d3b      	adds	r3, r7, #4
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f002 ff40 	bl	8003bc4 <HAL_RCCEx_PeriphCLKConfig>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000d4a:	f000 f810 	bl	8000d6e <Error_Handler>
  }
}
 8000d4e:	bf00      	nop
 8000d50:	3750      	adds	r7, #80	@ 0x50
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000d56:	b580      	push	{r7, lr}
 8000d58:	af00      	add	r7, sp, #0
  /* USB_LP_CAN1_RX0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	2014      	movs	r0, #20
 8000d60:	f001 fe97 	bl	8002a92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000d64:	2014      	movs	r0, #20
 8000d66:	f001 feb0 	bl	8002aca <HAL_NVIC_EnableIRQ>
}
 8000d6a:	bf00      	nop
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d72:	b672      	cpsid	i
}
 8000d74:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000d76:	bf00      	nop
 8000d78:	e7fd      	b.n	8000d76 <Error_Handler+0x8>
	...

08000d7c <initPedal>:
struct offsets_t offset;
#define MARGIN 80 //Points of adc
//Estructura de lectura para el ADC
uint32_t adcReadings[4]; //32*3, el adc saca 12 bits alineados a la derecha

void initPedal(ADC_HandleTypeDef* hadc) {
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
	adc = hadc;
 8000d84:	4a20      	ldr	r2, [pc, #128]	@ (8000e08 <initPedal+0x8c>)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6013      	str	r3, [r2, #0]
	ee_init(); //Inicializamos la flash (EEPROM virtual)
 8000d8a:	f7ff fd1f 	bl	80007cc <ee_init>

	//Carga de los offsets
	ee_read(0, sizeof(offset), (uint8_t*) &offset); //Lee de memoria el struct
 8000d8e:	4a1f      	ldr	r2, [pc, #124]	@ (8000e0c <initPedal+0x90>)
 8000d90:	2124      	movs	r1, #36	@ 0x24
 8000d92:	2000      	movs	r0, #0
 8000d94:	f7ff fd62 	bl	800085c <ee_read>

	//Check if there are offsets written in flash
	if (!offset.written) { // En un futuro lo ideal sería ver que los valores están en rangos lógicos
 8000d98:	4b1c      	ldr	r3, [pc, #112]	@ (8000e0c <initPedal+0x90>)
 8000d9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d126      	bne.n	8000df0 <initPedal+0x74>
		offset.high[0] = 4096; //Valores por defecto
 8000da2:	4b1a      	ldr	r3, [pc, #104]	@ (8000e0c <initPedal+0x90>)
 8000da4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000da8:	611a      	str	r2, [r3, #16]
		offset.high[1] = 4096;
 8000daa:	4b18      	ldr	r3, [pc, #96]	@ (8000e0c <initPedal+0x90>)
 8000dac:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000db0:	615a      	str	r2, [r3, #20]
		offset.high[2] = 4096;
 8000db2:	4b16      	ldr	r3, [pc, #88]	@ (8000e0c <initPedal+0x90>)
 8000db4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000db8:	619a      	str	r2, [r3, #24]
		offset.high[3] = 4096;
 8000dba:	4b14      	ldr	r3, [pc, #80]	@ (8000e0c <initPedal+0x90>)
 8000dbc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000dc0:	61da      	str	r2, [r3, #28]
		offset.low[0] = 0;
 8000dc2:	4b12      	ldr	r3, [pc, #72]	@ (8000e0c <initPedal+0x90>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
		offset.low[1] = 0;
 8000dc8:	4b10      	ldr	r3, [pc, #64]	@ (8000e0c <initPedal+0x90>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	605a      	str	r2, [r3, #4]
		offset.low[2] = 0;
 8000dce:	4b0f      	ldr	r3, [pc, #60]	@ (8000e0c <initPedal+0x90>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	609a      	str	r2, [r3, #8]
		offset.low[3] = 0;
 8000dd4:	4b0d      	ldr	r3, [pc, #52]	@ (8000e0c <initPedal+0x90>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	60da      	str	r2, [r3, #12]

		offset.written = 1; // Establece un byte en memoria que indica que la placa ha sido programada
 8000dda:	4b0c      	ldr	r3, [pc, #48]	@ (8000e0c <initPedal+0x90>)
 8000ddc:	2201      	movs	r2, #1
 8000dde:	f883 2020 	strb.w	r2, [r3, #32]
		ee_writeToRam(0, sizeof(offset), (uint8_t*) &offset);
 8000de2:	4a0a      	ldr	r2, [pc, #40]	@ (8000e0c <initPedal+0x90>)
 8000de4:	2124      	movs	r1, #36	@ 0x24
 8000de6:	2000      	movs	r0, #0
 8000de8:	f7ff feb4 	bl	8000b54 <ee_writeToRam>
		ee_commit();
 8000dec:	f7ff fed4 	bl	8000b98 <ee_commit>
	}

	//Inicializamos el DMA para que copie nuestros datos al buffer de lecturas
	//Hemos desactivado las interrupciones del mismo en el NVIC para que no obstruyan, solo nos interesa que anden disponibles
	HAL_ADC_Start_DMA(adc, adcReadings, 4); // Arrancamos el ADC en modo DMA
 8000df0:	4b05      	ldr	r3, [pc, #20]	@ (8000e08 <initPedal+0x8c>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	2204      	movs	r2, #4
 8000df6:	4906      	ldr	r1, [pc, #24]	@ (8000e10 <initPedal+0x94>)
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f000 fc0b 	bl	8001614 <HAL_ADC_Start_DMA>

}
 8000dfe:	bf00      	nop
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	20000524 	.word	0x20000524
 8000e0c:	20000530 	.word	0x20000530
 8000e10:	20000554 	.word	0x20000554

08000e14 <readSensors>:

void readSensors() {
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af02      	add	r7, sp, #8

	//Se leen y convierten las señales
	TeR.bpps.bpps = map(adcReadings[3], offset.low[3], offset.high[3], 0, 255); //Lectura del PRESUROMETRO
 8000e1a:	4b58      	ldr	r3, [pc, #352]	@ (8000f7c <readSensors+0x168>)
 8000e1c:	68db      	ldr	r3, [r3, #12]
 8000e1e:	4618      	mov	r0, r3
 8000e20:	4b57      	ldr	r3, [pc, #348]	@ (8000f80 <readSensors+0x16c>)
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	4619      	mov	r1, r3
 8000e26:	4b56      	ldr	r3, [pc, #344]	@ (8000f80 <readSensors+0x16c>)
 8000e28:	69db      	ldr	r3, [r3, #28]
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	23ff      	movs	r3, #255	@ 0xff
 8000e2e:	9300      	str	r3, [sp, #0]
 8000e30:	2300      	movs	r3, #0
 8000e32:	f7ff fb03 	bl	800043c <map>
 8000e36:	4603      	mov	r3, r0
 8000e38:	b2da      	uxtb	r2, r3
 8000e3a:	4b52      	ldr	r3, [pc, #328]	@ (8000f84 <readSensors+0x170>)
 8000e3c:	711a      	strb	r2, [r3, #4]
	TeR.apps.apps_2 = map(adcReadings[2], offset.low[2], offset.high[2], 0,
 8000e3e:	4b4f      	ldr	r3, [pc, #316]	@ (8000f7c <readSensors+0x168>)
 8000e40:	689b      	ldr	r3, [r3, #8]
 8000e42:	4618      	mov	r0, r3
 8000e44:	4b4e      	ldr	r3, [pc, #312]	@ (8000f80 <readSensors+0x16c>)
 8000e46:	689b      	ldr	r3, [r3, #8]
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4b4d      	ldr	r3, [pc, #308]	@ (8000f80 <readSensors+0x16c>)
 8000e4c:	699b      	ldr	r3, [r3, #24]
 8000e4e:	461a      	mov	r2, r3
 8000e50:	23ff      	movs	r3, #255	@ 0xff
 8000e52:	9300      	str	r3, [sp, #0]
 8000e54:	2300      	movs	r3, #0
 8000e56:	f7ff faf1 	bl	800043c <map>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	b2da      	uxtb	r2, r3
 8000e5e:	4b49      	ldr	r3, [pc, #292]	@ (8000f84 <readSensors+0x170>)
 8000e60:	705a      	strb	r2, [r3, #1]
			255); //Lectura de APPS1
	TeR.apps.apps_1 = map(adcReadings[1], offset.low[1], offset.high[1], 0,
 8000e62:	4b46      	ldr	r3, [pc, #280]	@ (8000f7c <readSensors+0x168>)
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	4618      	mov	r0, r3
 8000e68:	4b45      	ldr	r3, [pc, #276]	@ (8000f80 <readSensors+0x16c>)
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4b44      	ldr	r3, [pc, #272]	@ (8000f80 <readSensors+0x16c>)
 8000e70:	695b      	ldr	r3, [r3, #20]
 8000e72:	461a      	mov	r2, r3
 8000e74:	23ff      	movs	r3, #255	@ 0xff
 8000e76:	9300      	str	r3, [sp, #0]
 8000e78:	2300      	movs	r3, #0
 8000e7a:	f7ff fadf 	bl	800043c <map>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	b2da      	uxtb	r2, r3
 8000e82:	4b40      	ldr	r3, [pc, #256]	@ (8000f84 <readSensors+0x170>)
 8000e84:	701a      	strb	r2, [r3, #0]
			255); //Lectura del APPS2
	TeR.steer.angle = map(adcReadings[0], offset.low[0], offset.high[0],
 8000e86:	4b3d      	ldr	r3, [pc, #244]	@ (8000f7c <readSensors+0x168>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	4b3c      	ldr	r3, [pc, #240]	@ (8000f80 <readSensors+0x16c>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4619      	mov	r1, r3
 8000e92:	4b3b      	ldr	r3, [pc, #236]	@ (8000f80 <readSensors+0x16c>)
 8000e94:	691b      	ldr	r3, [r3, #16]
 8000e96:	461a      	mov	r2, r3
 8000e98:	f06f 031d 	mvn.w	r3, #29
 8000e9c:	9300      	str	r3, [sp, #0]
 8000e9e:	231e      	movs	r3, #30
 8000ea0:	f7ff facc 	bl	800043c <map>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	b21a      	sxth	r2, r3
 8000ea8:	4b36      	ldr	r3, [pc, #216]	@ (8000f84 <readSensors+0x170>)
 8000eaa:	80da      	strh	r2, [r3, #6]
	MAXWHEELANGLE, -MAXWHEELANGLE); //Lectura ANGULO de giro (Poner factor)



	//Check for implausability T 11.8.9 Desviacion de 10 puntos en %
	impDelta = !checkPersistance(&APPS_IMP,(abs(TeR.apps.apps_1 - TeR.apps.apps_2) < (255 * 0.1)),100);//Comprueba que la diferencia entre aceleradores es menor que el 10% activamente, solo falla si esta se da por más de 100ms
 8000eac:	4b35      	ldr	r3, [pc, #212]	@ (8000f84 <readSensors+0x170>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	4b34      	ldr	r3, [pc, #208]	@ (8000f84 <readSensors+0x170>)
 8000eb4:	785b      	ldrb	r3, [r3, #1]
 8000eb6:	1ad3      	subs	r3, r2, r3
 8000eb8:	f113 0f19 	cmn.w	r3, #25
 8000ebc:	db09      	blt.n	8000ed2 <readSensors+0xbe>
 8000ebe:	4b31      	ldr	r3, [pc, #196]	@ (8000f84 <readSensors+0x170>)
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	4b2f      	ldr	r3, [pc, #188]	@ (8000f84 <readSensors+0x170>)
 8000ec6:	785b      	ldrb	r3, [r3, #1]
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	2b19      	cmp	r3, #25
 8000ecc:	dc01      	bgt.n	8000ed2 <readSensors+0xbe>
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e000      	b.n	8000ed4 <readSensors+0xc0>
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	2264      	movs	r2, #100	@ 0x64
 8000ed8:	4619      	mov	r1, r3
 8000eda:	482b      	ldr	r0, [pc, #172]	@ (8000f88 <readSensors+0x174>)
 8000edc:	f7ff fa84 	bl	80003e8 <checkPersistance>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	bf0c      	ite	eq
 8000ee6:	2301      	moveq	r3, #1
 8000ee8:	2300      	movne	r3, #0
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	461a      	mov	r2, r3
 8000eee:	4b27      	ldr	r3, [pc, #156]	@ (8000f8c <readSensors+0x178>)
 8000ef0:	701a      	strb	r2, [r3, #0]
	//Check if all signals are in range
	impRange = ((adcReadings[1] < (offset.low[1] -MARGIN)) || (adcReadings[2] < (offset.low[2]-MARGIN)) || (adcReadings[3] < (offset.low[3]-MARGIN)));
 8000ef2:	4b22      	ldr	r3, [pc, #136]	@ (8000f7c <readSensors+0x168>)
 8000ef4:	685a      	ldr	r2, [r3, #4]
 8000ef6:	4b22      	ldr	r3, [pc, #136]	@ (8000f80 <readSensors+0x16c>)
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	3b50      	subs	r3, #80	@ 0x50
 8000efc:	429a      	cmp	r2, r3
 8000efe:	d30d      	bcc.n	8000f1c <readSensors+0x108>
 8000f00:	4b1e      	ldr	r3, [pc, #120]	@ (8000f7c <readSensors+0x168>)
 8000f02:	689a      	ldr	r2, [r3, #8]
 8000f04:	4b1e      	ldr	r3, [pc, #120]	@ (8000f80 <readSensors+0x16c>)
 8000f06:	689b      	ldr	r3, [r3, #8]
 8000f08:	3b50      	subs	r3, #80	@ 0x50
 8000f0a:	429a      	cmp	r2, r3
 8000f0c:	d306      	bcc.n	8000f1c <readSensors+0x108>
 8000f0e:	4b1b      	ldr	r3, [pc, #108]	@ (8000f7c <readSensors+0x168>)
 8000f10:	68da      	ldr	r2, [r3, #12]
 8000f12:	4b1b      	ldr	r3, [pc, #108]	@ (8000f80 <readSensors+0x16c>)
 8000f14:	68db      	ldr	r3, [r3, #12]
 8000f16:	3b50      	subs	r3, #80	@ 0x50
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d201      	bcs.n	8000f20 <readSensors+0x10c>
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	e000      	b.n	8000f22 <readSensors+0x10e>
 8000f20:	2300      	movs	r3, #0
 8000f22:	b2da      	uxtb	r2, r3
 8000f24:	4b1a      	ldr	r3, [pc, #104]	@ (8000f90 <readSensors+0x17c>)
 8000f26:	701a      	strb	r2, [r3, #0]


	TeR.apps.imp_flag = (impDelta || impRange);
 8000f28:	4b18      	ldr	r3, [pc, #96]	@ (8000f8c <readSensors+0x178>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d103      	bne.n	8000f38 <readSensors+0x124>
 8000f30:	4b17      	ldr	r3, [pc, #92]	@ (8000f90 <readSensors+0x17c>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <readSensors+0x128>
 8000f38:	2301      	movs	r3, #1
 8000f3a:	e000      	b.n	8000f3e <readSensors+0x12a>
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	b2da      	uxtb	r2, r3
 8000f40:	4b10      	ldr	r3, [pc, #64]	@ (8000f84 <readSensors+0x170>)
 8000f42:	70da      	strb	r2, [r3, #3]
	//Computa la media
	TeR.apps.apps_av = TeR.apps.imp_flag ? 0 :(TeR.apps.apps_2 + TeR.apps.apps_1) / 2;
 8000f44:	4b0f      	ldr	r3, [pc, #60]	@ (8000f84 <readSensors+0x170>)
 8000f46:	78db      	ldrb	r3, [r3, #3]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d10a      	bne.n	8000f62 <readSensors+0x14e>
 8000f4c:	4b0d      	ldr	r3, [pc, #52]	@ (8000f84 <readSensors+0x170>)
 8000f4e:	785b      	ldrb	r3, [r3, #1]
 8000f50:	461a      	mov	r2, r3
 8000f52:	4b0c      	ldr	r3, [pc, #48]	@ (8000f84 <readSensors+0x170>)
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	4413      	add	r3, r2
 8000f58:	0fda      	lsrs	r2, r3, #31
 8000f5a:	4413      	add	r3, r2
 8000f5c:	105b      	asrs	r3, r3, #1
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	e000      	b.n	8000f64 <readSensors+0x150>
 8000f62:	2300      	movs	r3, #0
 8000f64:	4a07      	ldr	r2, [pc, #28]	@ (8000f84 <readSensors+0x170>)
 8000f66:	7093      	strb	r3, [r2, #2]


	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, TeR.apps.imp_flag); //Actualizamos el estado del led
 8000f68:	4b06      	ldr	r3, [pc, #24]	@ (8000f84 <readSensors+0x170>)
 8000f6a:	78db      	ldrb	r3, [r3, #3]
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	2108      	movs	r1, #8
 8000f70:	4808      	ldr	r0, [pc, #32]	@ (8000f94 <readSensors+0x180>)
 8000f72:	f002 fa31 	bl	80033d8 <HAL_GPIO_WritePin>
}
 8000f76:	bf00      	nop
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	20000554 	.word	0x20000554
 8000f80:	20000530 	.word	0x20000530
 8000f84:	20000080 	.word	0x20000080
 8000f88:	20000528 	.word	0x20000528
 8000f8c:	2000052d 	.word	0x2000052d
 8000f90:	2000052c 	.word	0x2000052c
 8000f94:	40010800 	.word	0x40010800

08000f98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f9e:	4b15      	ldr	r3, [pc, #84]	@ (8000ff4 <HAL_MspInit+0x5c>)
 8000fa0:	699b      	ldr	r3, [r3, #24]
 8000fa2:	4a14      	ldr	r2, [pc, #80]	@ (8000ff4 <HAL_MspInit+0x5c>)
 8000fa4:	f043 0301 	orr.w	r3, r3, #1
 8000fa8:	6193      	str	r3, [r2, #24]
 8000faa:	4b12      	ldr	r3, [pc, #72]	@ (8000ff4 <HAL_MspInit+0x5c>)
 8000fac:	699b      	ldr	r3, [r3, #24]
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	60bb      	str	r3, [r7, #8]
 8000fb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fb6:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff4 <HAL_MspInit+0x5c>)
 8000fb8:	69db      	ldr	r3, [r3, #28]
 8000fba:	4a0e      	ldr	r2, [pc, #56]	@ (8000ff4 <HAL_MspInit+0x5c>)
 8000fbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fc0:	61d3      	str	r3, [r2, #28]
 8000fc2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff4 <HAL_MspInit+0x5c>)
 8000fc4:	69db      	ldr	r3, [r3, #28]
 8000fc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fca:	607b      	str	r3, [r7, #4]
 8000fcc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000fce:	4b0a      	ldr	r3, [pc, #40]	@ (8000ff8 <HAL_MspInit+0x60>)
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	4a04      	ldr	r2, [pc, #16]	@ (8000ff8 <HAL_MspInit+0x60>)
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fea:	bf00      	nop
 8000fec:	3714      	adds	r7, #20
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bc80      	pop	{r7}
 8000ff2:	4770      	bx	lr
 8000ff4:	40021000 	.word	0x40021000
 8000ff8:	40010000 	.word	0x40010000

08000ffc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001000:	bf00      	nop
 8001002:	e7fd      	b.n	8001000 <NMI_Handler+0x4>

08001004 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001008:	bf00      	nop
 800100a:	e7fd      	b.n	8001008 <HardFault_Handler+0x4>

0800100c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001010:	bf00      	nop
 8001012:	e7fd      	b.n	8001010 <MemManage_Handler+0x4>

08001014 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001018:	bf00      	nop
 800101a:	e7fd      	b.n	8001018 <BusFault_Handler+0x4>

0800101c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001020:	bf00      	nop
 8001022:	e7fd      	b.n	8001020 <UsageFault_Handler+0x4>

08001024 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001028:	bf00      	nop
 800102a:	46bd      	mov	sp, r7
 800102c:	bc80      	pop	{r7}
 800102e:	4770      	bx	lr

08001030 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	bc80      	pop	{r7}
 800103a:	4770      	bx	lr

0800103c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	bc80      	pop	{r7}
 8001046:	4770      	bx	lr

08001048 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800104c:	f000 f9ee 	bl	800142c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001050:	bf00      	nop
 8001052:	bd80      	pop	{r7, pc}

08001054 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001058:	4802      	ldr	r0, [pc, #8]	@ (8001064 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800105a:	f001 fa1f 	bl	800249c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	200000fc 	.word	0x200000fc

08001068 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800106c:	4802      	ldr	r0, [pc, #8]	@ (8001078 <TIM2_IRQHandler+0x10>)
 800106e:	f002 ff01 	bl	8003e74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	20000564 	.word	0x20000564

0800107c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001080:	bf00      	nop
 8001082:	46bd      	mov	sp, r7
 8001084:	bc80      	pop	{r7}
 8001086:	4770      	bx	lr

08001088 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b086      	sub	sp, #24
 800108c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800108e:	f107 0308 	add.w	r3, r7, #8
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	605a      	str	r2, [r3, #4]
 8001098:	609a      	str	r2, [r3, #8]
 800109a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800109c:	463b      	mov	r3, r7
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010a4:	4b1d      	ldr	r3, [pc, #116]	@ (800111c <MX_TIM2_Init+0x94>)
 80010a6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010aa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80010ac:	4b1b      	ldr	r3, [pc, #108]	@ (800111c <MX_TIM2_Init+0x94>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010b2:	4b1a      	ldr	r3, [pc, #104]	@ (800111c <MX_TIM2_Init+0x94>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 63999;
 80010b8:	4b18      	ldr	r3, [pc, #96]	@ (800111c <MX_TIM2_Init+0x94>)
 80010ba:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 80010be:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010c0:	4b16      	ldr	r3, [pc, #88]	@ (800111c <MX_TIM2_Init+0x94>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010c6:	4b15      	ldr	r3, [pc, #84]	@ (800111c <MX_TIM2_Init+0x94>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010cc:	4813      	ldr	r0, [pc, #76]	@ (800111c <MX_TIM2_Init+0x94>)
 80010ce:	f002 fe2f 	bl	8003d30 <HAL_TIM_Base_Init>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80010d8:	f7ff fe49 	bl	8000d6e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010e2:	f107 0308 	add.w	r3, r7, #8
 80010e6:	4619      	mov	r1, r3
 80010e8:	480c      	ldr	r0, [pc, #48]	@ (800111c <MX_TIM2_Init+0x94>)
 80010ea:	f002 ffcb 	bl	8004084 <HAL_TIM_ConfigClockSource>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80010f4:	f7ff fe3b 	bl	8000d6e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010f8:	2300      	movs	r3, #0
 80010fa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010fc:	2300      	movs	r3, #0
 80010fe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001100:	463b      	mov	r3, r7
 8001102:	4619      	mov	r1, r3
 8001104:	4805      	ldr	r0, [pc, #20]	@ (800111c <MX_TIM2_Init+0x94>)
 8001106:	f003 f9a1 	bl	800444c <HAL_TIMEx_MasterConfigSynchronization>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001110:	f7ff fe2d 	bl	8000d6e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001114:	bf00      	nop
 8001116:	3718      	adds	r7, #24
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	20000564 	.word	0x20000564

08001120 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001130:	d113      	bne.n	800115a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001132:	4b0c      	ldr	r3, [pc, #48]	@ (8001164 <HAL_TIM_Base_MspInit+0x44>)
 8001134:	69db      	ldr	r3, [r3, #28]
 8001136:	4a0b      	ldr	r2, [pc, #44]	@ (8001164 <HAL_TIM_Base_MspInit+0x44>)
 8001138:	f043 0301 	orr.w	r3, r3, #1
 800113c:	61d3      	str	r3, [r2, #28]
 800113e:	4b09      	ldr	r3, [pc, #36]	@ (8001164 <HAL_TIM_Base_MspInit+0x44>)
 8001140:	69db      	ldr	r3, [r3, #28]
 8001142:	f003 0301 	and.w	r3, r3, #1
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800114a:	2200      	movs	r2, #0
 800114c:	2100      	movs	r1, #0
 800114e:	201c      	movs	r0, #28
 8001150:	f001 fc9f 	bl	8002a92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001154:	201c      	movs	r0, #28
 8001156:	f001 fcb8 	bl	8002aca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800115a:	bf00      	nop
 800115c:	3710      	adds	r7, #16
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40021000 	.word	0x40021000

08001168 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001168:	480c      	ldr	r0, [pc, #48]	@ (800119c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800116a:	490d      	ldr	r1, [pc, #52]	@ (80011a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800116c:	4a0d      	ldr	r2, [pc, #52]	@ (80011a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800116e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001170:	e002      	b.n	8001178 <LoopCopyDataInit>

08001172 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001172:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001174:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001176:	3304      	adds	r3, #4

08001178 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001178:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800117a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800117c:	d3f9      	bcc.n	8001172 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800117e:	4a0a      	ldr	r2, [pc, #40]	@ (80011a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001180:	4c0a      	ldr	r4, [pc, #40]	@ (80011ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8001182:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001184:	e001      	b.n	800118a <LoopFillZerobss>

08001186 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001186:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001188:	3204      	adds	r2, #4

0800118a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800118a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800118c:	d3fb      	bcc.n	8001186 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800118e:	f7ff ff75 	bl	800107c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001192:	f003 f9d3 	bl	800453c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001196:	f7ff fd61 	bl	8000c5c <main>
  bx lr
 800119a:	4770      	bx	lr
  ldr r0, =_sdata
 800119c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011a0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80011a4:	080045e4 	.word	0x080045e4
  ldr r2, =_sbss
 80011a8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80011ac:	200005d0 	.word	0x200005d0

080011b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011b0:	e7fe      	b.n	80011b0 <ADC1_2_IRQHandler>

080011b2 <pack_left_shift_u8>:

static inline uint8_t pack_left_shift_u8(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 80011b2:	b480      	push	{r7}
 80011b4:	b083      	sub	sp, #12
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	4603      	mov	r3, r0
 80011ba:	71fb      	strb	r3, [r7, #7]
 80011bc:	460b      	mov	r3, r1
 80011be:	71bb      	strb	r3, [r7, #6]
 80011c0:	4613      	mov	r3, r2
 80011c2:	717b      	strb	r3, [r7, #5]
    return (uint8_t)((uint8_t)(value << shift) & mask);
 80011c4:	79fa      	ldrb	r2, [r7, #7]
 80011c6:	79bb      	ldrb	r3, [r7, #6]
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	b2da      	uxtb	r2, r3
 80011ce:	797b      	ldrb	r3, [r7, #5]
 80011d0:	4013      	ands	r3, r2
 80011d2:	b2db      	uxtb	r3, r3
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	bc80      	pop	{r7}
 80011dc:	4770      	bx	lr

080011de <pack_left_shift_u16>:

static inline uint8_t pack_left_shift_u16(
    uint16_t value,
    uint8_t shift,
    uint8_t mask)
{
 80011de:	b480      	push	{r7}
 80011e0:	b083      	sub	sp, #12
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	4603      	mov	r3, r0
 80011e6:	80fb      	strh	r3, [r7, #6]
 80011e8:	460b      	mov	r3, r1
 80011ea:	717b      	strb	r3, [r7, #5]
 80011ec:	4613      	mov	r3, r2
 80011ee:	713b      	strb	r3, [r7, #4]
    return (uint8_t)((uint8_t)(value << shift) & mask);
 80011f0:	88fa      	ldrh	r2, [r7, #6]
 80011f2:	797b      	ldrb	r3, [r7, #5]
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	b2da      	uxtb	r2, r3
 80011fa:	793b      	ldrb	r3, [r7, #4]
 80011fc:	4013      	ands	r3, r2
 80011fe:	b2db      	uxtb	r3, r3
}
 8001200:	4618      	mov	r0, r3
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	bc80      	pop	{r7}
 8001208:	4770      	bx	lr

0800120a <pack_right_shift_u16>:

static inline uint8_t pack_right_shift_u16(
    uint16_t value,
    uint8_t shift,
    uint8_t mask)
{
 800120a:	b480      	push	{r7}
 800120c:	b083      	sub	sp, #12
 800120e:	af00      	add	r7, sp, #0
 8001210:	4603      	mov	r3, r0
 8001212:	80fb      	strh	r3, [r7, #6]
 8001214:	460b      	mov	r3, r1
 8001216:	717b      	strb	r3, [r7, #5]
 8001218:	4613      	mov	r3, r2
 800121a:	713b      	strb	r3, [r7, #4]
    return (uint8_t)((uint8_t)(value >> shift) & mask);
 800121c:	88fa      	ldrh	r2, [r7, #6]
 800121e:	797b      	ldrb	r3, [r7, #5]
 8001220:	fa42 f303 	asr.w	r3, r2, r3
 8001224:	b2da      	uxtb	r2, r3
 8001226:	793b      	ldrb	r3, [r7, #4]
 8001228:	4013      	ands	r3, r2
 800122a:	b2db      	uxtb	r3, r3
}
 800122c:	4618      	mov	r0, r3
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	bc80      	pop	{r7}
 8001234:	4770      	bx	lr

08001236 <ter_apps_pack>:

int ter_apps_pack(
    uint8_t *dst_p,
    const struct ter_apps_t *src_p,
    size_t size)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	b084      	sub	sp, #16
 800123a:	af00      	add	r7, sp, #0
 800123c:	60f8      	str	r0, [r7, #12]
 800123e:	60b9      	str	r1, [r7, #8]
 8001240:	607a      	str	r2, [r7, #4]
    if (size < 8u) {
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2b07      	cmp	r3, #7
 8001246:	d802      	bhi.n	800124e <ter_apps_pack+0x18>
        return (-EINVAL);
 8001248:	f06f 0315 	mvn.w	r3, #21
 800124c:	e047      	b.n	80012de <ter_apps_pack+0xa8>
    }

    memset(&dst_p[0], 0, 8);
 800124e:	2208      	movs	r2, #8
 8001250:	2100      	movs	r1, #0
 8001252:	68f8      	ldr	r0, [r7, #12]
 8001254:	f003 f96a 	bl	800452c <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->apps_1, 0u, 0xffu);
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	22ff      	movs	r2, #255	@ 0xff
 800125e:	2100      	movs	r1, #0
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff ffa6 	bl	80011b2 <pack_left_shift_u8>
 8001266:	4603      	mov	r3, r0
 8001268:	461a      	mov	r2, r3
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	4313      	orrs	r3, r2
 8001270:	b2da      	uxtb	r2, r3
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->apps_2, 0u, 0xffu);
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	785b      	ldrb	r3, [r3, #1]
 800127a:	22ff      	movs	r2, #255	@ 0xff
 800127c:	2100      	movs	r1, #0
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff ff97 	bl	80011b2 <pack_left_shift_u8>
 8001284:	4603      	mov	r3, r0
 8001286:	4619      	mov	r1, r3
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	3301      	adds	r3, #1
 800128c:	781a      	ldrb	r2, [r3, #0]
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	3301      	adds	r3, #1
 8001292:	430a      	orrs	r2, r1
 8001294:	b2d2      	uxtb	r2, r2
 8001296:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_left_shift_u8(src_p->apps_av, 0u, 0xffu);
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	789b      	ldrb	r3, [r3, #2]
 800129c:	22ff      	movs	r2, #255	@ 0xff
 800129e:	2100      	movs	r1, #0
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff ff86 	bl	80011b2 <pack_left_shift_u8>
 80012a6:	4603      	mov	r3, r0
 80012a8:	4619      	mov	r1, r3
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	3302      	adds	r3, #2
 80012ae:	781a      	ldrb	r2, [r3, #0]
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	3302      	adds	r3, #2
 80012b4:	430a      	orrs	r2, r1
 80012b6:	b2d2      	uxtb	r2, r2
 80012b8:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_left_shift_u8(src_p->imp_flag, 0u, 0xffu);
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	78db      	ldrb	r3, [r3, #3]
 80012be:	22ff      	movs	r2, #255	@ 0xff
 80012c0:	2100      	movs	r1, #0
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff ff75 	bl	80011b2 <pack_left_shift_u8>
 80012c8:	4603      	mov	r3, r0
 80012ca:	4619      	mov	r1, r3
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	3303      	adds	r3, #3
 80012d0:	781a      	ldrb	r2, [r3, #0]
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	3303      	adds	r3, #3
 80012d6:	430a      	orrs	r2, r1
 80012d8:	b2d2      	uxtb	r2, r2
 80012da:	701a      	strb	r2, [r3, #0]

    return (8);
 80012dc:	2308      	movs	r3, #8
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3710      	adds	r7, #16
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}

080012e6 <ter_bpps_pack>:

int ter_bpps_pack(
    uint8_t *dst_p,
    const struct ter_bpps_t *src_p,
    size_t size)
{
 80012e6:	b580      	push	{r7, lr}
 80012e8:	b084      	sub	sp, #16
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	60f8      	str	r0, [r7, #12]
 80012ee:	60b9      	str	r1, [r7, #8]
 80012f0:	607a      	str	r2, [r7, #4]
    if (size < 1u) {
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d102      	bne.n	80012fe <ter_bpps_pack+0x18>
        return (-EINVAL);
 80012f8:	f06f 0315 	mvn.w	r3, #21
 80012fc:	e014      	b.n	8001328 <ter_bpps_pack+0x42>
    }

    memset(&dst_p[0], 0, 1);
 80012fe:	2201      	movs	r2, #1
 8001300:	2100      	movs	r1, #0
 8001302:	68f8      	ldr	r0, [r7, #12]
 8001304:	f003 f912 	bl	800452c <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->bpps, 0u, 0xffu);
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	22ff      	movs	r2, #255	@ 0xff
 800130e:	2100      	movs	r1, #0
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff ff4e 	bl	80011b2 <pack_left_shift_u8>
 8001316:	4603      	mov	r3, r0
 8001318:	461a      	mov	r2, r3
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	4313      	orrs	r3, r2
 8001320:	b2da      	uxtb	r2, r3
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	701a      	strb	r2, [r3, #0]

    return (1);
 8001326:	2301      	movs	r3, #1
}
 8001328:	4618      	mov	r0, r3
 800132a:	3710      	adds	r7, #16
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}

08001330 <ter_steer_pack>:

int ter_steer_pack(
    uint8_t *dst_p,
    const struct ter_steer_t *src_p,
    size_t size)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b086      	sub	sp, #24
 8001334:	af00      	add	r7, sp, #0
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	607a      	str	r2, [r7, #4]
    uint16_t angle;

    if (size < 8u) {
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2b07      	cmp	r3, #7
 8001340:	d802      	bhi.n	8001348 <ter_steer_pack+0x18>
        return (-EINVAL);
 8001342:	f06f 0315 	mvn.w	r3, #21
 8001346:	e027      	b.n	8001398 <ter_steer_pack+0x68>
    }

    memset(&dst_p[0], 0, 8);
 8001348:	2208      	movs	r2, #8
 800134a:	2100      	movs	r1, #0
 800134c:	68f8      	ldr	r0, [r7, #12]
 800134e:	f003 f8ed 	bl	800452c <memset>

    angle = (uint16_t)src_p->angle;
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001358:	82fb      	strh	r3, [r7, #22]
    dst_p[0] |= pack_left_shift_u16(angle, 0u, 0xffu);
 800135a:	8afb      	ldrh	r3, [r7, #22]
 800135c:	22ff      	movs	r2, #255	@ 0xff
 800135e:	2100      	movs	r1, #0
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff ff3c 	bl	80011de <pack_left_shift_u16>
 8001366:	4603      	mov	r3, r0
 8001368:	461a      	mov	r2, r3
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	4313      	orrs	r3, r2
 8001370:	b2da      	uxtb	r2, r3
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_right_shift_u16(angle, 8u, 0xffu);
 8001376:	8afb      	ldrh	r3, [r7, #22]
 8001378:	22ff      	movs	r2, #255	@ 0xff
 800137a:	2108      	movs	r1, #8
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff ff44 	bl	800120a <pack_right_shift_u16>
 8001382:	4603      	mov	r3, r0
 8001384:	4619      	mov	r1, r3
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	3301      	adds	r3, #1
 800138a:	781a      	ldrb	r2, [r3, #0]
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	3301      	adds	r3, #1
 8001390:	430a      	orrs	r2, r1
 8001392:	b2d2      	uxtb	r2, r2
 8001394:	701a      	strb	r2, [r3, #0]

    return (8);
 8001396:	2308      	movs	r3, #8
}
 8001398:	4618      	mov	r0, r3
 800139a:	3718      	adds	r7, #24
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013a4:	4b08      	ldr	r3, [pc, #32]	@ (80013c8 <HAL_Init+0x28>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a07      	ldr	r2, [pc, #28]	@ (80013c8 <HAL_Init+0x28>)
 80013aa:	f043 0310 	orr.w	r3, r3, #16
 80013ae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013b0:	2003      	movs	r0, #3
 80013b2:	f001 fb63 	bl	8002a7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013b6:	200f      	movs	r0, #15
 80013b8:	f000 f808 	bl	80013cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013bc:	f7ff fdec 	bl	8000f98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013c0:	2300      	movs	r3, #0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	40022000 	.word	0x40022000

080013cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013d4:	4b12      	ldr	r3, [pc, #72]	@ (8001420 <HAL_InitTick+0x54>)
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	4b12      	ldr	r3, [pc, #72]	@ (8001424 <HAL_InitTick+0x58>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	4619      	mov	r1, r3
 80013de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80013e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ea:	4618      	mov	r0, r3
 80013ec:	f001 fb7b 	bl	8002ae6 <HAL_SYSTICK_Config>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e00e      	b.n	8001418 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2b0f      	cmp	r3, #15
 80013fe:	d80a      	bhi.n	8001416 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001400:	2200      	movs	r2, #0
 8001402:	6879      	ldr	r1, [r7, #4]
 8001404:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001408:	f001 fb43 	bl	8002a92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800140c:	4a06      	ldr	r2, [pc, #24]	@ (8001428 <HAL_InitTick+0x5c>)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001412:	2300      	movs	r3, #0
 8001414:	e000      	b.n	8001418 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
}
 8001418:	4618      	mov	r0, r3
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	20000000 	.word	0x20000000
 8001424:	20000008 	.word	0x20000008
 8001428:	20000004 	.word	0x20000004

0800142c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001430:	4b05      	ldr	r3, [pc, #20]	@ (8001448 <HAL_IncTick+0x1c>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	461a      	mov	r2, r3
 8001436:	4b05      	ldr	r3, [pc, #20]	@ (800144c <HAL_IncTick+0x20>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4413      	add	r3, r2
 800143c:	4a03      	ldr	r2, [pc, #12]	@ (800144c <HAL_IncTick+0x20>)
 800143e:	6013      	str	r3, [r2, #0]
}
 8001440:	bf00      	nop
 8001442:	46bd      	mov	sp, r7
 8001444:	bc80      	pop	{r7}
 8001446:	4770      	bx	lr
 8001448:	20000008 	.word	0x20000008
 800144c:	200005ac 	.word	0x200005ac

08001450 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  return uwTick;
 8001454:	4b02      	ldr	r3, [pc, #8]	@ (8001460 <HAL_GetTick+0x10>)
 8001456:	681b      	ldr	r3, [r3, #0]
}
 8001458:	4618      	mov	r0, r3
 800145a:	46bd      	mov	sp, r7
 800145c:	bc80      	pop	{r7}
 800145e:	4770      	bx	lr
 8001460:	200005ac 	.word	0x200005ac

08001464 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b086      	sub	sp, #24
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800146c:	2300      	movs	r3, #0
 800146e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001470:	2300      	movs	r3, #0
 8001472:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001474:	2300      	movs	r3, #0
 8001476:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001478:	2300      	movs	r3, #0
 800147a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d101      	bne.n	8001486 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e0be      	b.n	8001604 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001490:	2b00      	cmp	r3, #0
 8001492:	d109      	bne.n	80014a8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2200      	movs	r2, #0
 8001498:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2200      	movs	r2, #0
 800149e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f7ff f85e 	bl	8000564 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f000 faff 	bl	8001aac <ADC_ConversionStop_Disable>
 80014ae:	4603      	mov	r3, r0
 80014b0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014b6:	f003 0310 	and.w	r3, r3, #16
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	f040 8099 	bne.w	80015f2 <HAL_ADC_Init+0x18e>
 80014c0:	7dfb      	ldrb	r3, [r7, #23]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	f040 8095 	bne.w	80015f2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014cc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80014d0:	f023 0302 	bic.w	r3, r3, #2
 80014d4:	f043 0202 	orr.w	r2, r3, #2
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80014e4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	7b1b      	ldrb	r3, [r3, #12]
 80014ea:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80014ec:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80014ee:	68ba      	ldr	r2, [r7, #8]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80014fc:	d003      	beq.n	8001506 <HAL_ADC_Init+0xa2>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	2b01      	cmp	r3, #1
 8001504:	d102      	bne.n	800150c <HAL_ADC_Init+0xa8>
 8001506:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800150a:	e000      	b.n	800150e <HAL_ADC_Init+0xaa>
 800150c:	2300      	movs	r3, #0
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	4313      	orrs	r3, r2
 8001512:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	7d1b      	ldrb	r3, [r3, #20]
 8001518:	2b01      	cmp	r3, #1
 800151a:	d119      	bne.n	8001550 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	7b1b      	ldrb	r3, [r3, #12]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d109      	bne.n	8001538 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	699b      	ldr	r3, [r3, #24]
 8001528:	3b01      	subs	r3, #1
 800152a:	035a      	lsls	r2, r3, #13
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	4313      	orrs	r3, r2
 8001530:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001534:	613b      	str	r3, [r7, #16]
 8001536:	e00b      	b.n	8001550 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800153c:	f043 0220 	orr.w	r2, r3, #32
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001548:	f043 0201 	orr.w	r2, r3, #1
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	430a      	orrs	r2, r1
 8001562:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	689a      	ldr	r2, [r3, #8]
 800156a:	4b28      	ldr	r3, [pc, #160]	@ (800160c <HAL_ADC_Init+0x1a8>)
 800156c:	4013      	ands	r3, r2
 800156e:	687a      	ldr	r2, [r7, #4]
 8001570:	6812      	ldr	r2, [r2, #0]
 8001572:	68b9      	ldr	r1, [r7, #8]
 8001574:	430b      	orrs	r3, r1
 8001576:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001580:	d003      	beq.n	800158a <HAL_ADC_Init+0x126>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	2b01      	cmp	r3, #1
 8001588:	d104      	bne.n	8001594 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	691b      	ldr	r3, [r3, #16]
 800158e:	3b01      	subs	r3, #1
 8001590:	051b      	lsls	r3, r3, #20
 8001592:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800159a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	68fa      	ldr	r2, [r7, #12]
 80015a4:	430a      	orrs	r2, r1
 80015a6:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	689a      	ldr	r2, [r3, #8]
 80015ae:	4b18      	ldr	r3, [pc, #96]	@ (8001610 <HAL_ADC_Init+0x1ac>)
 80015b0:	4013      	ands	r3, r2
 80015b2:	68ba      	ldr	r2, [r7, #8]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d10b      	bne.n	80015d0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2200      	movs	r2, #0
 80015bc:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015c2:	f023 0303 	bic.w	r3, r3, #3
 80015c6:	f043 0201 	orr.w	r2, r3, #1
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80015ce:	e018      	b.n	8001602 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015d4:	f023 0312 	bic.w	r3, r3, #18
 80015d8:	f043 0210 	orr.w	r2, r3, #16
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015e4:	f043 0201 	orr.w	r2, r3, #1
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80015f0:	e007      	b.n	8001602 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015f6:	f043 0210 	orr.w	r2, r3, #16
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001602:	7dfb      	ldrb	r3, [r7, #23]
}
 8001604:	4618      	mov	r0, r3
 8001606:	3718      	adds	r7, #24
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	ffe1f7fd 	.word	0xffe1f7fd
 8001610:	ff1f0efe 	.word	0xff1f0efe

08001614 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b086      	sub	sp, #24
 8001618:	af00      	add	r7, sp, #0
 800161a:	60f8      	str	r0, [r7, #12]
 800161c:	60b9      	str	r1, [r7, #8]
 800161e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001620:	2300      	movs	r3, #0
 8001622:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a64      	ldr	r2, [pc, #400]	@ (80017bc <HAL_ADC_Start_DMA+0x1a8>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d004      	beq.n	8001638 <HAL_ADC_Start_DMA+0x24>
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a63      	ldr	r2, [pc, #396]	@ (80017c0 <HAL_ADC_Start_DMA+0x1ac>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d106      	bne.n	8001646 <HAL_ADC_Start_DMA+0x32>
 8001638:	4b60      	ldr	r3, [pc, #384]	@ (80017bc <HAL_ADC_Start_DMA+0x1a8>)
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001640:	2b00      	cmp	r3, #0
 8001642:	f040 80b3 	bne.w	80017ac <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800164c:	2b01      	cmp	r3, #1
 800164e:	d101      	bne.n	8001654 <HAL_ADC_Start_DMA+0x40>
 8001650:	2302      	movs	r3, #2
 8001652:	e0ae      	b.n	80017b2 <HAL_ADC_Start_DMA+0x19e>
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	2201      	movs	r2, #1
 8001658:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800165c:	68f8      	ldr	r0, [r7, #12]
 800165e:	f000 f9cb 	bl	80019f8 <ADC_Enable>
 8001662:	4603      	mov	r3, r0
 8001664:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001666:	7dfb      	ldrb	r3, [r7, #23]
 8001668:	2b00      	cmp	r3, #0
 800166a:	f040 809a 	bne.w	80017a2 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001672:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001676:	f023 0301 	bic.w	r3, r3, #1
 800167a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a4e      	ldr	r2, [pc, #312]	@ (80017c0 <HAL_ADC_Start_DMA+0x1ac>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d105      	bne.n	8001698 <HAL_ADC_Start_DMA+0x84>
 800168c:	4b4b      	ldr	r3, [pc, #300]	@ (80017bc <HAL_ADC_Start_DMA+0x1a8>)
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001694:	2b00      	cmp	r3, #0
 8001696:	d115      	bne.n	80016c4 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800169c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d026      	beq.n	8001700 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016b6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80016ba:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80016c2:	e01d      	b.n	8001700 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016c8:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a39      	ldr	r2, [pc, #228]	@ (80017bc <HAL_ADC_Start_DMA+0x1a8>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d004      	beq.n	80016e4 <HAL_ADC_Start_DMA+0xd0>
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a38      	ldr	r2, [pc, #224]	@ (80017c0 <HAL_ADC_Start_DMA+0x1ac>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d10d      	bne.n	8001700 <HAL_ADC_Start_DMA+0xec>
 80016e4:	4b35      	ldr	r3, [pc, #212]	@ (80017bc <HAL_ADC_Start_DMA+0x1a8>)
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d007      	beq.n	8001700 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016f4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80016f8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001704:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001708:	2b00      	cmp	r3, #0
 800170a:	d006      	beq.n	800171a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001710:	f023 0206 	bic.w	r2, r3, #6
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001718:	e002      	b.n	8001720 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	2200      	movs	r2, #0
 800171e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	2200      	movs	r2, #0
 8001724:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	6a1b      	ldr	r3, [r3, #32]
 800172c:	4a25      	ldr	r2, [pc, #148]	@ (80017c4 <HAL_ADC_Start_DMA+0x1b0>)
 800172e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	6a1b      	ldr	r3, [r3, #32]
 8001734:	4a24      	ldr	r2, [pc, #144]	@ (80017c8 <HAL_ADC_Start_DMA+0x1b4>)
 8001736:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	6a1b      	ldr	r3, [r3, #32]
 800173c:	4a23      	ldr	r2, [pc, #140]	@ (80017cc <HAL_ADC_Start_DMA+0x1b8>)
 800173e:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f06f 0202 	mvn.w	r2, #2
 8001748:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	689a      	ldr	r2, [r3, #8]
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001758:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	6a18      	ldr	r0, [r3, #32]
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	334c      	adds	r3, #76	@ 0x4c
 8001764:	4619      	mov	r1, r3
 8001766:	68ba      	ldr	r2, [r7, #8]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f001 fa23 	bl	8002bb4 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001778:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800177c:	d108      	bne.n	8001790 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	689a      	ldr	r2, [r3, #8]
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 800178c:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800178e:	e00f      	b.n	80017b0 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	689a      	ldr	r2, [r3, #8]
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800179e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80017a0:	e006      	b.n	80017b0 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	2200      	movs	r2, #0
 80017a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 80017aa:	e001      	b.n	80017b0 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80017b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3718      	adds	r7, #24
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	40012400 	.word	0x40012400
 80017c0:	40012800 	.word	0x40012800
 80017c4:	08001b2f 	.word	0x08001b2f
 80017c8:	08001bab 	.word	0x08001bab
 80017cc:	08001bc7 	.word	0x08001bc7

080017d0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80017d8:	bf00      	nop
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	bc80      	pop	{r7}
 80017e0:	4770      	bx	lr

080017e2 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80017e2:	b480      	push	{r7}
 80017e4:	b083      	sub	sp, #12
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80017ea:	bf00      	nop
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bc80      	pop	{r7}
 80017f2:	4770      	bx	lr

080017f4 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80017fc:	bf00      	nop
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	bc80      	pop	{r7}
 8001804:	4770      	bx	lr
	...

08001808 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001808:	b480      	push	{r7}
 800180a:	b085      	sub	sp, #20
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001812:	2300      	movs	r3, #0
 8001814:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001816:	2300      	movs	r3, #0
 8001818:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001820:	2b01      	cmp	r3, #1
 8001822:	d101      	bne.n	8001828 <HAL_ADC_ConfigChannel+0x20>
 8001824:	2302      	movs	r3, #2
 8001826:	e0dc      	b.n	80019e2 <HAL_ADC_ConfigChannel+0x1da>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2201      	movs	r2, #1
 800182c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	2b06      	cmp	r3, #6
 8001836:	d81c      	bhi.n	8001872 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685a      	ldr	r2, [r3, #4]
 8001842:	4613      	mov	r3, r2
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	4413      	add	r3, r2
 8001848:	3b05      	subs	r3, #5
 800184a:	221f      	movs	r2, #31
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	43db      	mvns	r3, r3
 8001852:	4019      	ands	r1, r3
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	6818      	ldr	r0, [r3, #0]
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	685a      	ldr	r2, [r3, #4]
 800185c:	4613      	mov	r3, r2
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	4413      	add	r3, r2
 8001862:	3b05      	subs	r3, #5
 8001864:	fa00 f203 	lsl.w	r2, r0, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	430a      	orrs	r2, r1
 800186e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001870:	e03c      	b.n	80018ec <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	2b0c      	cmp	r3, #12
 8001878:	d81c      	bhi.n	80018b4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685a      	ldr	r2, [r3, #4]
 8001884:	4613      	mov	r3, r2
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	4413      	add	r3, r2
 800188a:	3b23      	subs	r3, #35	@ 0x23
 800188c:	221f      	movs	r2, #31
 800188e:	fa02 f303 	lsl.w	r3, r2, r3
 8001892:	43db      	mvns	r3, r3
 8001894:	4019      	ands	r1, r3
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	6818      	ldr	r0, [r3, #0]
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685a      	ldr	r2, [r3, #4]
 800189e:	4613      	mov	r3, r2
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	4413      	add	r3, r2
 80018a4:	3b23      	subs	r3, #35	@ 0x23
 80018a6:	fa00 f203 	lsl.w	r2, r0, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	430a      	orrs	r2, r1
 80018b0:	631a      	str	r2, [r3, #48]	@ 0x30
 80018b2:	e01b      	b.n	80018ec <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685a      	ldr	r2, [r3, #4]
 80018be:	4613      	mov	r3, r2
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	4413      	add	r3, r2
 80018c4:	3b41      	subs	r3, #65	@ 0x41
 80018c6:	221f      	movs	r2, #31
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	43db      	mvns	r3, r3
 80018ce:	4019      	ands	r1, r3
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	6818      	ldr	r0, [r3, #0]
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685a      	ldr	r2, [r3, #4]
 80018d8:	4613      	mov	r3, r2
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	4413      	add	r3, r2
 80018de:	3b41      	subs	r3, #65	@ 0x41
 80018e0:	fa00 f203 	lsl.w	r2, r0, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	430a      	orrs	r2, r1
 80018ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2b09      	cmp	r3, #9
 80018f2:	d91c      	bls.n	800192e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	68d9      	ldr	r1, [r3, #12]
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	4613      	mov	r3, r2
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	4413      	add	r3, r2
 8001904:	3b1e      	subs	r3, #30
 8001906:	2207      	movs	r2, #7
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	43db      	mvns	r3, r3
 800190e:	4019      	ands	r1, r3
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	6898      	ldr	r0, [r3, #8]
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	4613      	mov	r3, r2
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	4413      	add	r3, r2
 800191e:	3b1e      	subs	r3, #30
 8001920:	fa00 f203 	lsl.w	r2, r0, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	430a      	orrs	r2, r1
 800192a:	60da      	str	r2, [r3, #12]
 800192c:	e019      	b.n	8001962 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	6919      	ldr	r1, [r3, #16]
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	4613      	mov	r3, r2
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	4413      	add	r3, r2
 800193e:	2207      	movs	r2, #7
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	43db      	mvns	r3, r3
 8001946:	4019      	ands	r1, r3
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	6898      	ldr	r0, [r3, #8]
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	4613      	mov	r3, r2
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	4413      	add	r3, r2
 8001956:	fa00 f203 	lsl.w	r2, r0, r3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	430a      	orrs	r2, r1
 8001960:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	2b10      	cmp	r3, #16
 8001968:	d003      	beq.n	8001972 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800196e:	2b11      	cmp	r3, #17
 8001970:	d132      	bne.n	80019d8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a1d      	ldr	r2, [pc, #116]	@ (80019ec <HAL_ADC_ConfigChannel+0x1e4>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d125      	bne.n	80019c8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d126      	bne.n	80019d8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	689a      	ldr	r2, [r3, #8]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001998:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2b10      	cmp	r3, #16
 80019a0:	d11a      	bne.n	80019d8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80019a2:	4b13      	ldr	r3, [pc, #76]	@ (80019f0 <HAL_ADC_ConfigChannel+0x1e8>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a13      	ldr	r2, [pc, #76]	@ (80019f4 <HAL_ADC_ConfigChannel+0x1ec>)
 80019a8:	fba2 2303 	umull	r2, r3, r2, r3
 80019ac:	0c9a      	lsrs	r2, r3, #18
 80019ae:	4613      	mov	r3, r2
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	4413      	add	r3, r2
 80019b4:	005b      	lsls	r3, r3, #1
 80019b6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80019b8:	e002      	b.n	80019c0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	3b01      	subs	r3, #1
 80019be:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d1f9      	bne.n	80019ba <HAL_ADC_ConfigChannel+0x1b2>
 80019c6:	e007      	b.n	80019d8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019cc:	f043 0220 	orr.w	r2, r3, #32
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2200      	movs	r2, #0
 80019dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80019e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3714      	adds	r7, #20
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bc80      	pop	{r7}
 80019ea:	4770      	bx	lr
 80019ec:	40012400 	.word	0x40012400
 80019f0:	20000000 	.word	0x20000000
 80019f4:	431bde83 	.word	0x431bde83

080019f8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a00:	2300      	movs	r3, #0
 8001a02:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001a04:	2300      	movs	r3, #0
 8001a06:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d040      	beq.n	8001a98 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	689a      	ldr	r2, [r3, #8]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f042 0201 	orr.w	r2, r2, #1
 8001a24:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a26:	4b1f      	ldr	r3, [pc, #124]	@ (8001aa4 <ADC_Enable+0xac>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a1f      	ldr	r2, [pc, #124]	@ (8001aa8 <ADC_Enable+0xb0>)
 8001a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a30:	0c9b      	lsrs	r3, r3, #18
 8001a32:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001a34:	e002      	b.n	8001a3c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	3b01      	subs	r3, #1
 8001a3a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d1f9      	bne.n	8001a36 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001a42:	f7ff fd05 	bl	8001450 <HAL_GetTick>
 8001a46:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001a48:	e01f      	b.n	8001a8a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001a4a:	f7ff fd01 	bl	8001450 <HAL_GetTick>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d918      	bls.n	8001a8a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d011      	beq.n	8001a8a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a6a:	f043 0210 	orr.w	r2, r3, #16
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a76:	f043 0201 	orr.w	r2, r3, #1
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2200      	movs	r2, #0
 8001a82:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e007      	b.n	8001a9a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	f003 0301 	and.w	r3, r3, #1
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d1d8      	bne.n	8001a4a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3710      	adds	r7, #16
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	20000000 	.word	0x20000000
 8001aa8:	431bde83 	.word	0x431bde83

08001aac <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	f003 0301 	and.w	r3, r3, #1
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d12e      	bne.n	8001b24 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	689a      	ldr	r2, [r3, #8]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f022 0201 	bic.w	r2, r2, #1
 8001ad4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001ad6:	f7ff fcbb 	bl	8001450 <HAL_GetTick>
 8001ada:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001adc:	e01b      	b.n	8001b16 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001ade:	f7ff fcb7 	bl	8001450 <HAL_GetTick>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d914      	bls.n	8001b16 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d10d      	bne.n	8001b16 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001afe:	f043 0210 	orr.w	r2, r3, #16
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b0a:	f043 0201 	orr.w	r2, r3, #1
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e007      	b.n	8001b26 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f003 0301 	and.w	r3, r3, #1
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d0dc      	beq.n	8001ade <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3710      	adds	r7, #16
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b084      	sub	sp, #16
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b3a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b40:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d127      	bne.n	8001b98 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b4c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001b5e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001b62:	d115      	bne.n	8001b90 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d111      	bne.n	8001b90 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b70:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b7c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d105      	bne.n	8001b90 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b88:	f043 0201 	orr.w	r2, r3, #1
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001b90:	68f8      	ldr	r0, [r7, #12]
 8001b92:	f7ff fe1d 	bl	80017d0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001b96:	e004      	b.n	8001ba2 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	6a1b      	ldr	r3, [r3, #32]
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	4798      	blx	r3
}
 8001ba2:	bf00      	nop
 8001ba4:	3710      	adds	r7, #16
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b084      	sub	sp, #16
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bb6:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001bb8:	68f8      	ldr	r0, [r7, #12]
 8001bba:	f7ff fe12 	bl	80017e2 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001bbe:	bf00      	nop
 8001bc0:	3710      	adds	r7, #16
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b084      	sub	sp, #16
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bd2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bd8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001be4:	f043 0204 	orr.w	r2, r3, #4
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001bec:	68f8      	ldr	r0, [r7, #12]
 8001bee:	f7ff fe01 	bl	80017f4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001bf2:	bf00      	nop
 8001bf4:	3710      	adds	r7, #16
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b084      	sub	sp, #16
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d101      	bne.n	8001c0c <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e0ed      	b.n	8001de8 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d102      	bne.n	8001c1e <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f7fe fd75 	bl	8000708 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f042 0201 	orr.w	r2, r2, #1
 8001c2c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c2e:	f7ff fc0f 	bl	8001450 <HAL_GetTick>
 8001c32:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001c34:	e012      	b.n	8001c5c <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c36:	f7ff fc0b 	bl	8001450 <HAL_GetTick>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	2b0a      	cmp	r3, #10
 8001c42:	d90b      	bls.n	8001c5c <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c48:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2205      	movs	r2, #5
 8001c54:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e0c5      	b.n	8001de8 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d0e5      	beq.n	8001c36 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f022 0202 	bic.w	r2, r2, #2
 8001c78:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c7a:	f7ff fbe9 	bl	8001450 <HAL_GetTick>
 8001c7e:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001c80:	e012      	b.n	8001ca8 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c82:	f7ff fbe5 	bl	8001450 <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	2b0a      	cmp	r3, #10
 8001c8e:	d90b      	bls.n	8001ca8 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c94:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2205      	movs	r2, #5
 8001ca0:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e09f      	b.n	8001de8 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d1e5      	bne.n	8001c82 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	7e1b      	ldrb	r3, [r3, #24]
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d108      	bne.n	8001cd0 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001ccc:	601a      	str	r2, [r3, #0]
 8001cce:	e007      	b.n	8001ce0 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001cde:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	7e5b      	ldrb	r3, [r3, #25]
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d108      	bne.n	8001cfa <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	e007      	b.n	8001d0a <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001d08:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	7e9b      	ldrb	r3, [r3, #26]
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d108      	bne.n	8001d24 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f042 0220 	orr.w	r2, r2, #32
 8001d20:	601a      	str	r2, [r3, #0]
 8001d22:	e007      	b.n	8001d34 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f022 0220 	bic.w	r2, r2, #32
 8001d32:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	7edb      	ldrb	r3, [r3, #27]
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d108      	bne.n	8001d4e <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f022 0210 	bic.w	r2, r2, #16
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	e007      	b.n	8001d5e <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f042 0210 	orr.w	r2, r2, #16
 8001d5c:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	7f1b      	ldrb	r3, [r3, #28]
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d108      	bne.n	8001d78 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f042 0208 	orr.w	r2, r2, #8
 8001d74:	601a      	str	r2, [r3, #0]
 8001d76:	e007      	b.n	8001d88 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f022 0208 	bic.w	r2, r2, #8
 8001d86:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	7f5b      	ldrb	r3, [r3, #29]
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d108      	bne.n	8001da2 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f042 0204 	orr.w	r2, r2, #4
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	e007      	b.n	8001db2 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f022 0204 	bic.w	r2, r2, #4
 8001db0:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	689a      	ldr	r2, [r3, #8]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	431a      	orrs	r2, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	691b      	ldr	r3, [r3, #16]
 8001dc0:	431a      	orrs	r2, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	695b      	ldr	r3, [r3, #20]
 8001dc6:	ea42 0103 	orr.w	r1, r2, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	1e5a      	subs	r2, r3, #1
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	430a      	orrs	r2, r1
 8001dd6:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2201      	movs	r2, #1
 8001de2:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001de6:	2300      	movs	r3, #0
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3710      	adds	r7, #16
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b087      	sub	sp, #28
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e06:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001e08:	7cfb      	ldrb	r3, [r7, #19]
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d003      	beq.n	8001e16 <HAL_CAN_ConfigFilter+0x26>
 8001e0e:	7cfb      	ldrb	r3, [r7, #19]
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	f040 80aa 	bne.w	8001f6a <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001e1c:	f043 0201 	orr.w	r2, r3, #1
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	695b      	ldr	r3, [r3, #20]
 8001e2a:	f003 031f 	and.w	r3, r3, #31
 8001e2e:	2201      	movs	r2, #1
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	43db      	mvns	r3, r3
 8001e40:	401a      	ands	r2, r3
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	69db      	ldr	r3, [r3, #28]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d123      	bne.n	8001e98 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	43db      	mvns	r3, r3
 8001e5a:	401a      	ands	r2, r3
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001e6e:	683a      	ldr	r2, [r7, #0]
 8001e70:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001e72:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	3248      	adds	r2, #72	@ 0x48
 8001e78:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001e8c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001e8e:	6979      	ldr	r1, [r7, #20]
 8001e90:	3348      	adds	r3, #72	@ 0x48
 8001e92:	00db      	lsls	r3, r3, #3
 8001e94:	440b      	add	r3, r1
 8001e96:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	69db      	ldr	r3, [r3, #28]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d122      	bne.n	8001ee6 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	431a      	orrs	r2, r3
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001ebc:	683a      	ldr	r2, [r7, #0]
 8001ebe:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001ec0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	3248      	adds	r2, #72	@ 0x48
 8001ec6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001eda:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001edc:	6979      	ldr	r1, [r7, #20]
 8001ede:	3348      	adds	r3, #72	@ 0x48
 8001ee0:	00db      	lsls	r3, r3, #3
 8001ee2:	440b      	add	r3, r1
 8001ee4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	699b      	ldr	r3, [r3, #24]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d109      	bne.n	8001f02 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	43db      	mvns	r3, r3
 8001ef8:	401a      	ands	r2, r3
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001f00:	e007      	b.n	8001f12 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	431a      	orrs	r2, r3
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	691b      	ldr	r3, [r3, #16]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d109      	bne.n	8001f2e <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	43db      	mvns	r3, r3
 8001f24:	401a      	ands	r2, r3
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001f2c:	e007      	b.n	8001f3e <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	431a      	orrs	r2, r3
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	6a1b      	ldr	r3, [r3, #32]
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d107      	bne.n	8001f56 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	431a      	orrs	r2, r3
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001f5c:	f023 0201 	bic.w	r2, r3, #1
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001f66:	2300      	movs	r3, #0
 8001f68:	e006      	b.n	8001f78 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f6e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
  }
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	371c      	adds	r7, #28
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bc80      	pop	{r7}
 8001f80:	4770      	bx	lr

08001f82 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b084      	sub	sp, #16
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d12e      	bne.n	8001ff4 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2202      	movs	r2, #2
 8001f9a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f022 0201 	bic.w	r2, r2, #1
 8001fac:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001fae:	f7ff fa4f 	bl	8001450 <HAL_GetTick>
 8001fb2:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001fb4:	e012      	b.n	8001fdc <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001fb6:	f7ff fa4b 	bl	8001450 <HAL_GetTick>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	2b0a      	cmp	r3, #10
 8001fc2:	d90b      	bls.n	8001fdc <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fc8:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2205      	movs	r2, #5
 8001fd4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e012      	b.n	8002002 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f003 0301 	and.w	r3, r3, #1
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d1e5      	bne.n	8001fb6 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	e006      	b.n	8002002 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ff8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
  }
}
 8002002:	4618      	mov	r0, r3
 8002004:	3710      	adds	r7, #16
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}

0800200a <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800200a:	b480      	push	{r7}
 800200c:	b089      	sub	sp, #36	@ 0x24
 800200e:	af00      	add	r7, sp, #0
 8002010:	60f8      	str	r0, [r7, #12]
 8002012:	60b9      	str	r1, [r7, #8]
 8002014:	607a      	str	r2, [r7, #4]
 8002016:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800201e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002028:	7ffb      	ldrb	r3, [r7, #31]
 800202a:	2b01      	cmp	r3, #1
 800202c:	d003      	beq.n	8002036 <HAL_CAN_AddTxMessage+0x2c>
 800202e:	7ffb      	ldrb	r3, [r7, #31]
 8002030:	2b02      	cmp	r3, #2
 8002032:	f040 80ad 	bne.w	8002190 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d10a      	bne.n	8002056 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002040:	69bb      	ldr	r3, [r7, #24]
 8002042:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002046:	2b00      	cmp	r3, #0
 8002048:	d105      	bne.n	8002056 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002050:	2b00      	cmp	r3, #0
 8002052:	f000 8095 	beq.w	8002180 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	0e1b      	lsrs	r3, r3, #24
 800205a:	f003 0303 	and.w	r3, r3, #3
 800205e:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002060:	2201      	movs	r2, #1
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	409a      	lsls	r2, r3
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d10d      	bne.n	800208e <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800207c:	68f9      	ldr	r1, [r7, #12]
 800207e:	6809      	ldr	r1, [r1, #0]
 8002080:	431a      	orrs	r2, r3
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	3318      	adds	r3, #24
 8002086:	011b      	lsls	r3, r3, #4
 8002088:	440b      	add	r3, r1
 800208a:	601a      	str	r2, [r3, #0]
 800208c:	e00f      	b.n	80020ae <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002098:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800209e:	68f9      	ldr	r1, [r7, #12]
 80020a0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80020a2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	3318      	adds	r3, #24
 80020a8:	011b      	lsls	r3, r3, #4
 80020aa:	440b      	add	r3, r1
 80020ac:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	6819      	ldr	r1, [r3, #0]
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	691a      	ldr	r2, [r3, #16]
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	3318      	adds	r3, #24
 80020ba:	011b      	lsls	r3, r3, #4
 80020bc:	440b      	add	r3, r1
 80020be:	3304      	adds	r3, #4
 80020c0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	7d1b      	ldrb	r3, [r3, #20]
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d111      	bne.n	80020ee <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	3318      	adds	r3, #24
 80020d2:	011b      	lsls	r3, r3, #4
 80020d4:	4413      	add	r3, r2
 80020d6:	3304      	adds	r3, #4
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	68fa      	ldr	r2, [r7, #12]
 80020dc:	6811      	ldr	r1, [r2, #0]
 80020de:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	3318      	adds	r3, #24
 80020e6:	011b      	lsls	r3, r3, #4
 80020e8:	440b      	add	r3, r1
 80020ea:	3304      	adds	r3, #4
 80020ec:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	3307      	adds	r3, #7
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	061a      	lsls	r2, r3, #24
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	3306      	adds	r3, #6
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	041b      	lsls	r3, r3, #16
 80020fe:	431a      	orrs	r2, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	3305      	adds	r3, #5
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	021b      	lsls	r3, r3, #8
 8002108:	4313      	orrs	r3, r2
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	3204      	adds	r2, #4
 800210e:	7812      	ldrb	r2, [r2, #0]
 8002110:	4610      	mov	r0, r2
 8002112:	68fa      	ldr	r2, [r7, #12]
 8002114:	6811      	ldr	r1, [r2, #0]
 8002116:	ea43 0200 	orr.w	r2, r3, r0
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	011b      	lsls	r3, r3, #4
 800211e:	440b      	add	r3, r1
 8002120:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002124:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	3303      	adds	r3, #3
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	061a      	lsls	r2, r3, #24
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	3302      	adds	r3, #2
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	041b      	lsls	r3, r3, #16
 8002136:	431a      	orrs	r2, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	3301      	adds	r3, #1
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	021b      	lsls	r3, r3, #8
 8002140:	4313      	orrs	r3, r2
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	7812      	ldrb	r2, [r2, #0]
 8002146:	4610      	mov	r0, r2
 8002148:	68fa      	ldr	r2, [r7, #12]
 800214a:	6811      	ldr	r1, [r2, #0]
 800214c:	ea43 0200 	orr.w	r2, r3, r0
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	011b      	lsls	r3, r3, #4
 8002154:	440b      	add	r3, r1
 8002156:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800215a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	3318      	adds	r3, #24
 8002164:	011b      	lsls	r3, r3, #4
 8002166:	4413      	add	r3, r2
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	68fa      	ldr	r2, [r7, #12]
 800216c:	6811      	ldr	r1, [r2, #0]
 800216e:	f043 0201 	orr.w	r2, r3, #1
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	3318      	adds	r3, #24
 8002176:	011b      	lsls	r3, r3, #4
 8002178:	440b      	add	r3, r1
 800217a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800217c:	2300      	movs	r3, #0
 800217e:	e00e      	b.n	800219e <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002184:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e006      	b.n	800219e <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002194:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
  }
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3724      	adds	r7, #36	@ 0x24
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bc80      	pop	{r7}
 80021a6:	4770      	bx	lr

080021a8 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b085      	sub	sp, #20
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80021b0:	2300      	movs	r3, #0
 80021b2:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021ba:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80021bc:	7afb      	ldrb	r3, [r7, #11]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d002      	beq.n	80021c8 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80021c2:	7afb      	ldrb	r3, [r7, #11]
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d11d      	bne.n	8002204 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d002      	beq.n	80021dc <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	3301      	adds	r3, #1
 80021da:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d002      	beq.n	80021f0 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	3301      	adds	r3, #1
 80021ee:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d002      	beq.n	8002204 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	3301      	adds	r3, #1
 8002202:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8002204:	68fb      	ldr	r3, [r7, #12]
}
 8002206:	4618      	mov	r0, r3
 8002208:	3714      	adds	r7, #20
 800220a:	46bd      	mov	sp, r7
 800220c:	bc80      	pop	{r7}
 800220e:	4770      	bx	lr

08002210 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002210:	b480      	push	{r7}
 8002212:	b087      	sub	sp, #28
 8002214:	af00      	add	r7, sp, #0
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	607a      	str	r2, [r7, #4]
 800221c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002224:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002226:	7dfb      	ldrb	r3, [r7, #23]
 8002228:	2b01      	cmp	r3, #1
 800222a:	d003      	beq.n	8002234 <HAL_CAN_GetRxMessage+0x24>
 800222c:	7dfb      	ldrb	r3, [r7, #23]
 800222e:	2b02      	cmp	r3, #2
 8002230:	f040 8103 	bne.w	800243a <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d10e      	bne.n	8002258 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	f003 0303 	and.w	r3, r3, #3
 8002244:	2b00      	cmp	r3, #0
 8002246:	d116      	bne.n	8002276 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800224c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e0f7      	b.n	8002448 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	691b      	ldr	r3, [r3, #16]
 800225e:	f003 0303 	and.w	r3, r3, #3
 8002262:	2b00      	cmp	r3, #0
 8002264:	d107      	bne.n	8002276 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800226a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e0e8      	b.n	8002448 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	331b      	adds	r3, #27
 800227e:	011b      	lsls	r3, r3, #4
 8002280:	4413      	add	r3, r2
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0204 	and.w	r2, r3, #4
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d10c      	bne.n	80022ae <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	331b      	adds	r3, #27
 800229c:	011b      	lsls	r3, r3, #4
 800229e:	4413      	add	r3, r2
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	0d5b      	lsrs	r3, r3, #21
 80022a4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	601a      	str	r2, [r3, #0]
 80022ac:	e00b      	b.n	80022c6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	331b      	adds	r3, #27
 80022b6:	011b      	lsls	r3, r3, #4
 80022b8:	4413      	add	r3, r2
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	08db      	lsrs	r3, r3, #3
 80022be:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	331b      	adds	r3, #27
 80022ce:	011b      	lsls	r3, r3, #4
 80022d0:	4413      	add	r3, r2
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0202 	and.w	r2, r3, #2
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	331b      	adds	r3, #27
 80022e4:	011b      	lsls	r3, r3, #4
 80022e6:	4413      	add	r3, r2
 80022e8:	3304      	adds	r3, #4
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0308 	and.w	r3, r3, #8
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d003      	beq.n	80022fc <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2208      	movs	r2, #8
 80022f8:	611a      	str	r2, [r3, #16]
 80022fa:	e00b      	b.n	8002314 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	331b      	adds	r3, #27
 8002304:	011b      	lsls	r3, r3, #4
 8002306:	4413      	add	r3, r2
 8002308:	3304      	adds	r3, #4
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 020f 	and.w	r2, r3, #15
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	331b      	adds	r3, #27
 800231c:	011b      	lsls	r3, r3, #4
 800231e:	4413      	add	r3, r2
 8002320:	3304      	adds	r3, #4
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	0a1b      	lsrs	r3, r3, #8
 8002326:	b2da      	uxtb	r2, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	331b      	adds	r3, #27
 8002334:	011b      	lsls	r3, r3, #4
 8002336:	4413      	add	r3, r2
 8002338:	3304      	adds	r3, #4
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	0c1b      	lsrs	r3, r3, #16
 800233e:	b29a      	uxth	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	011b      	lsls	r3, r3, #4
 800234c:	4413      	add	r3, r2
 800234e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	b2da      	uxtb	r2, r3
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	011b      	lsls	r3, r3, #4
 8002362:	4413      	add	r3, r2
 8002364:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	0a1a      	lsrs	r2, r3, #8
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	3301      	adds	r3, #1
 8002370:	b2d2      	uxtb	r2, r2
 8002372:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	011b      	lsls	r3, r3, #4
 800237c:	4413      	add	r3, r2
 800237e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	0c1a      	lsrs	r2, r3, #16
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	3302      	adds	r3, #2
 800238a:	b2d2      	uxtb	r2, r2
 800238c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	011b      	lsls	r3, r3, #4
 8002396:	4413      	add	r3, r2
 8002398:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	0e1a      	lsrs	r2, r3, #24
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	3303      	adds	r3, #3
 80023a4:	b2d2      	uxtb	r2, r2
 80023a6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	011b      	lsls	r3, r3, #4
 80023b0:	4413      	add	r3, r2
 80023b2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	3304      	adds	r3, #4
 80023bc:	b2d2      	uxtb	r2, r2
 80023be:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	011b      	lsls	r3, r3, #4
 80023c8:	4413      	add	r3, r2
 80023ca:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	0a1a      	lsrs	r2, r3, #8
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	3305      	adds	r3, #5
 80023d6:	b2d2      	uxtb	r2, r2
 80023d8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	011b      	lsls	r3, r3, #4
 80023e2:	4413      	add	r3, r2
 80023e4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	0c1a      	lsrs	r2, r3, #16
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	3306      	adds	r3, #6
 80023f0:	b2d2      	uxtb	r2, r2
 80023f2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	011b      	lsls	r3, r3, #4
 80023fc:	4413      	add	r3, r2
 80023fe:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	0e1a      	lsrs	r2, r3, #24
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	3307      	adds	r3, #7
 800240a:	b2d2      	uxtb	r2, r2
 800240c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d108      	bne.n	8002426 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	68da      	ldr	r2, [r3, #12]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f042 0220 	orr.w	r2, r2, #32
 8002422:	60da      	str	r2, [r3, #12]
 8002424:	e007      	b.n	8002436 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	691a      	ldr	r2, [r3, #16]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f042 0220 	orr.w	r2, r2, #32
 8002434:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002436:	2300      	movs	r3, #0
 8002438:	e006      	b.n	8002448 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800243e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
  }
}
 8002448:	4618      	mov	r0, r3
 800244a:	371c      	adds	r7, #28
 800244c:	46bd      	mov	sp, r7
 800244e:	bc80      	pop	{r7}
 8002450:	4770      	bx	lr

08002452 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002452:	b480      	push	{r7}
 8002454:	b085      	sub	sp, #20
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
 800245a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002462:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002464:	7bfb      	ldrb	r3, [r7, #15]
 8002466:	2b01      	cmp	r3, #1
 8002468:	d002      	beq.n	8002470 <HAL_CAN_ActivateNotification+0x1e>
 800246a:	7bfb      	ldrb	r3, [r7, #15]
 800246c:	2b02      	cmp	r3, #2
 800246e:	d109      	bne.n	8002484 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	6959      	ldr	r1, [r3, #20]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	683a      	ldr	r2, [r7, #0]
 800247c:	430a      	orrs	r2, r1
 800247e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002480:	2300      	movs	r3, #0
 8002482:	e006      	b.n	8002492 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002488:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
  }
}
 8002492:	4618      	mov	r0, r3
 8002494:	3714      	adds	r7, #20
 8002496:	46bd      	mov	sp, r7
 8002498:	bc80      	pop	{r7}
 800249a:	4770      	bx	lr

0800249c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b08a      	sub	sp, #40	@ 0x28
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80024a4:	2300      	movs	r3, #0
 80024a6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	695b      	ldr	r3, [r3, #20]
 80024ae:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	691b      	ldr	r3, [r3, #16]
 80024ce:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	699b      	ldr	r3, [r3, #24]
 80024d6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80024d8:	6a3b      	ldr	r3, [r7, #32]
 80024da:	f003 0301 	and.w	r3, r3, #1
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d07c      	beq.n	80025dc <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	f003 0301 	and.w	r3, r3, #1
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d023      	beq.n	8002534 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2201      	movs	r2, #1
 80024f2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80024f4:	69bb      	ldr	r3, [r7, #24]
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d003      	beq.n	8002506 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f000 f983 	bl	800280a <HAL_CAN_TxMailbox0CompleteCallback>
 8002504:	e016      	b.n	8002534 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	f003 0304 	and.w	r3, r3, #4
 800250c:	2b00      	cmp	r3, #0
 800250e:	d004      	beq.n	800251a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002512:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002516:	627b      	str	r3, [r7, #36]	@ 0x24
 8002518:	e00c      	b.n	8002534 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	f003 0308 	and.w	r3, r3, #8
 8002520:	2b00      	cmp	r3, #0
 8002522:	d004      	beq.n	800252e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002526:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800252a:	627b      	str	r3, [r7, #36]	@ 0x24
 800252c:	e002      	b.n	8002534 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f000 f986 	bl	8002840 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800253a:	2b00      	cmp	r3, #0
 800253c:	d024      	beq.n	8002588 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002546:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800254e:	2b00      	cmp	r3, #0
 8002550:	d003      	beq.n	800255a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f000 f962 	bl	800281c <HAL_CAN_TxMailbox1CompleteCallback>
 8002558:	e016      	b.n	8002588 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002560:	2b00      	cmp	r3, #0
 8002562:	d004      	beq.n	800256e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002566:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800256a:	627b      	str	r3, [r7, #36]	@ 0x24
 800256c:	e00c      	b.n	8002588 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002574:	2b00      	cmp	r3, #0
 8002576:	d004      	beq.n	8002582 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800257a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800257e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002580:	e002      	b.n	8002588 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f000 f965 	bl	8002852 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d024      	beq.n	80025dc <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800259a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d003      	beq.n	80025ae <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f000 f941 	bl	800282e <HAL_CAN_TxMailbox2CompleteCallback>
 80025ac:	e016      	b.n	80025dc <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d004      	beq.n	80025c2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80025b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80025be:	627b      	str	r3, [r7, #36]	@ 0x24
 80025c0:	e00c      	b.n	80025dc <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d004      	beq.n	80025d6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80025cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80025d4:	e002      	b.n	80025dc <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f000 f944 	bl	8002864 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80025dc:	6a3b      	ldr	r3, [r7, #32]
 80025de:	f003 0308 	and.w	r3, r3, #8
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d00c      	beq.n	8002600 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	f003 0310 	and.w	r3, r3, #16
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d007      	beq.n	8002600 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80025f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80025f6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2210      	movs	r2, #16
 80025fe:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002600:	6a3b      	ldr	r3, [r7, #32]
 8002602:	f003 0304 	and.w	r3, r3, #4
 8002606:	2b00      	cmp	r3, #0
 8002608:	d00b      	beq.n	8002622 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	f003 0308 	and.w	r3, r3, #8
 8002610:	2b00      	cmp	r3, #0
 8002612:	d006      	beq.n	8002622 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2208      	movs	r2, #8
 800261a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f000 f92a 	bl	8002876 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002622:	6a3b      	ldr	r3, [r7, #32]
 8002624:	f003 0302 	and.w	r3, r3, #2
 8002628:	2b00      	cmp	r3, #0
 800262a:	d009      	beq.n	8002640 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	f003 0303 	and.w	r3, r3, #3
 8002636:	2b00      	cmp	r3, #0
 8002638:	d002      	beq.n	8002640 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f7fd fdbe 	bl	80001bc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002640:	6a3b      	ldr	r3, [r7, #32]
 8002642:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002646:	2b00      	cmp	r3, #0
 8002648:	d00c      	beq.n	8002664 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	f003 0310 	and.w	r3, r3, #16
 8002650:	2b00      	cmp	r3, #0
 8002652:	d007      	beq.n	8002664 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002656:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800265a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2210      	movs	r2, #16
 8002662:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002664:	6a3b      	ldr	r3, [r7, #32]
 8002666:	f003 0320 	and.w	r3, r3, #32
 800266a:	2b00      	cmp	r3, #0
 800266c:	d00b      	beq.n	8002686 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	f003 0308 	and.w	r3, r3, #8
 8002674:	2b00      	cmp	r3, #0
 8002676:	d006      	beq.n	8002686 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2208      	movs	r2, #8
 800267e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f000 f90a 	bl	800289a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002686:	6a3b      	ldr	r3, [r7, #32]
 8002688:	f003 0310 	and.w	r3, r3, #16
 800268c:	2b00      	cmp	r3, #0
 800268e:	d009      	beq.n	80026a4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	691b      	ldr	r3, [r3, #16]
 8002696:	f003 0303 	and.w	r3, r3, #3
 800269a:	2b00      	cmp	r3, #0
 800269c:	d002      	beq.n	80026a4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f000 f8f2 	bl	8002888 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80026a4:	6a3b      	ldr	r3, [r7, #32]
 80026a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d00b      	beq.n	80026c6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	f003 0310 	and.w	r3, r3, #16
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d006      	beq.n	80026c6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2210      	movs	r2, #16
 80026be:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f000 f8f3 	bl	80028ac <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80026c6:	6a3b      	ldr	r3, [r7, #32]
 80026c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d00b      	beq.n	80026e8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	f003 0308 	and.w	r3, r3, #8
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d006      	beq.n	80026e8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2208      	movs	r2, #8
 80026e0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f000 f8eb 	bl	80028be <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80026e8:	6a3b      	ldr	r3, [r7, #32]
 80026ea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d07b      	beq.n	80027ea <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	f003 0304 	and.w	r3, r3, #4
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d072      	beq.n	80027e2 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80026fc:	6a3b      	ldr	r3, [r7, #32]
 80026fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002702:	2b00      	cmp	r3, #0
 8002704:	d008      	beq.n	8002718 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800270c:	2b00      	cmp	r3, #0
 800270e:	d003      	beq.n	8002718 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002712:	f043 0301 	orr.w	r3, r3, #1
 8002716:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002718:	6a3b      	ldr	r3, [r7, #32]
 800271a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800271e:	2b00      	cmp	r3, #0
 8002720:	d008      	beq.n	8002734 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002728:	2b00      	cmp	r3, #0
 800272a:	d003      	beq.n	8002734 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800272c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800272e:	f043 0302 	orr.w	r3, r3, #2
 8002732:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002734:	6a3b      	ldr	r3, [r7, #32]
 8002736:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800273a:	2b00      	cmp	r3, #0
 800273c:	d008      	beq.n	8002750 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002744:	2b00      	cmp	r3, #0
 8002746:	d003      	beq.n	8002750 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800274a:	f043 0304 	orr.w	r3, r3, #4
 800274e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002750:	6a3b      	ldr	r3, [r7, #32]
 8002752:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002756:	2b00      	cmp	r3, #0
 8002758:	d043      	beq.n	80027e2 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002760:	2b00      	cmp	r3, #0
 8002762:	d03e      	beq.n	80027e2 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800276a:	2b60      	cmp	r3, #96	@ 0x60
 800276c:	d02b      	beq.n	80027c6 <HAL_CAN_IRQHandler+0x32a>
 800276e:	2b60      	cmp	r3, #96	@ 0x60
 8002770:	d82e      	bhi.n	80027d0 <HAL_CAN_IRQHandler+0x334>
 8002772:	2b50      	cmp	r3, #80	@ 0x50
 8002774:	d022      	beq.n	80027bc <HAL_CAN_IRQHandler+0x320>
 8002776:	2b50      	cmp	r3, #80	@ 0x50
 8002778:	d82a      	bhi.n	80027d0 <HAL_CAN_IRQHandler+0x334>
 800277a:	2b40      	cmp	r3, #64	@ 0x40
 800277c:	d019      	beq.n	80027b2 <HAL_CAN_IRQHandler+0x316>
 800277e:	2b40      	cmp	r3, #64	@ 0x40
 8002780:	d826      	bhi.n	80027d0 <HAL_CAN_IRQHandler+0x334>
 8002782:	2b30      	cmp	r3, #48	@ 0x30
 8002784:	d010      	beq.n	80027a8 <HAL_CAN_IRQHandler+0x30c>
 8002786:	2b30      	cmp	r3, #48	@ 0x30
 8002788:	d822      	bhi.n	80027d0 <HAL_CAN_IRQHandler+0x334>
 800278a:	2b10      	cmp	r3, #16
 800278c:	d002      	beq.n	8002794 <HAL_CAN_IRQHandler+0x2f8>
 800278e:	2b20      	cmp	r3, #32
 8002790:	d005      	beq.n	800279e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002792:	e01d      	b.n	80027d0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002796:	f043 0308 	orr.w	r3, r3, #8
 800279a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800279c:	e019      	b.n	80027d2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800279e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a0:	f043 0310 	orr.w	r3, r3, #16
 80027a4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80027a6:	e014      	b.n	80027d2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80027a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027aa:	f043 0320 	orr.w	r3, r3, #32
 80027ae:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80027b0:	e00f      	b.n	80027d2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80027b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80027b8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80027ba:	e00a      	b.n	80027d2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80027bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80027c2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80027c4:	e005      	b.n	80027d2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80027c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027cc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80027ce:	e000      	b.n	80027d2 <HAL_CAN_IRQHandler+0x336>
            break;
 80027d0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	699a      	ldr	r2, [r3, #24]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80027e0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	2204      	movs	r2, #4
 80027e8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80027ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d008      	beq.n	8002802 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80027f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027f6:	431a      	orrs	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f000 f867 	bl	80028d0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002802:	bf00      	nop
 8002804:	3728      	adds	r7, #40	@ 0x28
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}

0800280a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800280a:	b480      	push	{r7}
 800280c:	b083      	sub	sp, #12
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002812:	bf00      	nop
 8002814:	370c      	adds	r7, #12
 8002816:	46bd      	mov	sp, r7
 8002818:	bc80      	pop	{r7}
 800281a:	4770      	bx	lr

0800281c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002824:	bf00      	nop
 8002826:	370c      	adds	r7, #12
 8002828:	46bd      	mov	sp, r7
 800282a:	bc80      	pop	{r7}
 800282c:	4770      	bx	lr

0800282e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800282e:	b480      	push	{r7}
 8002830:	b083      	sub	sp, #12
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002836:	bf00      	nop
 8002838:	370c      	adds	r7, #12
 800283a:	46bd      	mov	sp, r7
 800283c:	bc80      	pop	{r7}
 800283e:	4770      	bx	lr

08002840 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002848:	bf00      	nop
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	bc80      	pop	{r7}
 8002850:	4770      	bx	lr

08002852 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002852:	b480      	push	{r7}
 8002854:	b083      	sub	sp, #12
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800285a:	bf00      	nop
 800285c:	370c      	adds	r7, #12
 800285e:	46bd      	mov	sp, r7
 8002860:	bc80      	pop	{r7}
 8002862:	4770      	bx	lr

08002864 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800286c:	bf00      	nop
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	bc80      	pop	{r7}
 8002874:	4770      	bx	lr

08002876 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002876:	b480      	push	{r7}
 8002878:	b083      	sub	sp, #12
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800287e:	bf00      	nop
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	bc80      	pop	{r7}
 8002886:	4770      	bx	lr

08002888 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002890:	bf00      	nop
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	bc80      	pop	{r7}
 8002898:	4770      	bx	lr

0800289a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800289a:	b480      	push	{r7}
 800289c:	b083      	sub	sp, #12
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80028a2:	bf00      	nop
 80028a4:	370c      	adds	r7, #12
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bc80      	pop	{r7}
 80028aa:	4770      	bx	lr

080028ac <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80028b4:	bf00      	nop
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bc80      	pop	{r7}
 80028bc:	4770      	bx	lr

080028be <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80028be:	b480      	push	{r7}
 80028c0:	b083      	sub	sp, #12
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80028c6:	bf00      	nop
 80028c8:	370c      	adds	r7, #12
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bc80      	pop	{r7}
 80028ce:	4770      	bx	lr

080028d0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80028d8:	bf00      	nop
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	bc80      	pop	{r7}
 80028e0:	4770      	bx	lr
	...

080028e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b085      	sub	sp, #20
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f003 0307 	and.w	r3, r3, #7
 80028f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002928 <__NVIC_SetPriorityGrouping+0x44>)
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028fa:	68ba      	ldr	r2, [r7, #8]
 80028fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002900:	4013      	ands	r3, r2
 8002902:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800290c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002910:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002914:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002916:	4a04      	ldr	r2, [pc, #16]	@ (8002928 <__NVIC_SetPriorityGrouping+0x44>)
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	60d3      	str	r3, [r2, #12]
}
 800291c:	bf00      	nop
 800291e:	3714      	adds	r7, #20
 8002920:	46bd      	mov	sp, r7
 8002922:	bc80      	pop	{r7}
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	e000ed00 	.word	0xe000ed00

0800292c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002930:	4b04      	ldr	r3, [pc, #16]	@ (8002944 <__NVIC_GetPriorityGrouping+0x18>)
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	0a1b      	lsrs	r3, r3, #8
 8002936:	f003 0307 	and.w	r3, r3, #7
}
 800293a:	4618      	mov	r0, r3
 800293c:	46bd      	mov	sp, r7
 800293e:	bc80      	pop	{r7}
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	e000ed00 	.word	0xe000ed00

08002948 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	4603      	mov	r3, r0
 8002950:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002956:	2b00      	cmp	r3, #0
 8002958:	db0b      	blt.n	8002972 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800295a:	79fb      	ldrb	r3, [r7, #7]
 800295c:	f003 021f 	and.w	r2, r3, #31
 8002960:	4906      	ldr	r1, [pc, #24]	@ (800297c <__NVIC_EnableIRQ+0x34>)
 8002962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002966:	095b      	lsrs	r3, r3, #5
 8002968:	2001      	movs	r0, #1
 800296a:	fa00 f202 	lsl.w	r2, r0, r2
 800296e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002972:	bf00      	nop
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	bc80      	pop	{r7}
 800297a:	4770      	bx	lr
 800297c:	e000e100 	.word	0xe000e100

08002980 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	4603      	mov	r3, r0
 8002988:	6039      	str	r1, [r7, #0]
 800298a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800298c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002990:	2b00      	cmp	r3, #0
 8002992:	db0a      	blt.n	80029aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	b2da      	uxtb	r2, r3
 8002998:	490c      	ldr	r1, [pc, #48]	@ (80029cc <__NVIC_SetPriority+0x4c>)
 800299a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800299e:	0112      	lsls	r2, r2, #4
 80029a0:	b2d2      	uxtb	r2, r2
 80029a2:	440b      	add	r3, r1
 80029a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029a8:	e00a      	b.n	80029c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	b2da      	uxtb	r2, r3
 80029ae:	4908      	ldr	r1, [pc, #32]	@ (80029d0 <__NVIC_SetPriority+0x50>)
 80029b0:	79fb      	ldrb	r3, [r7, #7]
 80029b2:	f003 030f 	and.w	r3, r3, #15
 80029b6:	3b04      	subs	r3, #4
 80029b8:	0112      	lsls	r2, r2, #4
 80029ba:	b2d2      	uxtb	r2, r2
 80029bc:	440b      	add	r3, r1
 80029be:	761a      	strb	r2, [r3, #24]
}
 80029c0:	bf00      	nop
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bc80      	pop	{r7}
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	e000e100 	.word	0xe000e100
 80029d0:	e000ed00 	.word	0xe000ed00

080029d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b089      	sub	sp, #36	@ 0x24
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f003 0307 	and.w	r3, r3, #7
 80029e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	f1c3 0307 	rsb	r3, r3, #7
 80029ee:	2b04      	cmp	r3, #4
 80029f0:	bf28      	it	cs
 80029f2:	2304      	movcs	r3, #4
 80029f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	3304      	adds	r3, #4
 80029fa:	2b06      	cmp	r3, #6
 80029fc:	d902      	bls.n	8002a04 <NVIC_EncodePriority+0x30>
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	3b03      	subs	r3, #3
 8002a02:	e000      	b.n	8002a06 <NVIC_EncodePriority+0x32>
 8002a04:	2300      	movs	r3, #0
 8002a06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a08:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a12:	43da      	mvns	r2, r3
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	401a      	ands	r2, r3
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a1c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	fa01 f303 	lsl.w	r3, r1, r3
 8002a26:	43d9      	mvns	r1, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a2c:	4313      	orrs	r3, r2
         );
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3724      	adds	r7, #36	@ 0x24
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bc80      	pop	{r7}
 8002a36:	4770      	bx	lr

08002a38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	3b01      	subs	r3, #1
 8002a44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a48:	d301      	bcc.n	8002a4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e00f      	b.n	8002a6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a4e:	4a0a      	ldr	r2, [pc, #40]	@ (8002a78 <SysTick_Config+0x40>)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	3b01      	subs	r3, #1
 8002a54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a56:	210f      	movs	r1, #15
 8002a58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002a5c:	f7ff ff90 	bl	8002980 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a60:	4b05      	ldr	r3, [pc, #20]	@ (8002a78 <SysTick_Config+0x40>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a66:	4b04      	ldr	r3, [pc, #16]	@ (8002a78 <SysTick_Config+0x40>)
 8002a68:	2207      	movs	r2, #7
 8002a6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3708      	adds	r7, #8
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	e000e010 	.word	0xe000e010

08002a7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f7ff ff2d 	bl	80028e4 <__NVIC_SetPriorityGrouping>
}
 8002a8a:	bf00      	nop
 8002a8c:	3708      	adds	r7, #8
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a92:	b580      	push	{r7, lr}
 8002a94:	b086      	sub	sp, #24
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	4603      	mov	r3, r0
 8002a9a:	60b9      	str	r1, [r7, #8]
 8002a9c:	607a      	str	r2, [r7, #4]
 8002a9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002aa4:	f7ff ff42 	bl	800292c <__NVIC_GetPriorityGrouping>
 8002aa8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	68b9      	ldr	r1, [r7, #8]
 8002aae:	6978      	ldr	r0, [r7, #20]
 8002ab0:	f7ff ff90 	bl	80029d4 <NVIC_EncodePriority>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aba:	4611      	mov	r1, r2
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7ff ff5f 	bl	8002980 <__NVIC_SetPriority>
}
 8002ac2:	bf00      	nop
 8002ac4:	3718      	adds	r7, #24
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b082      	sub	sp, #8
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ad4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7ff ff35 	bl	8002948 <__NVIC_EnableIRQ>
}
 8002ade:	bf00      	nop
 8002ae0:	3708      	adds	r7, #8
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}

08002ae6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ae6:	b580      	push	{r7, lr}
 8002ae8:	b082      	sub	sp, #8
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f7ff ffa2 	bl	8002a38 <SysTick_Config>
 8002af4:	4603      	mov	r3, r0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3708      	adds	r7, #8
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
	...

08002b00 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b085      	sub	sp, #20
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d101      	bne.n	8002b16 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e043      	b.n	8002b9e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	4b22      	ldr	r3, [pc, #136]	@ (8002ba8 <HAL_DMA_Init+0xa8>)
 8002b1e:	4413      	add	r3, r2
 8002b20:	4a22      	ldr	r2, [pc, #136]	@ (8002bac <HAL_DMA_Init+0xac>)
 8002b22:	fba2 2303 	umull	r2, r3, r2, r3
 8002b26:	091b      	lsrs	r3, r3, #4
 8002b28:	009a      	lsls	r2, r3, #2
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a1f      	ldr	r2, [pc, #124]	@ (8002bb0 <HAL_DMA_Init+0xb0>)
 8002b32:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2202      	movs	r2, #2
 8002b38:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002b4a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002b4e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002b58:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b64:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	695b      	ldr	r3, [r3, #20]
 8002b6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b70:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	69db      	ldr	r3, [r3, #28]
 8002b76:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002b78:	68fa      	ldr	r2, [r7, #12]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	68fa      	ldr	r2, [r7, #12]
 8002b84:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3714      	adds	r7, #20
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bc80      	pop	{r7}
 8002ba6:	4770      	bx	lr
 8002ba8:	bffdfff8 	.word	0xbffdfff8
 8002bac:	cccccccd 	.word	0xcccccccd
 8002bb0:	40020000 	.word	0x40020000

08002bb4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b086      	sub	sp, #24
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	607a      	str	r2, [r7, #4]
 8002bc0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d101      	bne.n	8002bd4 <HAL_DMA_Start_IT+0x20>
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	e04b      	b.n	8002c6c <HAL_DMA_Start_IT+0xb8>
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d13a      	bne.n	8002c5e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2202      	movs	r2, #2
 8002bec:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f022 0201 	bic.w	r2, r2, #1
 8002c04:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	68b9      	ldr	r1, [r7, #8]
 8002c0c:	68f8      	ldr	r0, [r7, #12]
 8002c0e:	f000 f831 	bl	8002c74 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d008      	beq.n	8002c2c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f042 020e 	orr.w	r2, r2, #14
 8002c28:	601a      	str	r2, [r3, #0]
 8002c2a:	e00f      	b.n	8002c4c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f022 0204 	bic.w	r2, r2, #4
 8002c3a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f042 020a 	orr.w	r2, r2, #10
 8002c4a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f042 0201 	orr.w	r2, r2, #1
 8002c5a:	601a      	str	r2, [r3, #0]
 8002c5c:	e005      	b.n	8002c6a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002c66:	2302      	movs	r3, #2
 8002c68:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002c6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3718      	adds	r7, #24
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b085      	sub	sp, #20
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	607a      	str	r2, [r7, #4]
 8002c80:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c8a:	2101      	movs	r1, #1
 8002c8c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c90:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	683a      	ldr	r2, [r7, #0]
 8002c98:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	2b10      	cmp	r3, #16
 8002ca0:	d108      	bne.n	8002cb4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	68ba      	ldr	r2, [r7, #8]
 8002cb0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002cb2:	e007      	b.n	8002cc4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	68ba      	ldr	r2, [r7, #8]
 8002cba:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	60da      	str	r2, [r3, #12]
}
 8002cc4:	bf00      	nop
 8002cc6:	3714      	adds	r7, #20
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bc80      	pop	{r7}
 8002ccc:	4770      	bx	lr
	...

08002cd0 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cd2:	b087      	sub	sp, #28
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	60f8      	str	r0, [r7, #12]
 8002cd8:	60b9      	str	r1, [r7, #8]
 8002cda:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002cea:	4b2f      	ldr	r3, [pc, #188]	@ (8002da8 <HAL_FLASH_Program+0xd8>)
 8002cec:	7e1b      	ldrb	r3, [r3, #24]
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d101      	bne.n	8002cf6 <HAL_FLASH_Program+0x26>
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	e054      	b.n	8002da0 <HAL_FLASH_Program+0xd0>
 8002cf6:	4b2c      	ldr	r3, [pc, #176]	@ (8002da8 <HAL_FLASH_Program+0xd8>)
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002cfc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002d00:	f000 f8a8 	bl	8002e54 <FLASH_WaitForLastOperation>
 8002d04:	4603      	mov	r3, r0
 8002d06:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8002d08:	7dfb      	ldrb	r3, [r7, #23]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d144      	bne.n	8002d98 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d102      	bne.n	8002d1a <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8002d14:	2301      	movs	r3, #1
 8002d16:	757b      	strb	r3, [r7, #21]
 8002d18:	e007      	b.n	8002d2a <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d102      	bne.n	8002d26 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8002d20:	2302      	movs	r3, #2
 8002d22:	757b      	strb	r3, [r7, #21]
 8002d24:	e001      	b.n	8002d2a <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8002d26:	2304      	movs	r3, #4
 8002d28:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	75bb      	strb	r3, [r7, #22]
 8002d2e:	e02d      	b.n	8002d8c <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8002d30:	7dbb      	ldrb	r3, [r7, #22]
 8002d32:	005a      	lsls	r2, r3, #1
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	eb02 0c03 	add.w	ip, r2, r3
 8002d3a:	7dbb      	ldrb	r3, [r7, #22]
 8002d3c:	0119      	lsls	r1, r3, #4
 8002d3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002d42:	f1c1 0620 	rsb	r6, r1, #32
 8002d46:	f1a1 0020 	sub.w	r0, r1, #32
 8002d4a:	fa22 f401 	lsr.w	r4, r2, r1
 8002d4e:	fa03 f606 	lsl.w	r6, r3, r6
 8002d52:	4334      	orrs	r4, r6
 8002d54:	fa23 f000 	lsr.w	r0, r3, r0
 8002d58:	4304      	orrs	r4, r0
 8002d5a:	fa23 f501 	lsr.w	r5, r3, r1
 8002d5e:	b2a3      	uxth	r3, r4
 8002d60:	4619      	mov	r1, r3
 8002d62:	4660      	mov	r0, ip
 8002d64:	f000 f85a 	bl	8002e1c <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002d68:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002d6c:	f000 f872 	bl	8002e54 <FLASH_WaitForLastOperation>
 8002d70:	4603      	mov	r3, r0
 8002d72:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002d74:	4b0d      	ldr	r3, [pc, #52]	@ (8002dac <HAL_FLASH_Program+0xdc>)
 8002d76:	691b      	ldr	r3, [r3, #16]
 8002d78:	4a0c      	ldr	r2, [pc, #48]	@ (8002dac <HAL_FLASH_Program+0xdc>)
 8002d7a:	f023 0301 	bic.w	r3, r3, #1
 8002d7e:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8002d80:	7dfb      	ldrb	r3, [r7, #23]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d107      	bne.n	8002d96 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8002d86:	7dbb      	ldrb	r3, [r7, #22]
 8002d88:	3301      	adds	r3, #1
 8002d8a:	75bb      	strb	r3, [r7, #22]
 8002d8c:	7dba      	ldrb	r2, [r7, #22]
 8002d8e:	7d7b      	ldrb	r3, [r7, #21]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d3cd      	bcc.n	8002d30 <HAL_FLASH_Program+0x60>
 8002d94:	e000      	b.n	8002d98 <HAL_FLASH_Program+0xc8>
      {
        break;
 8002d96:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002d98:	4b03      	ldr	r3, [pc, #12]	@ (8002da8 <HAL_FLASH_Program+0xd8>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	761a      	strb	r2, [r3, #24]

  return status;
 8002d9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	371c      	adds	r7, #28
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002da8:	200005b0 	.word	0x200005b0
 8002dac:	40022000 	.word	0x40022000

08002db0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002db6:	2300      	movs	r3, #0
 8002db8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002dba:	4b0d      	ldr	r3, [pc, #52]	@ (8002df0 <HAL_FLASH_Unlock+0x40>)
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d00d      	beq.n	8002de2 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002dc6:	4b0a      	ldr	r3, [pc, #40]	@ (8002df0 <HAL_FLASH_Unlock+0x40>)
 8002dc8:	4a0a      	ldr	r2, [pc, #40]	@ (8002df4 <HAL_FLASH_Unlock+0x44>)
 8002dca:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002dcc:	4b08      	ldr	r3, [pc, #32]	@ (8002df0 <HAL_FLASH_Unlock+0x40>)
 8002dce:	4a0a      	ldr	r2, [pc, #40]	@ (8002df8 <HAL_FLASH_Unlock+0x48>)
 8002dd0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002dd2:	4b07      	ldr	r3, [pc, #28]	@ (8002df0 <HAL_FLASH_Unlock+0x40>)
 8002dd4:	691b      	ldr	r3, [r3, #16]
 8002dd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d001      	beq.n	8002de2 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8002de2:	79fb      	ldrb	r3, [r7, #7]
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bc80      	pop	{r7}
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop
 8002df0:	40022000 	.word	0x40022000
 8002df4:	45670123 	.word	0x45670123
 8002df8:	cdef89ab 	.word	0xcdef89ab

08002dfc <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002e00:	4b05      	ldr	r3, [pc, #20]	@ (8002e18 <HAL_FLASH_Lock+0x1c>)
 8002e02:	691b      	ldr	r3, [r3, #16]
 8002e04:	4a04      	ldr	r2, [pc, #16]	@ (8002e18 <HAL_FLASH_Lock+0x1c>)
 8002e06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e0a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bc80      	pop	{r7}
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop
 8002e18:	40022000 	.word	0x40022000

08002e1c <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	460b      	mov	r3, r1
 8002e26:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002e28:	4b08      	ldr	r3, [pc, #32]	@ (8002e4c <FLASH_Program_HalfWord+0x30>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002e2e:	4b08      	ldr	r3, [pc, #32]	@ (8002e50 <FLASH_Program_HalfWord+0x34>)
 8002e30:	691b      	ldr	r3, [r3, #16]
 8002e32:	4a07      	ldr	r2, [pc, #28]	@ (8002e50 <FLASH_Program_HalfWord+0x34>)
 8002e34:	f043 0301 	orr.w	r3, r3, #1
 8002e38:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	887a      	ldrh	r2, [r7, #2]
 8002e3e:	801a      	strh	r2, [r3, #0]
}
 8002e40:	bf00      	nop
 8002e42:	370c      	adds	r7, #12
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bc80      	pop	{r7}
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	200005b0 	.word	0x200005b0
 8002e50:	40022000 	.word	0x40022000

08002e54 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8002e5c:	f7fe faf8 	bl	8001450 <HAL_GetTick>
 8002e60:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002e62:	e010      	b.n	8002e86 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002e6a:	d00c      	beq.n	8002e86 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d007      	beq.n	8002e82 <FLASH_WaitForLastOperation+0x2e>
 8002e72:	f7fe faed 	bl	8001450 <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d201      	bcs.n	8002e86 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	e025      	b.n	8002ed2 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002e86:	4b15      	ldr	r3, [pc, #84]	@ (8002edc <FLASH_WaitForLastOperation+0x88>)
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	f003 0301 	and.w	r3, r3, #1
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d1e8      	bne.n	8002e64 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002e92:	4b12      	ldr	r3, [pc, #72]	@ (8002edc <FLASH_WaitForLastOperation+0x88>)
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	f003 0320 	and.w	r3, r3, #32
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d002      	beq.n	8002ea4 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002e9e:	4b0f      	ldr	r3, [pc, #60]	@ (8002edc <FLASH_WaitForLastOperation+0x88>)
 8002ea0:	2220      	movs	r2, #32
 8002ea2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002ea4:	4b0d      	ldr	r3, [pc, #52]	@ (8002edc <FLASH_WaitForLastOperation+0x88>)
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	f003 0310 	and.w	r3, r3, #16
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d10b      	bne.n	8002ec8 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002eb0:	4b0a      	ldr	r3, [pc, #40]	@ (8002edc <FLASH_WaitForLastOperation+0x88>)
 8002eb2:	69db      	ldr	r3, [r3, #28]
 8002eb4:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d105      	bne.n	8002ec8 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002ebc:	4b07      	ldr	r3, [pc, #28]	@ (8002edc <FLASH_WaitForLastOperation+0x88>)
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d003      	beq.n	8002ed0 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002ec8:	f000 f80a 	bl	8002ee0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e000      	b.n	8002ed2 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3710      	adds	r7, #16
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	40022000 	.word	0x40022000

08002ee0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002eea:	4b23      	ldr	r3, [pc, #140]	@ (8002f78 <FLASH_SetErrorCode+0x98>)
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	f003 0310 	and.w	r3, r3, #16
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d009      	beq.n	8002f0a <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002ef6:	4b21      	ldr	r3, [pc, #132]	@ (8002f7c <FLASH_SetErrorCode+0x9c>)
 8002ef8:	69db      	ldr	r3, [r3, #28]
 8002efa:	f043 0302 	orr.w	r3, r3, #2
 8002efe:	4a1f      	ldr	r2, [pc, #124]	@ (8002f7c <FLASH_SetErrorCode+0x9c>)
 8002f00:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f043 0310 	orr.w	r3, r3, #16
 8002f08:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002f0a:	4b1b      	ldr	r3, [pc, #108]	@ (8002f78 <FLASH_SetErrorCode+0x98>)
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	f003 0304 	and.w	r3, r3, #4
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d009      	beq.n	8002f2a <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8002f16:	4b19      	ldr	r3, [pc, #100]	@ (8002f7c <FLASH_SetErrorCode+0x9c>)
 8002f18:	69db      	ldr	r3, [r3, #28]
 8002f1a:	f043 0301 	orr.w	r3, r3, #1
 8002f1e:	4a17      	ldr	r2, [pc, #92]	@ (8002f7c <FLASH_SetErrorCode+0x9c>)
 8002f20:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f043 0304 	orr.w	r3, r3, #4
 8002f28:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8002f2a:	4b13      	ldr	r3, [pc, #76]	@ (8002f78 <FLASH_SetErrorCode+0x98>)
 8002f2c:	69db      	ldr	r3, [r3, #28]
 8002f2e:	f003 0301 	and.w	r3, r3, #1
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d00b      	beq.n	8002f4e <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8002f36:	4b11      	ldr	r3, [pc, #68]	@ (8002f7c <FLASH_SetErrorCode+0x9c>)
 8002f38:	69db      	ldr	r3, [r3, #28]
 8002f3a:	f043 0304 	orr.w	r3, r3, #4
 8002f3e:	4a0f      	ldr	r2, [pc, #60]	@ (8002f7c <FLASH_SetErrorCode+0x9c>)
 8002f40:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002f42:	4b0d      	ldr	r3, [pc, #52]	@ (8002f78 <FLASH_SetErrorCode+0x98>)
 8002f44:	69db      	ldr	r3, [r3, #28]
 8002f46:	4a0c      	ldr	r2, [pc, #48]	@ (8002f78 <FLASH_SetErrorCode+0x98>)
 8002f48:	f023 0301 	bic.w	r3, r3, #1
 8002f4c:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f240 1201 	movw	r2, #257	@ 0x101
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d106      	bne.n	8002f66 <FLASH_SetErrorCode+0x86>
 8002f58:	4b07      	ldr	r3, [pc, #28]	@ (8002f78 <FLASH_SetErrorCode+0x98>)
 8002f5a:	69db      	ldr	r3, [r3, #28]
 8002f5c:	4a06      	ldr	r2, [pc, #24]	@ (8002f78 <FLASH_SetErrorCode+0x98>)
 8002f5e:	f023 0301 	bic.w	r3, r3, #1
 8002f62:	61d3      	str	r3, [r2, #28]
}  
 8002f64:	e002      	b.n	8002f6c <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002f66:	4a04      	ldr	r2, [pc, #16]	@ (8002f78 <FLASH_SetErrorCode+0x98>)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	60d3      	str	r3, [r2, #12]
}  
 8002f6c:	bf00      	nop
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bc80      	pop	{r7}
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop
 8002f78:	40022000 	.word	0x40022000
 8002f7c:	200005b0 	.word	0x200005b0

08002f80 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002f92:	4b2f      	ldr	r3, [pc, #188]	@ (8003050 <HAL_FLASHEx_Erase+0xd0>)
 8002f94:	7e1b      	ldrb	r3, [r3, #24]
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d101      	bne.n	8002f9e <HAL_FLASHEx_Erase+0x1e>
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	e053      	b.n	8003046 <HAL_FLASHEx_Erase+0xc6>
 8002f9e:	4b2c      	ldr	r3, [pc, #176]	@ (8003050 <HAL_FLASHEx_Erase+0xd0>)
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d116      	bne.n	8002fda <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002fac:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002fb0:	f7ff ff50 	bl	8002e54 <FLASH_WaitForLastOperation>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d141      	bne.n	800303e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8002fba:	2001      	movs	r0, #1
 8002fbc:	f000 f84c 	bl	8003058 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002fc0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002fc4:	f7ff ff46 	bl	8002e54 <FLASH_WaitForLastOperation>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002fcc:	4b21      	ldr	r3, [pc, #132]	@ (8003054 <HAL_FLASHEx_Erase+0xd4>)
 8002fce:	691b      	ldr	r3, [r3, #16]
 8002fd0:	4a20      	ldr	r2, [pc, #128]	@ (8003054 <HAL_FLASHEx_Erase+0xd4>)
 8002fd2:	f023 0304 	bic.w	r3, r3, #4
 8002fd6:	6113      	str	r3, [r2, #16]
 8002fd8:	e031      	b.n	800303e <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002fda:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002fde:	f7ff ff39 	bl	8002e54 <FLASH_WaitForLastOperation>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d12a      	bne.n	800303e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002fee:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	60bb      	str	r3, [r7, #8]
 8002ff6:	e019      	b.n	800302c <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8002ff8:	68b8      	ldr	r0, [r7, #8]
 8002ffa:	f000 f849 	bl	8003090 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002ffe:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003002:	f7ff ff27 	bl	8002e54 <FLASH_WaitForLastOperation>
 8003006:	4603      	mov	r3, r0
 8003008:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800300a:	4b12      	ldr	r3, [pc, #72]	@ (8003054 <HAL_FLASHEx_Erase+0xd4>)
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	4a11      	ldr	r2, [pc, #68]	@ (8003054 <HAL_FLASHEx_Erase+0xd4>)
 8003010:	f023 0302 	bic.w	r3, r3, #2
 8003014:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8003016:	7bfb      	ldrb	r3, [r7, #15]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d003      	beq.n	8003024 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	68ba      	ldr	r2, [r7, #8]
 8003020:	601a      	str	r2, [r3, #0]
            break;
 8003022:	e00c      	b.n	800303e <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800302a:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	029a      	lsls	r2, r3, #10
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	4413      	add	r3, r2
 8003038:	68ba      	ldr	r2, [r7, #8]
 800303a:	429a      	cmp	r2, r3
 800303c:	d3dc      	bcc.n	8002ff8 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800303e:	4b04      	ldr	r3, [pc, #16]	@ (8003050 <HAL_FLASHEx_Erase+0xd0>)
 8003040:	2200      	movs	r2, #0
 8003042:	761a      	strb	r2, [r3, #24]

  return status;
 8003044:	7bfb      	ldrb	r3, [r7, #15]
}
 8003046:	4618      	mov	r0, r3
 8003048:	3710      	adds	r7, #16
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	200005b0 	.word	0x200005b0
 8003054:	40022000 	.word	0x40022000

08003058 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003060:	4b09      	ldr	r3, [pc, #36]	@ (8003088 <FLASH_MassErase+0x30>)
 8003062:	2200      	movs	r2, #0
 8003064:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8003066:	4b09      	ldr	r3, [pc, #36]	@ (800308c <FLASH_MassErase+0x34>)
 8003068:	691b      	ldr	r3, [r3, #16]
 800306a:	4a08      	ldr	r2, [pc, #32]	@ (800308c <FLASH_MassErase+0x34>)
 800306c:	f043 0304 	orr.w	r3, r3, #4
 8003070:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003072:	4b06      	ldr	r3, [pc, #24]	@ (800308c <FLASH_MassErase+0x34>)
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	4a05      	ldr	r2, [pc, #20]	@ (800308c <FLASH_MassErase+0x34>)
 8003078:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800307c:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800307e:	bf00      	nop
 8003080:	370c      	adds	r7, #12
 8003082:	46bd      	mov	sp, r7
 8003084:	bc80      	pop	{r7}
 8003086:	4770      	bx	lr
 8003088:	200005b0 	.word	0x200005b0
 800308c:	40022000 	.word	0x40022000

08003090 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003098:	4b0b      	ldr	r3, [pc, #44]	@ (80030c8 <FLASH_PageErase+0x38>)
 800309a:	2200      	movs	r2, #0
 800309c:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800309e:	4b0b      	ldr	r3, [pc, #44]	@ (80030cc <FLASH_PageErase+0x3c>)
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	4a0a      	ldr	r2, [pc, #40]	@ (80030cc <FLASH_PageErase+0x3c>)
 80030a4:	f043 0302 	orr.w	r3, r3, #2
 80030a8:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80030aa:	4a08      	ldr	r2, [pc, #32]	@ (80030cc <FLASH_PageErase+0x3c>)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80030b0:	4b06      	ldr	r3, [pc, #24]	@ (80030cc <FLASH_PageErase+0x3c>)
 80030b2:	691b      	ldr	r3, [r3, #16]
 80030b4:	4a05      	ldr	r2, [pc, #20]	@ (80030cc <FLASH_PageErase+0x3c>)
 80030b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80030ba:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80030bc:	bf00      	nop
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bc80      	pop	{r7}
 80030c4:	4770      	bx	lr
 80030c6:	bf00      	nop
 80030c8:	200005b0 	.word	0x200005b0
 80030cc:	40022000 	.word	0x40022000

080030d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b08b      	sub	sp, #44	@ 0x2c
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030da:	2300      	movs	r3, #0
 80030dc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80030de:	2300      	movs	r3, #0
 80030e0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030e2:	e169      	b.n	80033b8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80030e4:	2201      	movs	r2, #1
 80030e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030e8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	69fa      	ldr	r2, [r7, #28]
 80030f4:	4013      	ands	r3, r2
 80030f6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80030f8:	69ba      	ldr	r2, [r7, #24]
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	f040 8158 	bne.w	80033b2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	4a9a      	ldr	r2, [pc, #616]	@ (8003370 <HAL_GPIO_Init+0x2a0>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d05e      	beq.n	80031ca <HAL_GPIO_Init+0xfa>
 800310c:	4a98      	ldr	r2, [pc, #608]	@ (8003370 <HAL_GPIO_Init+0x2a0>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d875      	bhi.n	80031fe <HAL_GPIO_Init+0x12e>
 8003112:	4a98      	ldr	r2, [pc, #608]	@ (8003374 <HAL_GPIO_Init+0x2a4>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d058      	beq.n	80031ca <HAL_GPIO_Init+0xfa>
 8003118:	4a96      	ldr	r2, [pc, #600]	@ (8003374 <HAL_GPIO_Init+0x2a4>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d86f      	bhi.n	80031fe <HAL_GPIO_Init+0x12e>
 800311e:	4a96      	ldr	r2, [pc, #600]	@ (8003378 <HAL_GPIO_Init+0x2a8>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d052      	beq.n	80031ca <HAL_GPIO_Init+0xfa>
 8003124:	4a94      	ldr	r2, [pc, #592]	@ (8003378 <HAL_GPIO_Init+0x2a8>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d869      	bhi.n	80031fe <HAL_GPIO_Init+0x12e>
 800312a:	4a94      	ldr	r2, [pc, #592]	@ (800337c <HAL_GPIO_Init+0x2ac>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d04c      	beq.n	80031ca <HAL_GPIO_Init+0xfa>
 8003130:	4a92      	ldr	r2, [pc, #584]	@ (800337c <HAL_GPIO_Init+0x2ac>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d863      	bhi.n	80031fe <HAL_GPIO_Init+0x12e>
 8003136:	4a92      	ldr	r2, [pc, #584]	@ (8003380 <HAL_GPIO_Init+0x2b0>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d046      	beq.n	80031ca <HAL_GPIO_Init+0xfa>
 800313c:	4a90      	ldr	r2, [pc, #576]	@ (8003380 <HAL_GPIO_Init+0x2b0>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d85d      	bhi.n	80031fe <HAL_GPIO_Init+0x12e>
 8003142:	2b12      	cmp	r3, #18
 8003144:	d82a      	bhi.n	800319c <HAL_GPIO_Init+0xcc>
 8003146:	2b12      	cmp	r3, #18
 8003148:	d859      	bhi.n	80031fe <HAL_GPIO_Init+0x12e>
 800314a:	a201      	add	r2, pc, #4	@ (adr r2, 8003150 <HAL_GPIO_Init+0x80>)
 800314c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003150:	080031cb 	.word	0x080031cb
 8003154:	080031a5 	.word	0x080031a5
 8003158:	080031b7 	.word	0x080031b7
 800315c:	080031f9 	.word	0x080031f9
 8003160:	080031ff 	.word	0x080031ff
 8003164:	080031ff 	.word	0x080031ff
 8003168:	080031ff 	.word	0x080031ff
 800316c:	080031ff 	.word	0x080031ff
 8003170:	080031ff 	.word	0x080031ff
 8003174:	080031ff 	.word	0x080031ff
 8003178:	080031ff 	.word	0x080031ff
 800317c:	080031ff 	.word	0x080031ff
 8003180:	080031ff 	.word	0x080031ff
 8003184:	080031ff 	.word	0x080031ff
 8003188:	080031ff 	.word	0x080031ff
 800318c:	080031ff 	.word	0x080031ff
 8003190:	080031ff 	.word	0x080031ff
 8003194:	080031ad 	.word	0x080031ad
 8003198:	080031c1 	.word	0x080031c1
 800319c:	4a79      	ldr	r2, [pc, #484]	@ (8003384 <HAL_GPIO_Init+0x2b4>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d013      	beq.n	80031ca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80031a2:	e02c      	b.n	80031fe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	623b      	str	r3, [r7, #32]
          break;
 80031aa:	e029      	b.n	8003200 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	3304      	adds	r3, #4
 80031b2:	623b      	str	r3, [r7, #32]
          break;
 80031b4:	e024      	b.n	8003200 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	3308      	adds	r3, #8
 80031bc:	623b      	str	r3, [r7, #32]
          break;
 80031be:	e01f      	b.n	8003200 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	330c      	adds	r3, #12
 80031c6:	623b      	str	r3, [r7, #32]
          break;
 80031c8:	e01a      	b.n	8003200 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d102      	bne.n	80031d8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80031d2:	2304      	movs	r3, #4
 80031d4:	623b      	str	r3, [r7, #32]
          break;
 80031d6:	e013      	b.n	8003200 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d105      	bne.n	80031ec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80031e0:	2308      	movs	r3, #8
 80031e2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	69fa      	ldr	r2, [r7, #28]
 80031e8:	611a      	str	r2, [r3, #16]
          break;
 80031ea:	e009      	b.n	8003200 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80031ec:	2308      	movs	r3, #8
 80031ee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	69fa      	ldr	r2, [r7, #28]
 80031f4:	615a      	str	r2, [r3, #20]
          break;
 80031f6:	e003      	b.n	8003200 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80031f8:	2300      	movs	r3, #0
 80031fa:	623b      	str	r3, [r7, #32]
          break;
 80031fc:	e000      	b.n	8003200 <HAL_GPIO_Init+0x130>
          break;
 80031fe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	2bff      	cmp	r3, #255	@ 0xff
 8003204:	d801      	bhi.n	800320a <HAL_GPIO_Init+0x13a>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	e001      	b.n	800320e <HAL_GPIO_Init+0x13e>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	3304      	adds	r3, #4
 800320e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	2bff      	cmp	r3, #255	@ 0xff
 8003214:	d802      	bhi.n	800321c <HAL_GPIO_Init+0x14c>
 8003216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	e002      	b.n	8003222 <HAL_GPIO_Init+0x152>
 800321c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800321e:	3b08      	subs	r3, #8
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	210f      	movs	r1, #15
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	fa01 f303 	lsl.w	r3, r1, r3
 8003230:	43db      	mvns	r3, r3
 8003232:	401a      	ands	r2, r3
 8003234:	6a39      	ldr	r1, [r7, #32]
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	fa01 f303 	lsl.w	r3, r1, r3
 800323c:	431a      	orrs	r2, r3
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800324a:	2b00      	cmp	r3, #0
 800324c:	f000 80b1 	beq.w	80033b2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003250:	4b4d      	ldr	r3, [pc, #308]	@ (8003388 <HAL_GPIO_Init+0x2b8>)
 8003252:	699b      	ldr	r3, [r3, #24]
 8003254:	4a4c      	ldr	r2, [pc, #304]	@ (8003388 <HAL_GPIO_Init+0x2b8>)
 8003256:	f043 0301 	orr.w	r3, r3, #1
 800325a:	6193      	str	r3, [r2, #24]
 800325c:	4b4a      	ldr	r3, [pc, #296]	@ (8003388 <HAL_GPIO_Init+0x2b8>)
 800325e:	699b      	ldr	r3, [r3, #24]
 8003260:	f003 0301 	and.w	r3, r3, #1
 8003264:	60bb      	str	r3, [r7, #8]
 8003266:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003268:	4a48      	ldr	r2, [pc, #288]	@ (800338c <HAL_GPIO_Init+0x2bc>)
 800326a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800326c:	089b      	lsrs	r3, r3, #2
 800326e:	3302      	adds	r3, #2
 8003270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003274:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003278:	f003 0303 	and.w	r3, r3, #3
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	220f      	movs	r2, #15
 8003280:	fa02 f303 	lsl.w	r3, r2, r3
 8003284:	43db      	mvns	r3, r3
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	4013      	ands	r3, r2
 800328a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4a40      	ldr	r2, [pc, #256]	@ (8003390 <HAL_GPIO_Init+0x2c0>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d013      	beq.n	80032bc <HAL_GPIO_Init+0x1ec>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4a3f      	ldr	r2, [pc, #252]	@ (8003394 <HAL_GPIO_Init+0x2c4>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d00d      	beq.n	80032b8 <HAL_GPIO_Init+0x1e8>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4a3e      	ldr	r2, [pc, #248]	@ (8003398 <HAL_GPIO_Init+0x2c8>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d007      	beq.n	80032b4 <HAL_GPIO_Init+0x1e4>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a3d      	ldr	r2, [pc, #244]	@ (800339c <HAL_GPIO_Init+0x2cc>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d101      	bne.n	80032b0 <HAL_GPIO_Init+0x1e0>
 80032ac:	2303      	movs	r3, #3
 80032ae:	e006      	b.n	80032be <HAL_GPIO_Init+0x1ee>
 80032b0:	2304      	movs	r3, #4
 80032b2:	e004      	b.n	80032be <HAL_GPIO_Init+0x1ee>
 80032b4:	2302      	movs	r3, #2
 80032b6:	e002      	b.n	80032be <HAL_GPIO_Init+0x1ee>
 80032b8:	2301      	movs	r3, #1
 80032ba:	e000      	b.n	80032be <HAL_GPIO_Init+0x1ee>
 80032bc:	2300      	movs	r3, #0
 80032be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032c0:	f002 0203 	and.w	r2, r2, #3
 80032c4:	0092      	lsls	r2, r2, #2
 80032c6:	4093      	lsls	r3, r2
 80032c8:	68fa      	ldr	r2, [r7, #12]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80032ce:	492f      	ldr	r1, [pc, #188]	@ (800338c <HAL_GPIO_Init+0x2bc>)
 80032d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032d2:	089b      	lsrs	r3, r3, #2
 80032d4:	3302      	adds	r3, #2
 80032d6:	68fa      	ldr	r2, [r7, #12]
 80032d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d006      	beq.n	80032f6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80032e8:	4b2d      	ldr	r3, [pc, #180]	@ (80033a0 <HAL_GPIO_Init+0x2d0>)
 80032ea:	689a      	ldr	r2, [r3, #8]
 80032ec:	492c      	ldr	r1, [pc, #176]	@ (80033a0 <HAL_GPIO_Init+0x2d0>)
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	608b      	str	r3, [r1, #8]
 80032f4:	e006      	b.n	8003304 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80032f6:	4b2a      	ldr	r3, [pc, #168]	@ (80033a0 <HAL_GPIO_Init+0x2d0>)
 80032f8:	689a      	ldr	r2, [r3, #8]
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	43db      	mvns	r3, r3
 80032fe:	4928      	ldr	r1, [pc, #160]	@ (80033a0 <HAL_GPIO_Init+0x2d0>)
 8003300:	4013      	ands	r3, r2
 8003302:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d006      	beq.n	800331e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003310:	4b23      	ldr	r3, [pc, #140]	@ (80033a0 <HAL_GPIO_Init+0x2d0>)
 8003312:	68da      	ldr	r2, [r3, #12]
 8003314:	4922      	ldr	r1, [pc, #136]	@ (80033a0 <HAL_GPIO_Init+0x2d0>)
 8003316:	69bb      	ldr	r3, [r7, #24]
 8003318:	4313      	orrs	r3, r2
 800331a:	60cb      	str	r3, [r1, #12]
 800331c:	e006      	b.n	800332c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800331e:	4b20      	ldr	r3, [pc, #128]	@ (80033a0 <HAL_GPIO_Init+0x2d0>)
 8003320:	68da      	ldr	r2, [r3, #12]
 8003322:	69bb      	ldr	r3, [r7, #24]
 8003324:	43db      	mvns	r3, r3
 8003326:	491e      	ldr	r1, [pc, #120]	@ (80033a0 <HAL_GPIO_Init+0x2d0>)
 8003328:	4013      	ands	r3, r2
 800332a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d006      	beq.n	8003346 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003338:	4b19      	ldr	r3, [pc, #100]	@ (80033a0 <HAL_GPIO_Init+0x2d0>)
 800333a:	685a      	ldr	r2, [r3, #4]
 800333c:	4918      	ldr	r1, [pc, #96]	@ (80033a0 <HAL_GPIO_Init+0x2d0>)
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	4313      	orrs	r3, r2
 8003342:	604b      	str	r3, [r1, #4]
 8003344:	e006      	b.n	8003354 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003346:	4b16      	ldr	r3, [pc, #88]	@ (80033a0 <HAL_GPIO_Init+0x2d0>)
 8003348:	685a      	ldr	r2, [r3, #4]
 800334a:	69bb      	ldr	r3, [r7, #24]
 800334c:	43db      	mvns	r3, r3
 800334e:	4914      	ldr	r1, [pc, #80]	@ (80033a0 <HAL_GPIO_Init+0x2d0>)
 8003350:	4013      	ands	r3, r2
 8003352:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d021      	beq.n	80033a4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003360:	4b0f      	ldr	r3, [pc, #60]	@ (80033a0 <HAL_GPIO_Init+0x2d0>)
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	490e      	ldr	r1, [pc, #56]	@ (80033a0 <HAL_GPIO_Init+0x2d0>)
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	4313      	orrs	r3, r2
 800336a:	600b      	str	r3, [r1, #0]
 800336c:	e021      	b.n	80033b2 <HAL_GPIO_Init+0x2e2>
 800336e:	bf00      	nop
 8003370:	10320000 	.word	0x10320000
 8003374:	10310000 	.word	0x10310000
 8003378:	10220000 	.word	0x10220000
 800337c:	10210000 	.word	0x10210000
 8003380:	10120000 	.word	0x10120000
 8003384:	10110000 	.word	0x10110000
 8003388:	40021000 	.word	0x40021000
 800338c:	40010000 	.word	0x40010000
 8003390:	40010800 	.word	0x40010800
 8003394:	40010c00 	.word	0x40010c00
 8003398:	40011000 	.word	0x40011000
 800339c:	40011400 	.word	0x40011400
 80033a0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80033a4:	4b0b      	ldr	r3, [pc, #44]	@ (80033d4 <HAL_GPIO_Init+0x304>)
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	43db      	mvns	r3, r3
 80033ac:	4909      	ldr	r1, [pc, #36]	@ (80033d4 <HAL_GPIO_Init+0x304>)
 80033ae:	4013      	ands	r3, r2
 80033b0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80033b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b4:	3301      	adds	r3, #1
 80033b6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033be:	fa22 f303 	lsr.w	r3, r2, r3
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	f47f ae8e 	bne.w	80030e4 <HAL_GPIO_Init+0x14>
  }
}
 80033c8:	bf00      	nop
 80033ca:	bf00      	nop
 80033cc:	372c      	adds	r7, #44	@ 0x2c
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bc80      	pop	{r7}
 80033d2:	4770      	bx	lr
 80033d4:	40010400 	.word	0x40010400

080033d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	460b      	mov	r3, r1
 80033e2:	807b      	strh	r3, [r7, #2]
 80033e4:	4613      	mov	r3, r2
 80033e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80033e8:	787b      	ldrb	r3, [r7, #1]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d003      	beq.n	80033f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033ee:	887a      	ldrh	r2, [r7, #2]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80033f4:	e003      	b.n	80033fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80033f6:	887b      	ldrh	r3, [r7, #2]
 80033f8:	041a      	lsls	r2, r3, #16
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	611a      	str	r2, [r3, #16]
}
 80033fe:	bf00      	nop
 8003400:	370c      	adds	r7, #12
 8003402:	46bd      	mov	sp, r7
 8003404:	bc80      	pop	{r7}
 8003406:	4770      	bx	lr

08003408 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b086      	sub	sp, #24
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d101      	bne.n	800341a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e272      	b.n	8003900 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0301 	and.w	r3, r3, #1
 8003422:	2b00      	cmp	r3, #0
 8003424:	f000 8087 	beq.w	8003536 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003428:	4b92      	ldr	r3, [pc, #584]	@ (8003674 <HAL_RCC_OscConfig+0x26c>)
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f003 030c 	and.w	r3, r3, #12
 8003430:	2b04      	cmp	r3, #4
 8003432:	d00c      	beq.n	800344e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003434:	4b8f      	ldr	r3, [pc, #572]	@ (8003674 <HAL_RCC_OscConfig+0x26c>)
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f003 030c 	and.w	r3, r3, #12
 800343c:	2b08      	cmp	r3, #8
 800343e:	d112      	bne.n	8003466 <HAL_RCC_OscConfig+0x5e>
 8003440:	4b8c      	ldr	r3, [pc, #560]	@ (8003674 <HAL_RCC_OscConfig+0x26c>)
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003448:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800344c:	d10b      	bne.n	8003466 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800344e:	4b89      	ldr	r3, [pc, #548]	@ (8003674 <HAL_RCC_OscConfig+0x26c>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d06c      	beq.n	8003534 <HAL_RCC_OscConfig+0x12c>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d168      	bne.n	8003534 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e24c      	b.n	8003900 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800346e:	d106      	bne.n	800347e <HAL_RCC_OscConfig+0x76>
 8003470:	4b80      	ldr	r3, [pc, #512]	@ (8003674 <HAL_RCC_OscConfig+0x26c>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a7f      	ldr	r2, [pc, #508]	@ (8003674 <HAL_RCC_OscConfig+0x26c>)
 8003476:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800347a:	6013      	str	r3, [r2, #0]
 800347c:	e02e      	b.n	80034dc <HAL_RCC_OscConfig+0xd4>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d10c      	bne.n	80034a0 <HAL_RCC_OscConfig+0x98>
 8003486:	4b7b      	ldr	r3, [pc, #492]	@ (8003674 <HAL_RCC_OscConfig+0x26c>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a7a      	ldr	r2, [pc, #488]	@ (8003674 <HAL_RCC_OscConfig+0x26c>)
 800348c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003490:	6013      	str	r3, [r2, #0]
 8003492:	4b78      	ldr	r3, [pc, #480]	@ (8003674 <HAL_RCC_OscConfig+0x26c>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a77      	ldr	r2, [pc, #476]	@ (8003674 <HAL_RCC_OscConfig+0x26c>)
 8003498:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800349c:	6013      	str	r3, [r2, #0]
 800349e:	e01d      	b.n	80034dc <HAL_RCC_OscConfig+0xd4>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80034a8:	d10c      	bne.n	80034c4 <HAL_RCC_OscConfig+0xbc>
 80034aa:	4b72      	ldr	r3, [pc, #456]	@ (8003674 <HAL_RCC_OscConfig+0x26c>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a71      	ldr	r2, [pc, #452]	@ (8003674 <HAL_RCC_OscConfig+0x26c>)
 80034b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80034b4:	6013      	str	r3, [r2, #0]
 80034b6:	4b6f      	ldr	r3, [pc, #444]	@ (8003674 <HAL_RCC_OscConfig+0x26c>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a6e      	ldr	r2, [pc, #440]	@ (8003674 <HAL_RCC_OscConfig+0x26c>)
 80034bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034c0:	6013      	str	r3, [r2, #0]
 80034c2:	e00b      	b.n	80034dc <HAL_RCC_OscConfig+0xd4>
 80034c4:	4b6b      	ldr	r3, [pc, #428]	@ (8003674 <HAL_RCC_OscConfig+0x26c>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a6a      	ldr	r2, [pc, #424]	@ (8003674 <HAL_RCC_OscConfig+0x26c>)
 80034ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034ce:	6013      	str	r3, [r2, #0]
 80034d0:	4b68      	ldr	r3, [pc, #416]	@ (8003674 <HAL_RCC_OscConfig+0x26c>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a67      	ldr	r2, [pc, #412]	@ (8003674 <HAL_RCC_OscConfig+0x26c>)
 80034d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80034da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d013      	beq.n	800350c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e4:	f7fd ffb4 	bl	8001450 <HAL_GetTick>
 80034e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ea:	e008      	b.n	80034fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034ec:	f7fd ffb0 	bl	8001450 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	2b64      	cmp	r3, #100	@ 0x64
 80034f8:	d901      	bls.n	80034fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e200      	b.n	8003900 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034fe:	4b5d      	ldr	r3, [pc, #372]	@ (8003674 <HAL_RCC_OscConfig+0x26c>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d0f0      	beq.n	80034ec <HAL_RCC_OscConfig+0xe4>
 800350a:	e014      	b.n	8003536 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800350c:	f7fd ffa0 	bl	8001450 <HAL_GetTick>
 8003510:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003512:	e008      	b.n	8003526 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003514:	f7fd ff9c 	bl	8001450 <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	2b64      	cmp	r3, #100	@ 0x64
 8003520:	d901      	bls.n	8003526 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e1ec      	b.n	8003900 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003526:	4b53      	ldr	r3, [pc, #332]	@ (8003674 <HAL_RCC_OscConfig+0x26c>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d1f0      	bne.n	8003514 <HAL_RCC_OscConfig+0x10c>
 8003532:	e000      	b.n	8003536 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003534:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0302 	and.w	r3, r3, #2
 800353e:	2b00      	cmp	r3, #0
 8003540:	d063      	beq.n	800360a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003542:	4b4c      	ldr	r3, [pc, #304]	@ (8003674 <HAL_RCC_OscConfig+0x26c>)
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f003 030c 	and.w	r3, r3, #12
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00b      	beq.n	8003566 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800354e:	4b49      	ldr	r3, [pc, #292]	@ (8003674 <HAL_RCC_OscConfig+0x26c>)
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f003 030c 	and.w	r3, r3, #12
 8003556:	2b08      	cmp	r3, #8
 8003558:	d11c      	bne.n	8003594 <HAL_RCC_OscConfig+0x18c>
 800355a:	4b46      	ldr	r3, [pc, #280]	@ (8003674 <HAL_RCC_OscConfig+0x26c>)
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d116      	bne.n	8003594 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003566:	4b43      	ldr	r3, [pc, #268]	@ (8003674 <HAL_RCC_OscConfig+0x26c>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0302 	and.w	r3, r3, #2
 800356e:	2b00      	cmp	r3, #0
 8003570:	d005      	beq.n	800357e <HAL_RCC_OscConfig+0x176>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	2b01      	cmp	r3, #1
 8003578:	d001      	beq.n	800357e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e1c0      	b.n	8003900 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800357e:	4b3d      	ldr	r3, [pc, #244]	@ (8003674 <HAL_RCC_OscConfig+0x26c>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	695b      	ldr	r3, [r3, #20]
 800358a:	00db      	lsls	r3, r3, #3
 800358c:	4939      	ldr	r1, [pc, #228]	@ (8003674 <HAL_RCC_OscConfig+0x26c>)
 800358e:	4313      	orrs	r3, r2
 8003590:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003592:	e03a      	b.n	800360a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	691b      	ldr	r3, [r3, #16]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d020      	beq.n	80035de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800359c:	4b36      	ldr	r3, [pc, #216]	@ (8003678 <HAL_RCC_OscConfig+0x270>)
 800359e:	2201      	movs	r2, #1
 80035a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035a2:	f7fd ff55 	bl	8001450 <HAL_GetTick>
 80035a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035a8:	e008      	b.n	80035bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035aa:	f7fd ff51 	bl	8001450 <HAL_GetTick>
 80035ae:	4602      	mov	r2, r0
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d901      	bls.n	80035bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80035b8:	2303      	movs	r3, #3
 80035ba:	e1a1      	b.n	8003900 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035bc:	4b2d      	ldr	r3, [pc, #180]	@ (8003674 <HAL_RCC_OscConfig+0x26c>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0302 	and.w	r3, r3, #2
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d0f0      	beq.n	80035aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035c8:	4b2a      	ldr	r3, [pc, #168]	@ (8003674 <HAL_RCC_OscConfig+0x26c>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	695b      	ldr	r3, [r3, #20]
 80035d4:	00db      	lsls	r3, r3, #3
 80035d6:	4927      	ldr	r1, [pc, #156]	@ (8003674 <HAL_RCC_OscConfig+0x26c>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	600b      	str	r3, [r1, #0]
 80035dc:	e015      	b.n	800360a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035de:	4b26      	ldr	r3, [pc, #152]	@ (8003678 <HAL_RCC_OscConfig+0x270>)
 80035e0:	2200      	movs	r2, #0
 80035e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035e4:	f7fd ff34 	bl	8001450 <HAL_GetTick>
 80035e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035ea:	e008      	b.n	80035fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035ec:	f7fd ff30 	bl	8001450 <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d901      	bls.n	80035fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e180      	b.n	8003900 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035fe:	4b1d      	ldr	r3, [pc, #116]	@ (8003674 <HAL_RCC_OscConfig+0x26c>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0302 	and.w	r3, r3, #2
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1f0      	bne.n	80035ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0308 	and.w	r3, r3, #8
 8003612:	2b00      	cmp	r3, #0
 8003614:	d03a      	beq.n	800368c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	699b      	ldr	r3, [r3, #24]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d019      	beq.n	8003652 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800361e:	4b17      	ldr	r3, [pc, #92]	@ (800367c <HAL_RCC_OscConfig+0x274>)
 8003620:	2201      	movs	r2, #1
 8003622:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003624:	f7fd ff14 	bl	8001450 <HAL_GetTick>
 8003628:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800362a:	e008      	b.n	800363e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800362c:	f7fd ff10 	bl	8001450 <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	2b02      	cmp	r3, #2
 8003638:	d901      	bls.n	800363e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e160      	b.n	8003900 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800363e:	4b0d      	ldr	r3, [pc, #52]	@ (8003674 <HAL_RCC_OscConfig+0x26c>)
 8003640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003642:	f003 0302 	and.w	r3, r3, #2
 8003646:	2b00      	cmp	r3, #0
 8003648:	d0f0      	beq.n	800362c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800364a:	2001      	movs	r0, #1
 800364c:	f000 fa9c 	bl	8003b88 <RCC_Delay>
 8003650:	e01c      	b.n	800368c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003652:	4b0a      	ldr	r3, [pc, #40]	@ (800367c <HAL_RCC_OscConfig+0x274>)
 8003654:	2200      	movs	r2, #0
 8003656:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003658:	f7fd fefa 	bl	8001450 <HAL_GetTick>
 800365c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800365e:	e00f      	b.n	8003680 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003660:	f7fd fef6 	bl	8001450 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	2b02      	cmp	r3, #2
 800366c:	d908      	bls.n	8003680 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e146      	b.n	8003900 <HAL_RCC_OscConfig+0x4f8>
 8003672:	bf00      	nop
 8003674:	40021000 	.word	0x40021000
 8003678:	42420000 	.word	0x42420000
 800367c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003680:	4b92      	ldr	r3, [pc, #584]	@ (80038cc <HAL_RCC_OscConfig+0x4c4>)
 8003682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003684:	f003 0302 	and.w	r3, r3, #2
 8003688:	2b00      	cmp	r3, #0
 800368a:	d1e9      	bne.n	8003660 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0304 	and.w	r3, r3, #4
 8003694:	2b00      	cmp	r3, #0
 8003696:	f000 80a6 	beq.w	80037e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800369a:	2300      	movs	r3, #0
 800369c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800369e:	4b8b      	ldr	r3, [pc, #556]	@ (80038cc <HAL_RCC_OscConfig+0x4c4>)
 80036a0:	69db      	ldr	r3, [r3, #28]
 80036a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d10d      	bne.n	80036c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036aa:	4b88      	ldr	r3, [pc, #544]	@ (80038cc <HAL_RCC_OscConfig+0x4c4>)
 80036ac:	69db      	ldr	r3, [r3, #28]
 80036ae:	4a87      	ldr	r2, [pc, #540]	@ (80038cc <HAL_RCC_OscConfig+0x4c4>)
 80036b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036b4:	61d3      	str	r3, [r2, #28]
 80036b6:	4b85      	ldr	r3, [pc, #532]	@ (80038cc <HAL_RCC_OscConfig+0x4c4>)
 80036b8:	69db      	ldr	r3, [r3, #28]
 80036ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036be:	60bb      	str	r3, [r7, #8]
 80036c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036c2:	2301      	movs	r3, #1
 80036c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036c6:	4b82      	ldr	r3, [pc, #520]	@ (80038d0 <HAL_RCC_OscConfig+0x4c8>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d118      	bne.n	8003704 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036d2:	4b7f      	ldr	r3, [pc, #508]	@ (80038d0 <HAL_RCC_OscConfig+0x4c8>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a7e      	ldr	r2, [pc, #504]	@ (80038d0 <HAL_RCC_OscConfig+0x4c8>)
 80036d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036de:	f7fd feb7 	bl	8001450 <HAL_GetTick>
 80036e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036e4:	e008      	b.n	80036f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036e6:	f7fd feb3 	bl	8001450 <HAL_GetTick>
 80036ea:	4602      	mov	r2, r0
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	2b64      	cmp	r3, #100	@ 0x64
 80036f2:	d901      	bls.n	80036f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	e103      	b.n	8003900 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036f8:	4b75      	ldr	r3, [pc, #468]	@ (80038d0 <HAL_RCC_OscConfig+0x4c8>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003700:	2b00      	cmp	r3, #0
 8003702:	d0f0      	beq.n	80036e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	2b01      	cmp	r3, #1
 800370a:	d106      	bne.n	800371a <HAL_RCC_OscConfig+0x312>
 800370c:	4b6f      	ldr	r3, [pc, #444]	@ (80038cc <HAL_RCC_OscConfig+0x4c4>)
 800370e:	6a1b      	ldr	r3, [r3, #32]
 8003710:	4a6e      	ldr	r2, [pc, #440]	@ (80038cc <HAL_RCC_OscConfig+0x4c4>)
 8003712:	f043 0301 	orr.w	r3, r3, #1
 8003716:	6213      	str	r3, [r2, #32]
 8003718:	e02d      	b.n	8003776 <HAL_RCC_OscConfig+0x36e>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d10c      	bne.n	800373c <HAL_RCC_OscConfig+0x334>
 8003722:	4b6a      	ldr	r3, [pc, #424]	@ (80038cc <HAL_RCC_OscConfig+0x4c4>)
 8003724:	6a1b      	ldr	r3, [r3, #32]
 8003726:	4a69      	ldr	r2, [pc, #420]	@ (80038cc <HAL_RCC_OscConfig+0x4c4>)
 8003728:	f023 0301 	bic.w	r3, r3, #1
 800372c:	6213      	str	r3, [r2, #32]
 800372e:	4b67      	ldr	r3, [pc, #412]	@ (80038cc <HAL_RCC_OscConfig+0x4c4>)
 8003730:	6a1b      	ldr	r3, [r3, #32]
 8003732:	4a66      	ldr	r2, [pc, #408]	@ (80038cc <HAL_RCC_OscConfig+0x4c4>)
 8003734:	f023 0304 	bic.w	r3, r3, #4
 8003738:	6213      	str	r3, [r2, #32]
 800373a:	e01c      	b.n	8003776 <HAL_RCC_OscConfig+0x36e>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	2b05      	cmp	r3, #5
 8003742:	d10c      	bne.n	800375e <HAL_RCC_OscConfig+0x356>
 8003744:	4b61      	ldr	r3, [pc, #388]	@ (80038cc <HAL_RCC_OscConfig+0x4c4>)
 8003746:	6a1b      	ldr	r3, [r3, #32]
 8003748:	4a60      	ldr	r2, [pc, #384]	@ (80038cc <HAL_RCC_OscConfig+0x4c4>)
 800374a:	f043 0304 	orr.w	r3, r3, #4
 800374e:	6213      	str	r3, [r2, #32]
 8003750:	4b5e      	ldr	r3, [pc, #376]	@ (80038cc <HAL_RCC_OscConfig+0x4c4>)
 8003752:	6a1b      	ldr	r3, [r3, #32]
 8003754:	4a5d      	ldr	r2, [pc, #372]	@ (80038cc <HAL_RCC_OscConfig+0x4c4>)
 8003756:	f043 0301 	orr.w	r3, r3, #1
 800375a:	6213      	str	r3, [r2, #32]
 800375c:	e00b      	b.n	8003776 <HAL_RCC_OscConfig+0x36e>
 800375e:	4b5b      	ldr	r3, [pc, #364]	@ (80038cc <HAL_RCC_OscConfig+0x4c4>)
 8003760:	6a1b      	ldr	r3, [r3, #32]
 8003762:	4a5a      	ldr	r2, [pc, #360]	@ (80038cc <HAL_RCC_OscConfig+0x4c4>)
 8003764:	f023 0301 	bic.w	r3, r3, #1
 8003768:	6213      	str	r3, [r2, #32]
 800376a:	4b58      	ldr	r3, [pc, #352]	@ (80038cc <HAL_RCC_OscConfig+0x4c4>)
 800376c:	6a1b      	ldr	r3, [r3, #32]
 800376e:	4a57      	ldr	r2, [pc, #348]	@ (80038cc <HAL_RCC_OscConfig+0x4c4>)
 8003770:	f023 0304 	bic.w	r3, r3, #4
 8003774:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d015      	beq.n	80037aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800377e:	f7fd fe67 	bl	8001450 <HAL_GetTick>
 8003782:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003784:	e00a      	b.n	800379c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003786:	f7fd fe63 	bl	8001450 <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003794:	4293      	cmp	r3, r2
 8003796:	d901      	bls.n	800379c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003798:	2303      	movs	r3, #3
 800379a:	e0b1      	b.n	8003900 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800379c:	4b4b      	ldr	r3, [pc, #300]	@ (80038cc <HAL_RCC_OscConfig+0x4c4>)
 800379e:	6a1b      	ldr	r3, [r3, #32]
 80037a0:	f003 0302 	and.w	r3, r3, #2
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d0ee      	beq.n	8003786 <HAL_RCC_OscConfig+0x37e>
 80037a8:	e014      	b.n	80037d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037aa:	f7fd fe51 	bl	8001450 <HAL_GetTick>
 80037ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037b0:	e00a      	b.n	80037c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037b2:	f7fd fe4d 	bl	8001450 <HAL_GetTick>
 80037b6:	4602      	mov	r2, r0
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d901      	bls.n	80037c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80037c4:	2303      	movs	r3, #3
 80037c6:	e09b      	b.n	8003900 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037c8:	4b40      	ldr	r3, [pc, #256]	@ (80038cc <HAL_RCC_OscConfig+0x4c4>)
 80037ca:	6a1b      	ldr	r3, [r3, #32]
 80037cc:	f003 0302 	and.w	r3, r3, #2
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d1ee      	bne.n	80037b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80037d4:	7dfb      	ldrb	r3, [r7, #23]
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d105      	bne.n	80037e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037da:	4b3c      	ldr	r3, [pc, #240]	@ (80038cc <HAL_RCC_OscConfig+0x4c4>)
 80037dc:	69db      	ldr	r3, [r3, #28]
 80037de:	4a3b      	ldr	r2, [pc, #236]	@ (80038cc <HAL_RCC_OscConfig+0x4c4>)
 80037e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	69db      	ldr	r3, [r3, #28]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	f000 8087 	beq.w	80038fe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037f0:	4b36      	ldr	r3, [pc, #216]	@ (80038cc <HAL_RCC_OscConfig+0x4c4>)
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f003 030c 	and.w	r3, r3, #12
 80037f8:	2b08      	cmp	r3, #8
 80037fa:	d061      	beq.n	80038c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	69db      	ldr	r3, [r3, #28]
 8003800:	2b02      	cmp	r3, #2
 8003802:	d146      	bne.n	8003892 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003804:	4b33      	ldr	r3, [pc, #204]	@ (80038d4 <HAL_RCC_OscConfig+0x4cc>)
 8003806:	2200      	movs	r2, #0
 8003808:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800380a:	f7fd fe21 	bl	8001450 <HAL_GetTick>
 800380e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003810:	e008      	b.n	8003824 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003812:	f7fd fe1d 	bl	8001450 <HAL_GetTick>
 8003816:	4602      	mov	r2, r0
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	2b02      	cmp	r3, #2
 800381e:	d901      	bls.n	8003824 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003820:	2303      	movs	r3, #3
 8003822:	e06d      	b.n	8003900 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003824:	4b29      	ldr	r3, [pc, #164]	@ (80038cc <HAL_RCC_OscConfig+0x4c4>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d1f0      	bne.n	8003812 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6a1b      	ldr	r3, [r3, #32]
 8003834:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003838:	d108      	bne.n	800384c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800383a:	4b24      	ldr	r3, [pc, #144]	@ (80038cc <HAL_RCC_OscConfig+0x4c4>)
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	4921      	ldr	r1, [pc, #132]	@ (80038cc <HAL_RCC_OscConfig+0x4c4>)
 8003848:	4313      	orrs	r3, r2
 800384a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800384c:	4b1f      	ldr	r3, [pc, #124]	@ (80038cc <HAL_RCC_OscConfig+0x4c4>)
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6a19      	ldr	r1, [r3, #32]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800385c:	430b      	orrs	r3, r1
 800385e:	491b      	ldr	r1, [pc, #108]	@ (80038cc <HAL_RCC_OscConfig+0x4c4>)
 8003860:	4313      	orrs	r3, r2
 8003862:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003864:	4b1b      	ldr	r3, [pc, #108]	@ (80038d4 <HAL_RCC_OscConfig+0x4cc>)
 8003866:	2201      	movs	r2, #1
 8003868:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800386a:	f7fd fdf1 	bl	8001450 <HAL_GetTick>
 800386e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003870:	e008      	b.n	8003884 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003872:	f7fd fded 	bl	8001450 <HAL_GetTick>
 8003876:	4602      	mov	r2, r0
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	2b02      	cmp	r3, #2
 800387e:	d901      	bls.n	8003884 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e03d      	b.n	8003900 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003884:	4b11      	ldr	r3, [pc, #68]	@ (80038cc <HAL_RCC_OscConfig+0x4c4>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d0f0      	beq.n	8003872 <HAL_RCC_OscConfig+0x46a>
 8003890:	e035      	b.n	80038fe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003892:	4b10      	ldr	r3, [pc, #64]	@ (80038d4 <HAL_RCC_OscConfig+0x4cc>)
 8003894:	2200      	movs	r2, #0
 8003896:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003898:	f7fd fdda 	bl	8001450 <HAL_GetTick>
 800389c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800389e:	e008      	b.n	80038b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038a0:	f7fd fdd6 	bl	8001450 <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d901      	bls.n	80038b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e026      	b.n	8003900 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038b2:	4b06      	ldr	r3, [pc, #24]	@ (80038cc <HAL_RCC_OscConfig+0x4c4>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d1f0      	bne.n	80038a0 <HAL_RCC_OscConfig+0x498>
 80038be:	e01e      	b.n	80038fe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	69db      	ldr	r3, [r3, #28]
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d107      	bne.n	80038d8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e019      	b.n	8003900 <HAL_RCC_OscConfig+0x4f8>
 80038cc:	40021000 	.word	0x40021000
 80038d0:	40007000 	.word	0x40007000
 80038d4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80038d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003908 <HAL_RCC_OscConfig+0x500>)
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a1b      	ldr	r3, [r3, #32]
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d106      	bne.n	80038fa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d001      	beq.n	80038fe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e000      	b.n	8003900 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80038fe:	2300      	movs	r3, #0
}
 8003900:	4618      	mov	r0, r3
 8003902:	3718      	adds	r7, #24
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}
 8003908:	40021000 	.word	0x40021000

0800390c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d101      	bne.n	8003920 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e0d0      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003920:	4b6a      	ldr	r3, [pc, #424]	@ (8003acc <HAL_RCC_ClockConfig+0x1c0>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0307 	and.w	r3, r3, #7
 8003928:	683a      	ldr	r2, [r7, #0]
 800392a:	429a      	cmp	r2, r3
 800392c:	d910      	bls.n	8003950 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800392e:	4b67      	ldr	r3, [pc, #412]	@ (8003acc <HAL_RCC_ClockConfig+0x1c0>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f023 0207 	bic.w	r2, r3, #7
 8003936:	4965      	ldr	r1, [pc, #404]	@ (8003acc <HAL_RCC_ClockConfig+0x1c0>)
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	4313      	orrs	r3, r2
 800393c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800393e:	4b63      	ldr	r3, [pc, #396]	@ (8003acc <HAL_RCC_ClockConfig+0x1c0>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0307 	and.w	r3, r3, #7
 8003946:	683a      	ldr	r2, [r7, #0]
 8003948:	429a      	cmp	r2, r3
 800394a:	d001      	beq.n	8003950 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e0b8      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0302 	and.w	r3, r3, #2
 8003958:	2b00      	cmp	r3, #0
 800395a:	d020      	beq.n	800399e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0304 	and.w	r3, r3, #4
 8003964:	2b00      	cmp	r3, #0
 8003966:	d005      	beq.n	8003974 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003968:	4b59      	ldr	r3, [pc, #356]	@ (8003ad0 <HAL_RCC_ClockConfig+0x1c4>)
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	4a58      	ldr	r2, [pc, #352]	@ (8003ad0 <HAL_RCC_ClockConfig+0x1c4>)
 800396e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003972:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0308 	and.w	r3, r3, #8
 800397c:	2b00      	cmp	r3, #0
 800397e:	d005      	beq.n	800398c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003980:	4b53      	ldr	r3, [pc, #332]	@ (8003ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	4a52      	ldr	r2, [pc, #328]	@ (8003ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8003986:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800398a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800398c:	4b50      	ldr	r3, [pc, #320]	@ (8003ad0 <HAL_RCC_ClockConfig+0x1c4>)
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	494d      	ldr	r1, [pc, #308]	@ (8003ad0 <HAL_RCC_ClockConfig+0x1c4>)
 800399a:	4313      	orrs	r3, r2
 800399c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0301 	and.w	r3, r3, #1
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d040      	beq.n	8003a2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d107      	bne.n	80039c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039b2:	4b47      	ldr	r3, [pc, #284]	@ (8003ad0 <HAL_RCC_ClockConfig+0x1c4>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d115      	bne.n	80039ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e07f      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d107      	bne.n	80039da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039ca:	4b41      	ldr	r3, [pc, #260]	@ (8003ad0 <HAL_RCC_ClockConfig+0x1c4>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d109      	bne.n	80039ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e073      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039da:	4b3d      	ldr	r3, [pc, #244]	@ (8003ad0 <HAL_RCC_ClockConfig+0x1c4>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0302 	and.w	r3, r3, #2
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d101      	bne.n	80039ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e06b      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039ea:	4b39      	ldr	r3, [pc, #228]	@ (8003ad0 <HAL_RCC_ClockConfig+0x1c4>)
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	f023 0203 	bic.w	r2, r3, #3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	4936      	ldr	r1, [pc, #216]	@ (8003ad0 <HAL_RCC_ClockConfig+0x1c4>)
 80039f8:	4313      	orrs	r3, r2
 80039fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039fc:	f7fd fd28 	bl	8001450 <HAL_GetTick>
 8003a00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a02:	e00a      	b.n	8003a1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a04:	f7fd fd24 	bl	8001450 <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d901      	bls.n	8003a1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e053      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a1a:	4b2d      	ldr	r3, [pc, #180]	@ (8003ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f003 020c 	and.w	r2, r3, #12
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d1eb      	bne.n	8003a04 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a2c:	4b27      	ldr	r3, [pc, #156]	@ (8003acc <HAL_RCC_ClockConfig+0x1c0>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0307 	and.w	r3, r3, #7
 8003a34:	683a      	ldr	r2, [r7, #0]
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d210      	bcs.n	8003a5c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a3a:	4b24      	ldr	r3, [pc, #144]	@ (8003acc <HAL_RCC_ClockConfig+0x1c0>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f023 0207 	bic.w	r2, r3, #7
 8003a42:	4922      	ldr	r1, [pc, #136]	@ (8003acc <HAL_RCC_ClockConfig+0x1c0>)
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a4a:	4b20      	ldr	r3, [pc, #128]	@ (8003acc <HAL_RCC_ClockConfig+0x1c0>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0307 	and.w	r3, r3, #7
 8003a52:	683a      	ldr	r2, [r7, #0]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d001      	beq.n	8003a5c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e032      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0304 	and.w	r3, r3, #4
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d008      	beq.n	8003a7a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a68:	4b19      	ldr	r3, [pc, #100]	@ (8003ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	4916      	ldr	r1, [pc, #88]	@ (8003ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a76:	4313      	orrs	r3, r2
 8003a78:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0308 	and.w	r3, r3, #8
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d009      	beq.n	8003a9a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003a86:	4b12      	ldr	r3, [pc, #72]	@ (8003ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	00db      	lsls	r3, r3, #3
 8003a94:	490e      	ldr	r1, [pc, #56]	@ (8003ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a9a:	f000 f821 	bl	8003ae0 <HAL_RCC_GetSysClockFreq>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	4b0b      	ldr	r3, [pc, #44]	@ (8003ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	091b      	lsrs	r3, r3, #4
 8003aa6:	f003 030f 	and.w	r3, r3, #15
 8003aaa:	490a      	ldr	r1, [pc, #40]	@ (8003ad4 <HAL_RCC_ClockConfig+0x1c8>)
 8003aac:	5ccb      	ldrb	r3, [r1, r3]
 8003aae:	fa22 f303 	lsr.w	r3, r2, r3
 8003ab2:	4a09      	ldr	r2, [pc, #36]	@ (8003ad8 <HAL_RCC_ClockConfig+0x1cc>)
 8003ab4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003ab6:	4b09      	ldr	r3, [pc, #36]	@ (8003adc <HAL_RCC_ClockConfig+0x1d0>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4618      	mov	r0, r3
 8003abc:	f7fd fc86 	bl	80013cc <HAL_InitTick>

  return HAL_OK;
 8003ac0:	2300      	movs	r3, #0
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3710      	adds	r7, #16
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	40022000 	.word	0x40022000
 8003ad0:	40021000 	.word	0x40021000
 8003ad4:	080045b8 	.word	0x080045b8
 8003ad8:	20000000 	.word	0x20000000
 8003adc:	20000004 	.word	0x20000004

08003ae0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b087      	sub	sp, #28
 8003ae4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	60fb      	str	r3, [r7, #12]
 8003aea:	2300      	movs	r3, #0
 8003aec:	60bb      	str	r3, [r7, #8]
 8003aee:	2300      	movs	r3, #0
 8003af0:	617b      	str	r3, [r7, #20]
 8003af2:	2300      	movs	r3, #0
 8003af4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003af6:	2300      	movs	r3, #0
 8003af8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003afa:	4b1e      	ldr	r3, [pc, #120]	@ (8003b74 <HAL_RCC_GetSysClockFreq+0x94>)
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f003 030c 	and.w	r3, r3, #12
 8003b06:	2b04      	cmp	r3, #4
 8003b08:	d002      	beq.n	8003b10 <HAL_RCC_GetSysClockFreq+0x30>
 8003b0a:	2b08      	cmp	r3, #8
 8003b0c:	d003      	beq.n	8003b16 <HAL_RCC_GetSysClockFreq+0x36>
 8003b0e:	e027      	b.n	8003b60 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003b10:	4b19      	ldr	r3, [pc, #100]	@ (8003b78 <HAL_RCC_GetSysClockFreq+0x98>)
 8003b12:	613b      	str	r3, [r7, #16]
      break;
 8003b14:	e027      	b.n	8003b66 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	0c9b      	lsrs	r3, r3, #18
 8003b1a:	f003 030f 	and.w	r3, r3, #15
 8003b1e:	4a17      	ldr	r2, [pc, #92]	@ (8003b7c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003b20:	5cd3      	ldrb	r3, [r2, r3]
 8003b22:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d010      	beq.n	8003b50 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003b2e:	4b11      	ldr	r3, [pc, #68]	@ (8003b74 <HAL_RCC_GetSysClockFreq+0x94>)
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	0c5b      	lsrs	r3, r3, #17
 8003b34:	f003 0301 	and.w	r3, r3, #1
 8003b38:	4a11      	ldr	r2, [pc, #68]	@ (8003b80 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003b3a:	5cd3      	ldrb	r3, [r2, r3]
 8003b3c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a0d      	ldr	r2, [pc, #52]	@ (8003b78 <HAL_RCC_GetSysClockFreq+0x98>)
 8003b42:	fb03 f202 	mul.w	r2, r3, r2
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b4c:	617b      	str	r3, [r7, #20]
 8003b4e:	e004      	b.n	8003b5a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	4a0c      	ldr	r2, [pc, #48]	@ (8003b84 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003b54:	fb02 f303 	mul.w	r3, r2, r3
 8003b58:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	613b      	str	r3, [r7, #16]
      break;
 8003b5e:	e002      	b.n	8003b66 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b60:	4b05      	ldr	r3, [pc, #20]	@ (8003b78 <HAL_RCC_GetSysClockFreq+0x98>)
 8003b62:	613b      	str	r3, [r7, #16]
      break;
 8003b64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b66:	693b      	ldr	r3, [r7, #16]
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	371c      	adds	r7, #28
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bc80      	pop	{r7}
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	40021000 	.word	0x40021000
 8003b78:	007a1200 	.word	0x007a1200
 8003b7c:	080045c8 	.word	0x080045c8
 8003b80:	080045d8 	.word	0x080045d8
 8003b84:	003d0900 	.word	0x003d0900

08003b88 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b085      	sub	sp, #20
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003b90:	4b0a      	ldr	r3, [pc, #40]	@ (8003bbc <RCC_Delay+0x34>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a0a      	ldr	r2, [pc, #40]	@ (8003bc0 <RCC_Delay+0x38>)
 8003b96:	fba2 2303 	umull	r2, r3, r2, r3
 8003b9a:	0a5b      	lsrs	r3, r3, #9
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	fb02 f303 	mul.w	r3, r2, r3
 8003ba2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003ba4:	bf00      	nop
  }
  while (Delay --);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	1e5a      	subs	r2, r3, #1
 8003baa:	60fa      	str	r2, [r7, #12]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d1f9      	bne.n	8003ba4 <RCC_Delay+0x1c>
}
 8003bb0:	bf00      	nop
 8003bb2:	bf00      	nop
 8003bb4:	3714      	adds	r7, #20
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bc80      	pop	{r7}
 8003bba:	4770      	bx	lr
 8003bbc:	20000000 	.word	0x20000000
 8003bc0:	10624dd3 	.word	0x10624dd3

08003bc4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b086      	sub	sp, #24
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	613b      	str	r3, [r7, #16]
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0301 	and.w	r3, r3, #1
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d07d      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003be0:	2300      	movs	r3, #0
 8003be2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003be4:	4b4f      	ldr	r3, [pc, #316]	@ (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003be6:	69db      	ldr	r3, [r3, #28]
 8003be8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d10d      	bne.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bf0:	4b4c      	ldr	r3, [pc, #304]	@ (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bf2:	69db      	ldr	r3, [r3, #28]
 8003bf4:	4a4b      	ldr	r2, [pc, #300]	@ (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bf6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bfa:	61d3      	str	r3, [r2, #28]
 8003bfc:	4b49      	ldr	r3, [pc, #292]	@ (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bfe:	69db      	ldr	r3, [r3, #28]
 8003c00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c04:	60bb      	str	r3, [r7, #8]
 8003c06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c0c:	4b46      	ldr	r3, [pc, #280]	@ (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d118      	bne.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c18:	4b43      	ldr	r3, [pc, #268]	@ (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a42      	ldr	r2, [pc, #264]	@ (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c22:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c24:	f7fd fc14 	bl	8001450 <HAL_GetTick>
 8003c28:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c2a:	e008      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c2c:	f7fd fc10 	bl	8001450 <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	2b64      	cmp	r3, #100	@ 0x64
 8003c38:	d901      	bls.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e06d      	b.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c3e:	4b3a      	ldr	r3, [pc, #232]	@ (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d0f0      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c4a:	4b36      	ldr	r3, [pc, #216]	@ (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c4c:	6a1b      	ldr	r3, [r3, #32]
 8003c4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c52:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d02e      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c62:	68fa      	ldr	r2, [r7, #12]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d027      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c68:	4b2e      	ldr	r3, [pc, #184]	@ (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c6a:	6a1b      	ldr	r3, [r3, #32]
 8003c6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c70:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c72:	4b2e      	ldr	r3, [pc, #184]	@ (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c74:	2201      	movs	r2, #1
 8003c76:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c78:	4b2c      	ldr	r3, [pc, #176]	@ (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003c7e:	4a29      	ldr	r2, [pc, #164]	@ (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f003 0301 	and.w	r3, r3, #1
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d014      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c8e:	f7fd fbdf 	bl	8001450 <HAL_GetTick>
 8003c92:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c94:	e00a      	b.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c96:	f7fd fbdb 	bl	8001450 <HAL_GetTick>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d901      	bls.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	e036      	b.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cac:	4b1d      	ldr	r3, [pc, #116]	@ (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cae:	6a1b      	ldr	r3, [r3, #32]
 8003cb0:	f003 0302 	and.w	r3, r3, #2
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d0ee      	beq.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cb8:	4b1a      	ldr	r3, [pc, #104]	@ (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cba:	6a1b      	ldr	r3, [r3, #32]
 8003cbc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	4917      	ldr	r1, [pc, #92]	@ (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003cca:	7dfb      	ldrb	r3, [r7, #23]
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d105      	bne.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cd0:	4b14      	ldr	r3, [pc, #80]	@ (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cd2:	69db      	ldr	r3, [r3, #28]
 8003cd4:	4a13      	ldr	r2, [pc, #76]	@ (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cd6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003cda:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0302 	and.w	r3, r3, #2
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d008      	beq.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ce8:	4b0e      	ldr	r3, [pc, #56]	@ (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	490b      	ldr	r1, [pc, #44]	@ (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0310 	and.w	r3, r3, #16
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d008      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d06:	4b07      	ldr	r3, [pc, #28]	@ (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	4904      	ldr	r1, [pc, #16]	@ (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d14:	4313      	orrs	r3, r2
 8003d16:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003d18:	2300      	movs	r3, #0
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3718      	adds	r7, #24
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	40021000 	.word	0x40021000
 8003d28:	40007000 	.word	0x40007000
 8003d2c:	42420440 	.word	0x42420440

08003d30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b082      	sub	sp, #8
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d101      	bne.n	8003d42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e041      	b.n	8003dc6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d106      	bne.n	8003d5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f7fd f9e2 	bl	8001120 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2202      	movs	r2, #2
 8003d60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	3304      	adds	r3, #4
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	4610      	mov	r0, r2
 8003d70:	f000 fa74 	bl	800425c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003dc4:	2300      	movs	r3, #0
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3708      	adds	r7, #8
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
	...

08003dd0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b085      	sub	sp, #20
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d001      	beq.n	8003de8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e03a      	b.n	8003e5e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2202      	movs	r2, #2
 8003dec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68da      	ldr	r2, [r3, #12]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f042 0201 	orr.w	r2, r2, #1
 8003dfe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a18      	ldr	r2, [pc, #96]	@ (8003e68 <HAL_TIM_Base_Start_IT+0x98>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d00e      	beq.n	8003e28 <HAL_TIM_Base_Start_IT+0x58>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e12:	d009      	beq.n	8003e28 <HAL_TIM_Base_Start_IT+0x58>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a14      	ldr	r2, [pc, #80]	@ (8003e6c <HAL_TIM_Base_Start_IT+0x9c>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d004      	beq.n	8003e28 <HAL_TIM_Base_Start_IT+0x58>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a13      	ldr	r2, [pc, #76]	@ (8003e70 <HAL_TIM_Base_Start_IT+0xa0>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d111      	bne.n	8003e4c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f003 0307 	and.w	r3, r3, #7
 8003e32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2b06      	cmp	r3, #6
 8003e38:	d010      	beq.n	8003e5c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f042 0201 	orr.w	r2, r2, #1
 8003e48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e4a:	e007      	b.n	8003e5c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f042 0201 	orr.w	r2, r2, #1
 8003e5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e5c:	2300      	movs	r3, #0
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3714      	adds	r7, #20
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bc80      	pop	{r7}
 8003e66:	4770      	bx	lr
 8003e68:	40012c00 	.word	0x40012c00
 8003e6c:	40000400 	.word	0x40000400
 8003e70:	40000800 	.word	0x40000800

08003e74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	f003 0302 	and.w	r3, r3, #2
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	d122      	bne.n	8003ed0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	f003 0302 	and.w	r3, r3, #2
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	d11b      	bne.n	8003ed0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f06f 0202 	mvn.w	r2, #2
 8003ea0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	699b      	ldr	r3, [r3, #24]
 8003eae:	f003 0303 	and.w	r3, r3, #3
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d003      	beq.n	8003ebe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 f9b4 	bl	8004224 <HAL_TIM_IC_CaptureCallback>
 8003ebc:	e005      	b.n	8003eca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 f9a7 	bl	8004212 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f000 f9b6 	bl	8004236 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	f003 0304 	and.w	r3, r3, #4
 8003eda:	2b04      	cmp	r3, #4
 8003edc:	d122      	bne.n	8003f24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	f003 0304 	and.w	r3, r3, #4
 8003ee8:	2b04      	cmp	r3, #4
 8003eea:	d11b      	bne.n	8003f24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f06f 0204 	mvn.w	r2, #4
 8003ef4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2202      	movs	r2, #2
 8003efa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	699b      	ldr	r3, [r3, #24]
 8003f02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d003      	beq.n	8003f12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f000 f98a 	bl	8004224 <HAL_TIM_IC_CaptureCallback>
 8003f10:	e005      	b.n	8003f1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f000 f97d 	bl	8004212 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f000 f98c 	bl	8004236 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	f003 0308 	and.w	r3, r3, #8
 8003f2e:	2b08      	cmp	r3, #8
 8003f30:	d122      	bne.n	8003f78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	f003 0308 	and.w	r3, r3, #8
 8003f3c:	2b08      	cmp	r3, #8
 8003f3e:	d11b      	bne.n	8003f78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f06f 0208 	mvn.w	r2, #8
 8003f48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2204      	movs	r2, #4
 8003f4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	69db      	ldr	r3, [r3, #28]
 8003f56:	f003 0303 	and.w	r3, r3, #3
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d003      	beq.n	8003f66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 f960 	bl	8004224 <HAL_TIM_IC_CaptureCallback>
 8003f64:	e005      	b.n	8003f72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 f953 	bl	8004212 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f000 f962 	bl	8004236 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	f003 0310 	and.w	r3, r3, #16
 8003f82:	2b10      	cmp	r3, #16
 8003f84:	d122      	bne.n	8003fcc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	f003 0310 	and.w	r3, r3, #16
 8003f90:	2b10      	cmp	r3, #16
 8003f92:	d11b      	bne.n	8003fcc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f06f 0210 	mvn.w	r2, #16
 8003f9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2208      	movs	r2, #8
 8003fa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	69db      	ldr	r3, [r3, #28]
 8003faa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d003      	beq.n	8003fba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 f936 	bl	8004224 <HAL_TIM_IC_CaptureCallback>
 8003fb8:	e005      	b.n	8003fc6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f000 f929 	bl	8004212 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f000 f938 	bl	8004236 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	691b      	ldr	r3, [r3, #16]
 8003fd2:	f003 0301 	and.w	r3, r3, #1
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d10e      	bne.n	8003ff8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	f003 0301 	and.w	r3, r3, #1
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d107      	bne.n	8003ff8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f06f 0201 	mvn.w	r2, #1
 8003ff0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f7fc f8ce 	bl	8000194 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004002:	2b80      	cmp	r3, #128	@ 0x80
 8004004:	d10e      	bne.n	8004024 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004010:	2b80      	cmp	r3, #128	@ 0x80
 8004012:	d107      	bne.n	8004024 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800401c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 fa7b 	bl	800451a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	691b      	ldr	r3, [r3, #16]
 800402a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800402e:	2b40      	cmp	r3, #64	@ 0x40
 8004030:	d10e      	bne.n	8004050 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800403c:	2b40      	cmp	r3, #64	@ 0x40
 800403e:	d107      	bne.n	8004050 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004048:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 f8fc 	bl	8004248 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	691b      	ldr	r3, [r3, #16]
 8004056:	f003 0320 	and.w	r3, r3, #32
 800405a:	2b20      	cmp	r3, #32
 800405c:	d10e      	bne.n	800407c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	f003 0320 	and.w	r3, r3, #32
 8004068:	2b20      	cmp	r3, #32
 800406a:	d107      	bne.n	800407c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f06f 0220 	mvn.w	r2, #32
 8004074:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f000 fa46 	bl	8004508 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800407c:	bf00      	nop
 800407e:	3708      	adds	r7, #8
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}

08004084 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800408e:	2300      	movs	r3, #0
 8004090:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004098:	2b01      	cmp	r3, #1
 800409a:	d101      	bne.n	80040a0 <HAL_TIM_ConfigClockSource+0x1c>
 800409c:	2302      	movs	r3, #2
 800409e:	e0b4      	b.n	800420a <HAL_TIM_ConfigClockSource+0x186>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2202      	movs	r2, #2
 80040ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80040be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80040c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	68ba      	ldr	r2, [r7, #8]
 80040ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040d8:	d03e      	beq.n	8004158 <HAL_TIM_ConfigClockSource+0xd4>
 80040da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040de:	f200 8087 	bhi.w	80041f0 <HAL_TIM_ConfigClockSource+0x16c>
 80040e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040e6:	f000 8086 	beq.w	80041f6 <HAL_TIM_ConfigClockSource+0x172>
 80040ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040ee:	d87f      	bhi.n	80041f0 <HAL_TIM_ConfigClockSource+0x16c>
 80040f0:	2b70      	cmp	r3, #112	@ 0x70
 80040f2:	d01a      	beq.n	800412a <HAL_TIM_ConfigClockSource+0xa6>
 80040f4:	2b70      	cmp	r3, #112	@ 0x70
 80040f6:	d87b      	bhi.n	80041f0 <HAL_TIM_ConfigClockSource+0x16c>
 80040f8:	2b60      	cmp	r3, #96	@ 0x60
 80040fa:	d050      	beq.n	800419e <HAL_TIM_ConfigClockSource+0x11a>
 80040fc:	2b60      	cmp	r3, #96	@ 0x60
 80040fe:	d877      	bhi.n	80041f0 <HAL_TIM_ConfigClockSource+0x16c>
 8004100:	2b50      	cmp	r3, #80	@ 0x50
 8004102:	d03c      	beq.n	800417e <HAL_TIM_ConfigClockSource+0xfa>
 8004104:	2b50      	cmp	r3, #80	@ 0x50
 8004106:	d873      	bhi.n	80041f0 <HAL_TIM_ConfigClockSource+0x16c>
 8004108:	2b40      	cmp	r3, #64	@ 0x40
 800410a:	d058      	beq.n	80041be <HAL_TIM_ConfigClockSource+0x13a>
 800410c:	2b40      	cmp	r3, #64	@ 0x40
 800410e:	d86f      	bhi.n	80041f0 <HAL_TIM_ConfigClockSource+0x16c>
 8004110:	2b30      	cmp	r3, #48	@ 0x30
 8004112:	d064      	beq.n	80041de <HAL_TIM_ConfigClockSource+0x15a>
 8004114:	2b30      	cmp	r3, #48	@ 0x30
 8004116:	d86b      	bhi.n	80041f0 <HAL_TIM_ConfigClockSource+0x16c>
 8004118:	2b20      	cmp	r3, #32
 800411a:	d060      	beq.n	80041de <HAL_TIM_ConfigClockSource+0x15a>
 800411c:	2b20      	cmp	r3, #32
 800411e:	d867      	bhi.n	80041f0 <HAL_TIM_ConfigClockSource+0x16c>
 8004120:	2b00      	cmp	r3, #0
 8004122:	d05c      	beq.n	80041de <HAL_TIM_ConfigClockSource+0x15a>
 8004124:	2b10      	cmp	r3, #16
 8004126:	d05a      	beq.n	80041de <HAL_TIM_ConfigClockSource+0x15a>
 8004128:	e062      	b.n	80041f0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800413a:	f000 f968 	bl	800440e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800414c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	68ba      	ldr	r2, [r7, #8]
 8004154:	609a      	str	r2, [r3, #8]
      break;
 8004156:	e04f      	b.n	80041f8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004168:	f000 f951 	bl	800440e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	689a      	ldr	r2, [r3, #8]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800417a:	609a      	str	r2, [r3, #8]
      break;
 800417c:	e03c      	b.n	80041f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800418a:	461a      	mov	r2, r3
 800418c:	f000 f8c8 	bl	8004320 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2150      	movs	r1, #80	@ 0x50
 8004196:	4618      	mov	r0, r3
 8004198:	f000 f91f 	bl	80043da <TIM_ITRx_SetConfig>
      break;
 800419c:	e02c      	b.n	80041f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80041aa:	461a      	mov	r2, r3
 80041ac:	f000 f8e6 	bl	800437c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2160      	movs	r1, #96	@ 0x60
 80041b6:	4618      	mov	r0, r3
 80041b8:	f000 f90f 	bl	80043da <TIM_ITRx_SetConfig>
      break;
 80041bc:	e01c      	b.n	80041f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041ca:	461a      	mov	r2, r3
 80041cc:	f000 f8a8 	bl	8004320 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	2140      	movs	r1, #64	@ 0x40
 80041d6:	4618      	mov	r0, r3
 80041d8:	f000 f8ff 	bl	80043da <TIM_ITRx_SetConfig>
      break;
 80041dc:	e00c      	b.n	80041f8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4619      	mov	r1, r3
 80041e8:	4610      	mov	r0, r2
 80041ea:	f000 f8f6 	bl	80043da <TIM_ITRx_SetConfig>
      break;
 80041ee:	e003      	b.n	80041f8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	73fb      	strb	r3, [r7, #15]
      break;
 80041f4:	e000      	b.n	80041f8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80041f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004208:	7bfb      	ldrb	r3, [r7, #15]
}
 800420a:	4618      	mov	r0, r3
 800420c:	3710      	adds	r7, #16
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}

08004212 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004212:	b480      	push	{r7}
 8004214:	b083      	sub	sp, #12
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800421a:	bf00      	nop
 800421c:	370c      	adds	r7, #12
 800421e:	46bd      	mov	sp, r7
 8004220:	bc80      	pop	{r7}
 8004222:	4770      	bx	lr

08004224 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800422c:	bf00      	nop
 800422e:	370c      	adds	r7, #12
 8004230:	46bd      	mov	sp, r7
 8004232:	bc80      	pop	{r7}
 8004234:	4770      	bx	lr

08004236 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004236:	b480      	push	{r7}
 8004238:	b083      	sub	sp, #12
 800423a:	af00      	add	r7, sp, #0
 800423c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800423e:	bf00      	nop
 8004240:	370c      	adds	r7, #12
 8004242:	46bd      	mov	sp, r7
 8004244:	bc80      	pop	{r7}
 8004246:	4770      	bx	lr

08004248 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004248:	b480      	push	{r7}
 800424a:	b083      	sub	sp, #12
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004250:	bf00      	nop
 8004252:	370c      	adds	r7, #12
 8004254:	46bd      	mov	sp, r7
 8004256:	bc80      	pop	{r7}
 8004258:	4770      	bx	lr
	...

0800425c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800425c:	b480      	push	{r7}
 800425e:	b085      	sub	sp, #20
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4a29      	ldr	r2, [pc, #164]	@ (8004314 <TIM_Base_SetConfig+0xb8>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d00b      	beq.n	800428c <TIM_Base_SetConfig+0x30>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800427a:	d007      	beq.n	800428c <TIM_Base_SetConfig+0x30>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	4a26      	ldr	r2, [pc, #152]	@ (8004318 <TIM_Base_SetConfig+0xbc>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d003      	beq.n	800428c <TIM_Base_SetConfig+0x30>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	4a25      	ldr	r2, [pc, #148]	@ (800431c <TIM_Base_SetConfig+0xc0>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d108      	bne.n	800429e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004292:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	68fa      	ldr	r2, [r7, #12]
 800429a:	4313      	orrs	r3, r2
 800429c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a1c      	ldr	r2, [pc, #112]	@ (8004314 <TIM_Base_SetConfig+0xb8>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d00b      	beq.n	80042be <TIM_Base_SetConfig+0x62>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042ac:	d007      	beq.n	80042be <TIM_Base_SetConfig+0x62>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a19      	ldr	r2, [pc, #100]	@ (8004318 <TIM_Base_SetConfig+0xbc>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d003      	beq.n	80042be <TIM_Base_SetConfig+0x62>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4a18      	ldr	r2, [pc, #96]	@ (800431c <TIM_Base_SetConfig+0xc0>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d108      	bne.n	80042d0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	68fa      	ldr	r2, [r7, #12]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	695b      	ldr	r3, [r3, #20]
 80042da:	4313      	orrs	r3, r2
 80042dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	68fa      	ldr	r2, [r7, #12]
 80042e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	689a      	ldr	r2, [r3, #8]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4a07      	ldr	r2, [pc, #28]	@ (8004314 <TIM_Base_SetConfig+0xb8>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d103      	bne.n	8004304 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	691a      	ldr	r2, [r3, #16]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	615a      	str	r2, [r3, #20]
}
 800430a:	bf00      	nop
 800430c:	3714      	adds	r7, #20
 800430e:	46bd      	mov	sp, r7
 8004310:	bc80      	pop	{r7}
 8004312:	4770      	bx	lr
 8004314:	40012c00 	.word	0x40012c00
 8004318:	40000400 	.word	0x40000400
 800431c:	40000800 	.word	0x40000800

08004320 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004320:	b480      	push	{r7}
 8004322:	b087      	sub	sp, #28
 8004324:	af00      	add	r7, sp, #0
 8004326:	60f8      	str	r0, [r7, #12]
 8004328:	60b9      	str	r1, [r7, #8]
 800432a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6a1b      	ldr	r3, [r3, #32]
 8004330:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6a1b      	ldr	r3, [r3, #32]
 8004336:	f023 0201 	bic.w	r2, r3, #1
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	699b      	ldr	r3, [r3, #24]
 8004342:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800434a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	011b      	lsls	r3, r3, #4
 8004350:	693a      	ldr	r2, [r7, #16]
 8004352:	4313      	orrs	r3, r2
 8004354:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	f023 030a 	bic.w	r3, r3, #10
 800435c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800435e:	697a      	ldr	r2, [r7, #20]
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	4313      	orrs	r3, r2
 8004364:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	693a      	ldr	r2, [r7, #16]
 800436a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	697a      	ldr	r2, [r7, #20]
 8004370:	621a      	str	r2, [r3, #32]
}
 8004372:	bf00      	nop
 8004374:	371c      	adds	r7, #28
 8004376:	46bd      	mov	sp, r7
 8004378:	bc80      	pop	{r7}
 800437a:	4770      	bx	lr

0800437c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800437c:	b480      	push	{r7}
 800437e:	b087      	sub	sp, #28
 8004380:	af00      	add	r7, sp, #0
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6a1b      	ldr	r3, [r3, #32]
 800438c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	6a1b      	ldr	r3, [r3, #32]
 8004392:	f023 0210 	bic.w	r2, r3, #16
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	699b      	ldr	r3, [r3, #24]
 800439e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80043a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	031b      	lsls	r3, r3, #12
 80043ac:	693a      	ldr	r2, [r7, #16]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80043b8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	011b      	lsls	r3, r3, #4
 80043be:	697a      	ldr	r2, [r7, #20]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	693a      	ldr	r2, [r7, #16]
 80043c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	697a      	ldr	r2, [r7, #20]
 80043ce:	621a      	str	r2, [r3, #32]
}
 80043d0:	bf00      	nop
 80043d2:	371c      	adds	r7, #28
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bc80      	pop	{r7}
 80043d8:	4770      	bx	lr

080043da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80043da:	b480      	push	{r7}
 80043dc:	b085      	sub	sp, #20
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
 80043e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043f2:	683a      	ldr	r2, [r7, #0]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	f043 0307 	orr.w	r3, r3, #7
 80043fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	68fa      	ldr	r2, [r7, #12]
 8004402:	609a      	str	r2, [r3, #8]
}
 8004404:	bf00      	nop
 8004406:	3714      	adds	r7, #20
 8004408:	46bd      	mov	sp, r7
 800440a:	bc80      	pop	{r7}
 800440c:	4770      	bx	lr

0800440e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800440e:	b480      	push	{r7}
 8004410:	b087      	sub	sp, #28
 8004412:	af00      	add	r7, sp, #0
 8004414:	60f8      	str	r0, [r7, #12]
 8004416:	60b9      	str	r1, [r7, #8]
 8004418:	607a      	str	r2, [r7, #4]
 800441a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004428:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	021a      	lsls	r2, r3, #8
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	431a      	orrs	r2, r3
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	4313      	orrs	r3, r2
 8004436:	697a      	ldr	r2, [r7, #20]
 8004438:	4313      	orrs	r3, r2
 800443a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	697a      	ldr	r2, [r7, #20]
 8004440:	609a      	str	r2, [r3, #8]
}
 8004442:	bf00      	nop
 8004444:	371c      	adds	r7, #28
 8004446:	46bd      	mov	sp, r7
 8004448:	bc80      	pop	{r7}
 800444a:	4770      	bx	lr

0800444c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800444c:	b480      	push	{r7}
 800444e:	b085      	sub	sp, #20
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800445c:	2b01      	cmp	r3, #1
 800445e:	d101      	bne.n	8004464 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004460:	2302      	movs	r3, #2
 8004462:	e046      	b.n	80044f2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2202      	movs	r2, #2
 8004470:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800448a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	68fa      	ldr	r2, [r7, #12]
 8004492:	4313      	orrs	r3, r2
 8004494:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	68fa      	ldr	r2, [r7, #12]
 800449c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a16      	ldr	r2, [pc, #88]	@ (80044fc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d00e      	beq.n	80044c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044b0:	d009      	beq.n	80044c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a12      	ldr	r2, [pc, #72]	@ (8004500 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d004      	beq.n	80044c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a10      	ldr	r2, [pc, #64]	@ (8004504 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d10c      	bne.n	80044e0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80044cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	68ba      	ldr	r2, [r7, #8]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	68ba      	ldr	r2, [r7, #8]
 80044de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80044f0:	2300      	movs	r3, #0
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3714      	adds	r7, #20
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bc80      	pop	{r7}
 80044fa:	4770      	bx	lr
 80044fc:	40012c00 	.word	0x40012c00
 8004500:	40000400 	.word	0x40000400
 8004504:	40000800 	.word	0x40000800

08004508 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004510:	bf00      	nop
 8004512:	370c      	adds	r7, #12
 8004514:	46bd      	mov	sp, r7
 8004516:	bc80      	pop	{r7}
 8004518:	4770      	bx	lr

0800451a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800451a:	b480      	push	{r7}
 800451c:	b083      	sub	sp, #12
 800451e:	af00      	add	r7, sp, #0
 8004520:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004522:	bf00      	nop
 8004524:	370c      	adds	r7, #12
 8004526:	46bd      	mov	sp, r7
 8004528:	bc80      	pop	{r7}
 800452a:	4770      	bx	lr

0800452c <memset>:
 800452c:	4603      	mov	r3, r0
 800452e:	4402      	add	r2, r0
 8004530:	4293      	cmp	r3, r2
 8004532:	d100      	bne.n	8004536 <memset+0xa>
 8004534:	4770      	bx	lr
 8004536:	f803 1b01 	strb.w	r1, [r3], #1
 800453a:	e7f9      	b.n	8004530 <memset+0x4>

0800453c <__libc_init_array>:
 800453c:	b570      	push	{r4, r5, r6, lr}
 800453e:	2600      	movs	r6, #0
 8004540:	4d0c      	ldr	r5, [pc, #48]	@ (8004574 <__libc_init_array+0x38>)
 8004542:	4c0d      	ldr	r4, [pc, #52]	@ (8004578 <__libc_init_array+0x3c>)
 8004544:	1b64      	subs	r4, r4, r5
 8004546:	10a4      	asrs	r4, r4, #2
 8004548:	42a6      	cmp	r6, r4
 800454a:	d109      	bne.n	8004560 <__libc_init_array+0x24>
 800454c:	f000 f828 	bl	80045a0 <_init>
 8004550:	2600      	movs	r6, #0
 8004552:	4d0a      	ldr	r5, [pc, #40]	@ (800457c <__libc_init_array+0x40>)
 8004554:	4c0a      	ldr	r4, [pc, #40]	@ (8004580 <__libc_init_array+0x44>)
 8004556:	1b64      	subs	r4, r4, r5
 8004558:	10a4      	asrs	r4, r4, #2
 800455a:	42a6      	cmp	r6, r4
 800455c:	d105      	bne.n	800456a <__libc_init_array+0x2e>
 800455e:	bd70      	pop	{r4, r5, r6, pc}
 8004560:	f855 3b04 	ldr.w	r3, [r5], #4
 8004564:	4798      	blx	r3
 8004566:	3601      	adds	r6, #1
 8004568:	e7ee      	b.n	8004548 <__libc_init_array+0xc>
 800456a:	f855 3b04 	ldr.w	r3, [r5], #4
 800456e:	4798      	blx	r3
 8004570:	3601      	adds	r6, #1
 8004572:	e7f2      	b.n	800455a <__libc_init_array+0x1e>
 8004574:	080045dc 	.word	0x080045dc
 8004578:	080045dc 	.word	0x080045dc
 800457c:	080045dc 	.word	0x080045dc
 8004580:	080045e0 	.word	0x080045e0

08004584 <memcpy>:
 8004584:	440a      	add	r2, r1
 8004586:	4291      	cmp	r1, r2
 8004588:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800458c:	d100      	bne.n	8004590 <memcpy+0xc>
 800458e:	4770      	bx	lr
 8004590:	b510      	push	{r4, lr}
 8004592:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004596:	4291      	cmp	r1, r2
 8004598:	f803 4f01 	strb.w	r4, [r3, #1]!
 800459c:	d1f9      	bne.n	8004592 <memcpy+0xe>
 800459e:	bd10      	pop	{r4, pc}

080045a0 <_init>:
 80045a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045a2:	bf00      	nop
 80045a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045a6:	bc08      	pop	{r3}
 80045a8:	469e      	mov	lr, r3
 80045aa:	4770      	bx	lr

080045ac <_fini>:
 80045ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045ae:	bf00      	nop
 80045b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045b2:	bc08      	pop	{r3}
 80045b4:	469e      	mov	lr, r3
 80045b6:	4770      	bx	lr
