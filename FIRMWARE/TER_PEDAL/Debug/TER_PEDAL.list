
TER_PEDAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003234  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003340  08003340  00013340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003364  08003364  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003364  08003364  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003364  08003364  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003364  08003364  00013364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003368  08003368  00013368  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800336c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000544  2000000c  08003378  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000550  08003378  00020550  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000846e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000229b  00000000  00000000  000284e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000938  00000000  00000000  0002a788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006c2  00000000  00000000  0002b0c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017ffe  00000000  00000000  0002b782  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ad37  00000000  00000000  00043780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000874d4  00000000  00000000  0004e4b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002350  00000000  00000000  000d598c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000d7cdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003328 	.word	0x08003328

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08003328 	.word	0x08003328

0800014c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000152:	1d3b      	adds	r3, r7, #4
 8000154:	2200      	movs	r2, #0
 8000156:	601a      	str	r2, [r3, #0]
 8000158:	605a      	str	r2, [r3, #4]
 800015a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800015c:	4b2e      	ldr	r3, [pc, #184]	; (8000218 <MX_ADC1_Init+0xcc>)
 800015e:	4a2f      	ldr	r2, [pc, #188]	; (800021c <MX_ADC1_Init+0xd0>)
 8000160:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000162:	4b2d      	ldr	r3, [pc, #180]	; (8000218 <MX_ADC1_Init+0xcc>)
 8000164:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000168:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800016a:	4b2b      	ldr	r3, [pc, #172]	; (8000218 <MX_ADC1_Init+0xcc>)
 800016c:	2201      	movs	r2, #1
 800016e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000170:	4b29      	ldr	r3, [pc, #164]	; (8000218 <MX_ADC1_Init+0xcc>)
 8000172:	2200      	movs	r2, #0
 8000174:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000176:	4b28      	ldr	r3, [pc, #160]	; (8000218 <MX_ADC1_Init+0xcc>)
 8000178:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800017c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800017e:	4b26      	ldr	r3, [pc, #152]	; (8000218 <MX_ADC1_Init+0xcc>)
 8000180:	2200      	movs	r2, #0
 8000182:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 8000184:	4b24      	ldr	r3, [pc, #144]	; (8000218 <MX_ADC1_Init+0xcc>)
 8000186:	2204      	movs	r2, #4
 8000188:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800018a:	4823      	ldr	r0, [pc, #140]	; (8000218 <MX_ADC1_Init+0xcc>)
 800018c:	f000 fe60 	bl	8000e50 <HAL_ADC_Init>
 8000190:	4603      	mov	r3, r0
 8000192:	2b00      	cmp	r3, #0
 8000194:	d001      	beq.n	800019a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000196:	f000 fc69 	bl	8000a6c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800019a:	2306      	movs	r3, #6
 800019c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800019e:	2301      	movs	r3, #1
 80001a0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80001a2:	2300      	movs	r3, #0
 80001a4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001a6:	1d3b      	adds	r3, r7, #4
 80001a8:	4619      	mov	r1, r3
 80001aa:	481b      	ldr	r0, [pc, #108]	; (8000218 <MX_ADC1_Init+0xcc>)
 80001ac:	f001 f822 	bl	80011f4 <HAL_ADC_ConfigChannel>
 80001b0:	4603      	mov	r3, r0
 80001b2:	2b00      	cmp	r3, #0
 80001b4:	d001      	beq.n	80001ba <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80001b6:	f000 fc59 	bl	8000a6c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80001ba:	2307      	movs	r3, #7
 80001bc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80001be:	2302      	movs	r3, #2
 80001c0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001c2:	1d3b      	adds	r3, r7, #4
 80001c4:	4619      	mov	r1, r3
 80001c6:	4814      	ldr	r0, [pc, #80]	; (8000218 <MX_ADC1_Init+0xcc>)
 80001c8:	f001 f814 	bl	80011f4 <HAL_ADC_ConfigChannel>
 80001cc:	4603      	mov	r3, r0
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	d001      	beq.n	80001d6 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80001d2:	f000 fc4b 	bl	8000a6c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80001d6:	2308      	movs	r3, #8
 80001d8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80001da:	2303      	movs	r3, #3
 80001dc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001de:	1d3b      	adds	r3, r7, #4
 80001e0:	4619      	mov	r1, r3
 80001e2:	480d      	ldr	r0, [pc, #52]	; (8000218 <MX_ADC1_Init+0xcc>)
 80001e4:	f001 f806 	bl	80011f4 <HAL_ADC_ConfigChannel>
 80001e8:	4603      	mov	r3, r0
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	d001      	beq.n	80001f2 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80001ee:	f000 fc3d 	bl	8000a6c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80001f2:	2309      	movs	r3, #9
 80001f4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80001f6:	2304      	movs	r3, #4
 80001f8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001fa:	1d3b      	adds	r3, r7, #4
 80001fc:	4619      	mov	r1, r3
 80001fe:	4806      	ldr	r0, [pc, #24]	; (8000218 <MX_ADC1_Init+0xcc>)
 8000200:	f000 fff8 	bl	80011f4 <HAL_ADC_ConfigChannel>
 8000204:	4603      	mov	r3, r0
 8000206:	2b00      	cmp	r3, #0
 8000208:	d001      	beq.n	800020e <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 800020a:	f000 fc2f 	bl	8000a6c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800020e:	bf00      	nop
 8000210:	3710      	adds	r7, #16
 8000212:	46bd      	mov	sp, r7
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	20000028 	.word	0x20000028
 800021c:	40012400 	.word	0x40012400

08000220 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b08a      	sub	sp, #40	; 0x28
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000228:	f107 0318 	add.w	r3, r7, #24
 800022c:	2200      	movs	r2, #0
 800022e:	601a      	str	r2, [r3, #0]
 8000230:	605a      	str	r2, [r3, #4]
 8000232:	609a      	str	r2, [r3, #8]
 8000234:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	4a33      	ldr	r2, [pc, #204]	; (8000308 <HAL_ADC_MspInit+0xe8>)
 800023c:	4293      	cmp	r3, r2
 800023e:	d15f      	bne.n	8000300 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000240:	4b32      	ldr	r3, [pc, #200]	; (800030c <HAL_ADC_MspInit+0xec>)
 8000242:	699b      	ldr	r3, [r3, #24]
 8000244:	4a31      	ldr	r2, [pc, #196]	; (800030c <HAL_ADC_MspInit+0xec>)
 8000246:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800024a:	6193      	str	r3, [r2, #24]
 800024c:	4b2f      	ldr	r3, [pc, #188]	; (800030c <HAL_ADC_MspInit+0xec>)
 800024e:	699b      	ldr	r3, [r3, #24]
 8000250:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000254:	617b      	str	r3, [r7, #20]
 8000256:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000258:	4b2c      	ldr	r3, [pc, #176]	; (800030c <HAL_ADC_MspInit+0xec>)
 800025a:	699b      	ldr	r3, [r3, #24]
 800025c:	4a2b      	ldr	r2, [pc, #172]	; (800030c <HAL_ADC_MspInit+0xec>)
 800025e:	f043 0304 	orr.w	r3, r3, #4
 8000262:	6193      	str	r3, [r2, #24]
 8000264:	4b29      	ldr	r3, [pc, #164]	; (800030c <HAL_ADC_MspInit+0xec>)
 8000266:	699b      	ldr	r3, [r3, #24]
 8000268:	f003 0304 	and.w	r3, r3, #4
 800026c:	613b      	str	r3, [r7, #16]
 800026e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000270:	4b26      	ldr	r3, [pc, #152]	; (800030c <HAL_ADC_MspInit+0xec>)
 8000272:	699b      	ldr	r3, [r3, #24]
 8000274:	4a25      	ldr	r2, [pc, #148]	; (800030c <HAL_ADC_MspInit+0xec>)
 8000276:	f043 0308 	orr.w	r3, r3, #8
 800027a:	6193      	str	r3, [r2, #24]
 800027c:	4b23      	ldr	r3, [pc, #140]	; (800030c <HAL_ADC_MspInit+0xec>)
 800027e:	699b      	ldr	r3, [r3, #24]
 8000280:	f003 0308 	and.w	r3, r3, #8
 8000284:	60fb      	str	r3, [r7, #12]
 8000286:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000288:	23c0      	movs	r3, #192	; 0xc0
 800028a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800028c:	2303      	movs	r3, #3
 800028e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000290:	f107 0318 	add.w	r3, r7, #24
 8000294:	4619      	mov	r1, r3
 8000296:	481e      	ldr	r0, [pc, #120]	; (8000310 <HAL_ADC_MspInit+0xf0>)
 8000298:	f002 f9dc 	bl	8002654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800029c:	2303      	movs	r3, #3
 800029e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002a0:	2303      	movs	r3, #3
 80002a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002a4:	f107 0318 	add.w	r3, r7, #24
 80002a8:	4619      	mov	r1, r3
 80002aa:	481a      	ldr	r0, [pc, #104]	; (8000314 <HAL_ADC_MspInit+0xf4>)
 80002ac:	f002 f9d2 	bl	8002654 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80002b0:	4b19      	ldr	r3, [pc, #100]	; (8000318 <HAL_ADC_MspInit+0xf8>)
 80002b2:	4a1a      	ldr	r2, [pc, #104]	; (800031c <HAL_ADC_MspInit+0xfc>)
 80002b4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80002b6:	4b18      	ldr	r3, [pc, #96]	; (8000318 <HAL_ADC_MspInit+0xf8>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80002bc:	4b16      	ldr	r3, [pc, #88]	; (8000318 <HAL_ADC_MspInit+0xf8>)
 80002be:	2200      	movs	r2, #0
 80002c0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80002c2:	4b15      	ldr	r3, [pc, #84]	; (8000318 <HAL_ADC_MspInit+0xf8>)
 80002c4:	2280      	movs	r2, #128	; 0x80
 80002c6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80002c8:	4b13      	ldr	r3, [pc, #76]	; (8000318 <HAL_ADC_MspInit+0xf8>)
 80002ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80002ce:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80002d0:	4b11      	ldr	r3, [pc, #68]	; (8000318 <HAL_ADC_MspInit+0xf8>)
 80002d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80002d6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80002d8:	4b0f      	ldr	r3, [pc, #60]	; (8000318 <HAL_ADC_MspInit+0xf8>)
 80002da:	2220      	movs	r2, #32
 80002dc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80002de:	4b0e      	ldr	r3, [pc, #56]	; (8000318 <HAL_ADC_MspInit+0xf8>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80002e4:	480c      	ldr	r0, [pc, #48]	; (8000318 <HAL_ADC_MspInit+0xf8>)
 80002e6:	f002 f8cd 	bl	8002484 <HAL_DMA_Init>
 80002ea:	4603      	mov	r3, r0
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d001      	beq.n	80002f4 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 80002f0:	f000 fbbc 	bl	8000a6c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	4a08      	ldr	r2, [pc, #32]	; (8000318 <HAL_ADC_MspInit+0xf8>)
 80002f8:	621a      	str	r2, [r3, #32]
 80002fa:	4a07      	ldr	r2, [pc, #28]	; (8000318 <HAL_ADC_MspInit+0xf8>)
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000300:	bf00      	nop
 8000302:	3728      	adds	r7, #40	; 0x28
 8000304:	46bd      	mov	sp, r7
 8000306:	bd80      	pop	{r7, pc}
 8000308:	40012400 	.word	0x40012400
 800030c:	40021000 	.word	0x40021000
 8000310:	40010800 	.word	0x40010800
 8000314:	40010c00 	.word	0x40010c00
 8000318:	20000058 	.word	0x20000058
 800031c:	40020008 	.word	0x40020008

08000320 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b08a      	sub	sp, #40	; 0x28
 8000324:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000326:	4b25      	ldr	r3, [pc, #148]	; (80003bc <MX_CAN_Init+0x9c>)
 8000328:	4a25      	ldr	r2, [pc, #148]	; (80003c0 <MX_CAN_Init+0xa0>)
 800032a:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 1;
 800032c:	4b23      	ldr	r3, [pc, #140]	; (80003bc <MX_CAN_Init+0x9c>)
 800032e:	2201      	movs	r2, #1
 8000330:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000332:	4b22      	ldr	r3, [pc, #136]	; (80003bc <MX_CAN_Init+0x9c>)
 8000334:	2200      	movs	r2, #0
 8000336:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8000338:	4b20      	ldr	r3, [pc, #128]	; (80003bc <MX_CAN_Init+0x9c>)
 800033a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800033e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 8000340:	4b1e      	ldr	r3, [pc, #120]	; (80003bc <MX_CAN_Init+0x9c>)
 8000342:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8000346:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000348:	4b1c      	ldr	r3, [pc, #112]	; (80003bc <MX_CAN_Init+0x9c>)
 800034a:	2200      	movs	r2, #0
 800034c:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800034e:	4b1b      	ldr	r3, [pc, #108]	; (80003bc <MX_CAN_Init+0x9c>)
 8000350:	2200      	movs	r2, #0
 8000352:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000354:	4b19      	ldr	r3, [pc, #100]	; (80003bc <MX_CAN_Init+0x9c>)
 8000356:	2200      	movs	r2, #0
 8000358:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800035a:	4b18      	ldr	r3, [pc, #96]	; (80003bc <MX_CAN_Init+0x9c>)
 800035c:	2200      	movs	r2, #0
 800035e:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000360:	4b16      	ldr	r3, [pc, #88]	; (80003bc <MX_CAN_Init+0x9c>)
 8000362:	2200      	movs	r2, #0
 8000364:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000366:	4b15      	ldr	r3, [pc, #84]	; (80003bc <MX_CAN_Init+0x9c>)
 8000368:	2200      	movs	r2, #0
 800036a:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800036c:	4b13      	ldr	r3, [pc, #76]	; (80003bc <MX_CAN_Init+0x9c>)
 800036e:	2200      	movs	r2, #0
 8000370:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000372:	4812      	ldr	r0, [pc, #72]	; (80003bc <MX_CAN_Init+0x9c>)
 8000374:	f001 f937 	bl	80015e6 <HAL_CAN_Init>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d001      	beq.n	8000382 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 800037e:	f000 fb75 	bl	8000a6c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

    canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000382:	2301      	movs	r3, #1
 8000384:	623b      	str	r3, [r7, #32]
    canfilterconfig.FilterBank = 0;  // which filter bank to use from the assigned ones
 8000386:	2300      	movs	r3, #0
 8000388:	617b      	str	r3, [r7, #20]
    canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800038a:	2300      	movs	r3, #0
 800038c:	613b      	str	r3, [r7, #16]
    canfilterconfig.FilterIdHigh = TER_PEDAL_CMD_FRAME_ID<<5;
 800038e:	2380      	movs	r3, #128	; 0x80
 8000390:	603b      	str	r3, [r7, #0]
    canfilterconfig.FilterIdLow = 0;
 8000392:	2300      	movs	r3, #0
 8000394:	607b      	str	r3, [r7, #4]
    canfilterconfig.FilterMaskIdHigh = TER_PEDAL_CMD_FRAME_ID<<5;
 8000396:	2380      	movs	r3, #128	; 0x80
 8000398:	60bb      	str	r3, [r7, #8]
    canfilterconfig.FilterMaskIdLow = 0x0000;
 800039a:	2300      	movs	r3, #0
 800039c:	60fb      	str	r3, [r7, #12]
    canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800039e:	2300      	movs	r3, #0
 80003a0:	61bb      	str	r3, [r7, #24]
    canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80003a2:	2301      	movs	r3, #1
 80003a4:	61fb      	str	r3, [r7, #28]
    canfilterconfig.SlaveStartFilterBank = 0;  // doesn't matter in single can controllers
 80003a6:	2300      	movs	r3, #0
 80003a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 80003aa:	463b      	mov	r3, r7
 80003ac:	4619      	mov	r1, r3
 80003ae:	4803      	ldr	r0, [pc, #12]	; (80003bc <MX_CAN_Init+0x9c>)
 80003b0:	f001 fa14 	bl	80017dc <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN_Init 2 */

}
 80003b4:	bf00      	nop
 80003b6:	3728      	adds	r7, #40	; 0x28
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bd80      	pop	{r7, pc}
 80003bc:	2000009c 	.word	0x2000009c
 80003c0:	40006400 	.word	0x40006400

080003c4 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b088      	sub	sp, #32
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003cc:	f107 0310 	add.w	r3, r7, #16
 80003d0:	2200      	movs	r2, #0
 80003d2:	601a      	str	r2, [r3, #0]
 80003d4:	605a      	str	r2, [r3, #4]
 80003d6:	609a      	str	r2, [r3, #8]
 80003d8:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	4a1c      	ldr	r2, [pc, #112]	; (8000450 <HAL_CAN_MspInit+0x8c>)
 80003e0:	4293      	cmp	r3, r2
 80003e2:	d131      	bne.n	8000448 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80003e4:	4b1b      	ldr	r3, [pc, #108]	; (8000454 <HAL_CAN_MspInit+0x90>)
 80003e6:	69db      	ldr	r3, [r3, #28]
 80003e8:	4a1a      	ldr	r2, [pc, #104]	; (8000454 <HAL_CAN_MspInit+0x90>)
 80003ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003ee:	61d3      	str	r3, [r2, #28]
 80003f0:	4b18      	ldr	r3, [pc, #96]	; (8000454 <HAL_CAN_MspInit+0x90>)
 80003f2:	69db      	ldr	r3, [r3, #28]
 80003f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80003f8:	60fb      	str	r3, [r7, #12]
 80003fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003fc:	4b15      	ldr	r3, [pc, #84]	; (8000454 <HAL_CAN_MspInit+0x90>)
 80003fe:	699b      	ldr	r3, [r3, #24]
 8000400:	4a14      	ldr	r2, [pc, #80]	; (8000454 <HAL_CAN_MspInit+0x90>)
 8000402:	f043 0304 	orr.w	r3, r3, #4
 8000406:	6193      	str	r3, [r2, #24]
 8000408:	4b12      	ldr	r3, [pc, #72]	; (8000454 <HAL_CAN_MspInit+0x90>)
 800040a:	699b      	ldr	r3, [r3, #24]
 800040c:	f003 0304 	and.w	r3, r3, #4
 8000410:	60bb      	str	r3, [r7, #8]
 8000412:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000414:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000418:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800041a:	2300      	movs	r3, #0
 800041c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800041e:	2300      	movs	r3, #0
 8000420:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000422:	f107 0310 	add.w	r3, r7, #16
 8000426:	4619      	mov	r1, r3
 8000428:	480b      	ldr	r0, [pc, #44]	; (8000458 <HAL_CAN_MspInit+0x94>)
 800042a:	f002 f913 	bl	8002654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800042e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000432:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000434:	2302      	movs	r3, #2
 8000436:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000438:	2303      	movs	r3, #3
 800043a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800043c:	f107 0310 	add.w	r3, r7, #16
 8000440:	4619      	mov	r1, r3
 8000442:	4805      	ldr	r0, [pc, #20]	; (8000458 <HAL_CAN_MspInit+0x94>)
 8000444:	f002 f906 	bl	8002654 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000448:	bf00      	nop
 800044a:	3720      	adds	r7, #32
 800044c:	46bd      	mov	sp, r7
 800044e:	bd80      	pop	{r7, pc}
 8000450:	40006400 	.word	0x40006400
 8000454:	40021000 	.word	0x40021000
 8000458:	40010800 	.word	0x40010800

0800045c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800045c:	b480      	push	{r7}
 800045e:	b083      	sub	sp, #12
 8000460:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000462:	4b08      	ldr	r3, [pc, #32]	; (8000484 <MX_DMA_Init+0x28>)
 8000464:	695b      	ldr	r3, [r3, #20]
 8000466:	4a07      	ldr	r2, [pc, #28]	; (8000484 <MX_DMA_Init+0x28>)
 8000468:	f043 0301 	orr.w	r3, r3, #1
 800046c:	6153      	str	r3, [r2, #20]
 800046e:	4b05      	ldr	r3, [pc, #20]	; (8000484 <MX_DMA_Init+0x28>)
 8000470:	695b      	ldr	r3, [r3, #20]
 8000472:	f003 0301 	and.w	r3, r3, #1
 8000476:	607b      	str	r3, [r7, #4]
 8000478:	687b      	ldr	r3, [r7, #4]

}
 800047a:	bf00      	nop
 800047c:	370c      	adds	r7, #12
 800047e:	46bd      	mov	sp, r7
 8000480:	bc80      	pop	{r7}
 8000482:	4770      	bx	lr
 8000484:	40021000 	.word	0x40021000

08000488 <ee_init>:
uint8_t ee_ram[_EE_USE_RAM_BYTE];
#endif

//##########################################################################################################
bool ee_init(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	af00      	add	r7, sp, #0
#if (_EE_USE_RAM_BYTE > 0)
  return ee_read(0, _EE_USE_RAM_BYTE, NULL);
 800048c:	2200      	movs	r2, #0
 800048e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000492:	2000      	movs	r0, #0
 8000494:	f000 f804 	bl	80004a0 <ee_read>
 8000498:	4603      	mov	r3, r0
#else
  return true;
#endif
}
 800049a:	4618      	mov	r0, r3
 800049c:	bd80      	pop	{r7, pc}
	...

080004a0 <ee_read>:
  HAL_FLASH_Lock();
  return false;
}
//##########################################################################################################
bool ee_read(uint32_t startVirtualAddress, uint32_t len, uint8_t* data)
{
 80004a0:	b480      	push	{r7}
 80004a2:	b087      	sub	sp, #28
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	60f8      	str	r0, [r7, #12]
 80004a8:	60b9      	str	r1, [r7, #8]
 80004aa:	607a      	str	r2, [r7, #4]
  if ((startVirtualAddress + len) > _EE_SIZE)
 80004ac:	68fa      	ldr	r2, [r7, #12]
 80004ae:	68bb      	ldr	r3, [r7, #8]
 80004b0:	4413      	add	r3, r2
 80004b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80004b6:	d901      	bls.n	80004bc <ee_read+0x1c>
    return false;
 80004b8:	2300      	movs	r3, #0
 80004ba:	e02b      	b.n	8000514 <ee_read+0x74>
  for (uint32_t i = startVirtualAddress; i < len + startVirtualAddress; i++)
 80004bc:	68fb      	ldr	r3, [r7, #12]
 80004be:	617b      	str	r3, [r7, #20]
 80004c0:	e021      	b.n	8000506 <ee_read+0x66>
  {
    if (data != NULL)
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d00b      	beq.n	80004e0 <ee_read+0x40>
    {
      *data = (*(__IO uint8_t*) (i + _EE_ADDR_INUSE));
 80004c8:	697b      	ldr	r3, [r7, #20]
 80004ca:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80004ce:	f503 43f8 	add.w	r3, r3, #31744	; 0x7c00
 80004d2:	781b      	ldrb	r3, [r3, #0]
 80004d4:	b2da      	uxtb	r2, r3
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	701a      	strb	r2, [r3, #0]
      data++;
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	3301      	adds	r3, #1
 80004de:	607b      	str	r3, [r7, #4]
    }
#if (_EE_USE_RAM_BYTE > 0)
    if (i < _EE_USE_RAM_BYTE)
 80004e0:	697b      	ldr	r3, [r7, #20]
 80004e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80004e6:	d20b      	bcs.n	8000500 <ee_read+0x60>
      ee_ram[i] = (*(__IO uint8_t*) (i + _EE_ADDR_INUSE));
 80004e8:	697b      	ldr	r3, [r7, #20]
 80004ea:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80004ee:	f503 43f8 	add.w	r3, r3, #31744	; 0x7c00
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	b2d9      	uxtb	r1, r3
 80004f6:	4a0a      	ldr	r2, [pc, #40]	; (8000520 <ee_read+0x80>)
 80004f8:	697b      	ldr	r3, [r7, #20]
 80004fa:	4413      	add	r3, r2
 80004fc:	460a      	mov	r2, r1
 80004fe:	701a      	strb	r2, [r3, #0]
  for (uint32_t i = startVirtualAddress; i < len + startVirtualAddress; i++)
 8000500:	697b      	ldr	r3, [r7, #20]
 8000502:	3301      	adds	r3, #1
 8000504:	617b      	str	r3, [r7, #20]
 8000506:	68ba      	ldr	r2, [r7, #8]
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	4413      	add	r3, r2
 800050c:	697a      	ldr	r2, [r7, #20]
 800050e:	429a      	cmp	r2, r3
 8000510:	d3d7      	bcc.n	80004c2 <ee_read+0x22>
#endif
  }
  return true;
 8000512:	2301      	movs	r3, #1
}
 8000514:	4618      	mov	r0, r3
 8000516:	371c      	adds	r7, #28
 8000518:	46bd      	mov	sp, r7
 800051a:	bc80      	pop	{r7}
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	200000c4 	.word	0x200000c4

08000524 <ee_writeToRam>:
  HAL_FLASH_Lock();
  return true;
}
//##########################################################################################################
bool ee_writeToRam(uint32_t startVirtualAddress, uint32_t len, uint8_t* data)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b084      	sub	sp, #16
 8000528:	af00      	add	r7, sp, #0
 800052a:	60f8      	str	r0, [r7, #12]
 800052c:	60b9      	str	r1, [r7, #8]
 800052e:	607a      	str	r2, [r7, #4]
#if (_EE_USE_RAM_BYTE > 0)
  if ((startVirtualAddress + len) > _EE_USE_RAM_BYTE)
 8000530:	68fa      	ldr	r2, [r7, #12]
 8000532:	68bb      	ldr	r3, [r7, #8]
 8000534:	4413      	add	r3, r2
 8000536:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800053a:	d901      	bls.n	8000540 <ee_writeToRam+0x1c>
    return false;
 800053c:	2300      	movs	r3, #0
 800053e:	e00d      	b.n	800055c <ee_writeToRam+0x38>
  if (data == NULL)
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	2b00      	cmp	r3, #0
 8000544:	d101      	bne.n	800054a <ee_writeToRam+0x26>
    return false;
 8000546:	2300      	movs	r3, #0
 8000548:	e008      	b.n	800055c <ee_writeToRam+0x38>
  memcpy(&ee_ram[startVirtualAddress], data, len);
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	4a05      	ldr	r2, [pc, #20]	; (8000564 <ee_writeToRam+0x40>)
 800054e:	4413      	add	r3, r2
 8000550:	68ba      	ldr	r2, [r7, #8]
 8000552:	6879      	ldr	r1, [r7, #4]
 8000554:	4618      	mov	r0, r3
 8000556:	f002 fed9 	bl	800330c <memcpy>
  return true;
 800055a:	2301      	movs	r3, #1
#else
  return false;
#endif
}
 800055c:	4618      	mov	r0, r3
 800055e:	3710      	adds	r7, #16
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	200000c4 	.word	0x200000c4

08000568 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b088      	sub	sp, #32
 800056c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800056e:	f107 0310 	add.w	r3, r7, #16
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
 8000576:	605a      	str	r2, [r3, #4]
 8000578:	609a      	str	r2, [r3, #8]
 800057a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800057c:	4b1d      	ldr	r3, [pc, #116]	; (80005f4 <MX_GPIO_Init+0x8c>)
 800057e:	699b      	ldr	r3, [r3, #24]
 8000580:	4a1c      	ldr	r2, [pc, #112]	; (80005f4 <MX_GPIO_Init+0x8c>)
 8000582:	f043 0320 	orr.w	r3, r3, #32
 8000586:	6193      	str	r3, [r2, #24]
 8000588:	4b1a      	ldr	r3, [pc, #104]	; (80005f4 <MX_GPIO_Init+0x8c>)
 800058a:	699b      	ldr	r3, [r3, #24]
 800058c:	f003 0320 	and.w	r3, r3, #32
 8000590:	60fb      	str	r3, [r7, #12]
 8000592:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000594:	4b17      	ldr	r3, [pc, #92]	; (80005f4 <MX_GPIO_Init+0x8c>)
 8000596:	699b      	ldr	r3, [r3, #24]
 8000598:	4a16      	ldr	r2, [pc, #88]	; (80005f4 <MX_GPIO_Init+0x8c>)
 800059a:	f043 0304 	orr.w	r3, r3, #4
 800059e:	6193      	str	r3, [r2, #24]
 80005a0:	4b14      	ldr	r3, [pc, #80]	; (80005f4 <MX_GPIO_Init+0x8c>)
 80005a2:	699b      	ldr	r3, [r3, #24]
 80005a4:	f003 0304 	and.w	r3, r3, #4
 80005a8:	60bb      	str	r3, [r7, #8]
 80005aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ac:	4b11      	ldr	r3, [pc, #68]	; (80005f4 <MX_GPIO_Init+0x8c>)
 80005ae:	699b      	ldr	r3, [r3, #24]
 80005b0:	4a10      	ldr	r2, [pc, #64]	; (80005f4 <MX_GPIO_Init+0x8c>)
 80005b2:	f043 0308 	orr.w	r3, r3, #8
 80005b6:	6193      	str	r3, [r2, #24]
 80005b8:	4b0e      	ldr	r3, [pc, #56]	; (80005f4 <MX_GPIO_Init+0x8c>)
 80005ba:	699b      	ldr	r3, [r3, #24]
 80005bc:	f003 0308 	and.w	r3, r3, #8
 80005c0:	607b      	str	r3, [r7, #4]
 80005c2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 80005c4:	2200      	movs	r2, #0
 80005c6:	2118      	movs	r1, #24
 80005c8:	480b      	ldr	r0, [pc, #44]	; (80005f8 <MX_GPIO_Init+0x90>)
 80005ca:	f002 f9c7 	bl	800295c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80005ce:	2318      	movs	r3, #24
 80005d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d2:	2301      	movs	r3, #1
 80005d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d6:	2300      	movs	r3, #0
 80005d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005da:	2302      	movs	r3, #2
 80005dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005de:	f107 0310 	add.w	r3, r7, #16
 80005e2:	4619      	mov	r1, r3
 80005e4:	4804      	ldr	r0, [pc, #16]	; (80005f8 <MX_GPIO_Init+0x90>)
 80005e6:	f002 f835 	bl	8002654 <HAL_GPIO_Init>

}
 80005ea:	bf00      	nop
 80005ec:	3720      	adds	r7, #32
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	40021000 	.word	0x40021000
 80005f8:	40010800 	.word	0x40010800

080005fc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000600:	f000 fba0 	bl	8000d44 <HAL_Init>

	/* USER CODE BEGIN Init */
	ee_init(); //Inicializamos la flash (EEPROM virtual)
 8000604:	f7ff ff40 	bl	8000488 <ee_init>
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000608:	f000 f82c 	bl	8000664 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800060c:	f7ff ffac 	bl	8000568 <MX_GPIO_Init>
	MX_DMA_Init();
 8000610:	f7ff ff24 	bl	800045c <MX_DMA_Init>
	MX_ADC1_Init();
 8000614:	f7ff fd9a 	bl	800014c <MX_ADC1_Init>
	MX_CAN_Init();
 8000618:	f7ff fe82 	bl	8000320 <MX_CAN_Init>

	/* Initialize interrupts */
	MX_NVIC_Init();
 800061c:	f000 f871 	bl	8000702 <MX_NVIC_Init>
	/* USER CODE BEGIN 2 */
	//Inicializamos el DMA para que copie nuestros datos al buffer de lecturas
	//Hemos desactivado las interrupciones del mismo en el NVIC para que no obstruyan, solo nos interesa que anden disponibles
	HAL_ADC_Start_DMA(&hadc1, adcReadings, 4); // Arrancamos el ADC en modo DMA
 8000620:	2204      	movs	r2, #4
 8000622:	490c      	ldr	r1, [pc, #48]	; (8000654 <main+0x58>)
 8000624:	480c      	ldr	r0, [pc, #48]	; (8000658 <main+0x5c>)
 8000626:	f000 fceb 	bl	8001000 <HAL_ADC_Start_DMA>

	//Inicializacion del periferico CAN
	HAL_CAN_Start(&hcan); //Activamos el can
 800062a:	480c      	ldr	r0, [pc, #48]	; (800065c <main+0x60>)
 800062c:	f001 f99f 	bl	800196e <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING); //Activamos notificación de mensaje pendiente a lectura
 8000630:	2102      	movs	r1, #2
 8000632:	480a      	ldr	r0, [pc, #40]	; (800065c <main+0x60>)
 8000634:	f001 fbcf 	bl	8001dd6 <HAL_CAN_ActivateNotification>

	//Carga de los offsets
	ee_read(0, sizeof(offset), (uint8_t*) &offset); //Lee de memoria el struct
 8000638:	4a09      	ldr	r2, [pc, #36]	; (8000660 <main+0x64>)
 800063a:	2120      	movs	r1, #32
 800063c:	2000      	movs	r0, #0
 800063e:	f7ff ff2f 	bl	80004a0 <ee_read>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		//Zona Lectura de Sensores
		readSensors();
 8000642:	f000 f86b 	bl	800071c <readSensors>
		//envio del CAN
		sendCan();
 8000646:	f000 f963 	bl	8000910 <sendCan>
		HAL_Delay(100);	//Por ahora llevar el envio de mensajes así, para ser elegantes habría que utilizar interrupciones temporizadas.
 800064a:	2064      	movs	r0, #100	; 0x64
 800064c:	f000 fbdc 	bl	8000e08 <HAL_Delay>
		readSensors();
 8000650:	e7f7      	b.n	8000642 <main+0x46>
 8000652:	bf00      	nop
 8000654:	2000053c 	.word	0x2000053c
 8000658:	20000028 	.word	0x20000028
 800065c:	2000009c 	.word	0x2000009c
 8000660:	20000510 	.word	0x20000510

08000664 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000664:	b580      	push	{r7, lr}
 8000666:	b094      	sub	sp, #80	; 0x50
 8000668:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800066a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800066e:	2228      	movs	r2, #40	; 0x28
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f002 fe1e 	bl	80032b4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000678:	f107 0314 	add.w	r3, r7, #20
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
 8000686:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000688:	1d3b      	adds	r3, r7, #4
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	605a      	str	r2, [r3, #4]
 8000690:	609a      	str	r2, [r3, #8]
 8000692:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000694:	2301      	movs	r3, #1
 8000696:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000698:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800069c:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800069e:	2300      	movs	r3, #0
 80006a0:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80006a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006a6:	4618      	mov	r0, r3
 80006a8:	f002 f970 	bl	800298c <HAL_RCC_OscConfig>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <SystemClock_Config+0x52>
		Error_Handler();
 80006b2:	f000 f9db 	bl	8000a6c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80006b6:	230f      	movs	r3, #15
 80006b8:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80006ba:	2301      	movs	r3, #1
 80006bc:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006be:	2300      	movs	r3, #0
 80006c0:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006c2:	2300      	movs	r3, #0
 80006c4:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c6:	2300      	movs	r3, #0
 80006c8:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80006ca:	f107 0314 	add.w	r3, r7, #20
 80006ce:	2100      	movs	r1, #0
 80006d0:	4618      	mov	r0, r3
 80006d2:	f002 fbdd 	bl	8002e90 <HAL_RCC_ClockConfig>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0x7c>
		Error_Handler();
 80006dc:	f000 f9c6 	bl	8000a6c <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80006e0:	2302      	movs	r3, #2
 80006e2:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80006e4:	2300      	movs	r3, #0
 80006e6:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80006e8:	1d3b      	adds	r3, r7, #4
 80006ea:	4618      	mov	r0, r3
 80006ec:	f002 fd2c 	bl	8003148 <HAL_RCCEx_PeriphCLKConfig>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0x96>
		Error_Handler();
 80006f6:	f000 f9b9 	bl	8000a6c <Error_Handler>
	}
}
 80006fa:	bf00      	nop
 80006fc:	3750      	adds	r7, #80	; 0x50
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}

08000702 <MX_NVIC_Init>:

/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void) {
 8000702:	b580      	push	{r7, lr}
 8000704:	af00      	add	r7, sp, #0
	/* USB_LP_CAN1_RX0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000706:	2200      	movs	r2, #0
 8000708:	2100      	movs	r1, #0
 800070a:	2014      	movs	r0, #20
 800070c:	f001 fe83 	bl	8002416 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000710:	2014      	movs	r0, #20
 8000712:	f001 fe9c 	bl	800244e <HAL_NVIC_EnableIRQ>
}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
	...

0800071c <readSensors>:

/* USER CODE BEGIN 4 */
void readSensors() {
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af02      	add	r7, sp, #8

	//Se leen y convierten las señales
	bpps.bpps = map(adcReadings[3], offset.low[3], offset.high[3], 255, 0); //Lectura del PRESUROMETRO
 8000722:	4b3d      	ldr	r3, [pc, #244]	; (8000818 <readSensors+0xfc>)
 8000724:	68db      	ldr	r3, [r3, #12]
 8000726:	4618      	mov	r0, r3
 8000728:	4b3c      	ldr	r3, [pc, #240]	; (800081c <readSensors+0x100>)
 800072a:	68db      	ldr	r3, [r3, #12]
 800072c:	4619      	mov	r1, r3
 800072e:	4b3b      	ldr	r3, [pc, #236]	; (800081c <readSensors+0x100>)
 8000730:	69db      	ldr	r3, [r3, #28]
 8000732:	461a      	mov	r2, r3
 8000734:	2300      	movs	r3, #0
 8000736:	9300      	str	r3, [sp, #0]
 8000738:	23ff      	movs	r3, #255	; 0xff
 800073a:	f000 f95b 	bl	80009f4 <map>
 800073e:	4603      	mov	r3, r0
 8000740:	b2da      	uxtb	r2, r3
 8000742:	4b37      	ldr	r3, [pc, #220]	; (8000820 <readSensors+0x104>)
 8000744:	701a      	strb	r2, [r3, #0]
	apps.apps_2 = map(adcReadings[2], offset.low[2], offset.high[2], 255, 0); //Lectura de APPS1
 8000746:	4b34      	ldr	r3, [pc, #208]	; (8000818 <readSensors+0xfc>)
 8000748:	689b      	ldr	r3, [r3, #8]
 800074a:	4618      	mov	r0, r3
 800074c:	4b33      	ldr	r3, [pc, #204]	; (800081c <readSensors+0x100>)
 800074e:	689b      	ldr	r3, [r3, #8]
 8000750:	4619      	mov	r1, r3
 8000752:	4b32      	ldr	r3, [pc, #200]	; (800081c <readSensors+0x100>)
 8000754:	699b      	ldr	r3, [r3, #24]
 8000756:	461a      	mov	r2, r3
 8000758:	2300      	movs	r3, #0
 800075a:	9300      	str	r3, [sp, #0]
 800075c:	23ff      	movs	r3, #255	; 0xff
 800075e:	f000 f949 	bl	80009f4 <map>
 8000762:	4603      	mov	r3, r0
 8000764:	b2da      	uxtb	r2, r3
 8000766:	4b2f      	ldr	r3, [pc, #188]	; (8000824 <readSensors+0x108>)
 8000768:	705a      	strb	r2, [r3, #1]
	apps.apps_1 = map(adcReadings[1], offset.low[1], offset.high[1], 255, 0); //Lectura del APPS2
 800076a:	4b2b      	ldr	r3, [pc, #172]	; (8000818 <readSensors+0xfc>)
 800076c:	685b      	ldr	r3, [r3, #4]
 800076e:	4618      	mov	r0, r3
 8000770:	4b2a      	ldr	r3, [pc, #168]	; (800081c <readSensors+0x100>)
 8000772:	685b      	ldr	r3, [r3, #4]
 8000774:	4619      	mov	r1, r3
 8000776:	4b29      	ldr	r3, [pc, #164]	; (800081c <readSensors+0x100>)
 8000778:	695b      	ldr	r3, [r3, #20]
 800077a:	461a      	mov	r2, r3
 800077c:	2300      	movs	r3, #0
 800077e:	9300      	str	r3, [sp, #0]
 8000780:	23ff      	movs	r3, #255	; 0xff
 8000782:	f000 f937 	bl	80009f4 <map>
 8000786:	4603      	mov	r3, r0
 8000788:	b2da      	uxtb	r2, r3
 800078a:	4b26      	ldr	r3, [pc, #152]	; (8000824 <readSensors+0x108>)
 800078c:	701a      	strb	r2, [r3, #0]
	steer.angle = map(adcReadings[0], offset.low[0], offset.high[0],MAXWHEELANGLE, -MAXWHEELANGLE); //Lectura ANGULO de giro (Poner factor)
 800078e:	4b22      	ldr	r3, [pc, #136]	; (8000818 <readSensors+0xfc>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	4618      	mov	r0, r3
 8000794:	4b21      	ldr	r3, [pc, #132]	; (800081c <readSensors+0x100>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4619      	mov	r1, r3
 800079a:	4b20      	ldr	r3, [pc, #128]	; (800081c <readSensors+0x100>)
 800079c:	691b      	ldr	r3, [r3, #16]
 800079e:	461a      	mov	r2, r3
 80007a0:	f06f 031d 	mvn.w	r3, #29
 80007a4:	9300      	str	r3, [sp, #0]
 80007a6:	231e      	movs	r3, #30
 80007a8:	f000 f924 	bl	80009f4 <map>
 80007ac:	4603      	mov	r3, r0
 80007ae:	b21a      	sxth	r2, r3
 80007b0:	4b1d      	ldr	r3, [pc, #116]	; (8000828 <readSensors+0x10c>)
 80007b2:	801a      	strh	r2, [r3, #0]

	//Check for implausability
	if (abs(apps.apps_1 - apps.apps_2) > 255 * 10 / 100) { //T 11.8.9 Desviacion de 10 puntos en %
 80007b4:	4b1b      	ldr	r3, [pc, #108]	; (8000824 <readSensors+0x108>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	461a      	mov	r2, r3
 80007ba:	4b1a      	ldr	r3, [pc, #104]	; (8000824 <readSensors+0x108>)
 80007bc:	785b      	ldrb	r3, [r3, #1]
 80007be:	1ad3      	subs	r3, r2, r3
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	bfb8      	it	lt
 80007c4:	425b      	neglt	r3, r3
 80007c6:	2b19      	cmp	r3, #25
 80007c8:	dd18      	ble.n	80007fc <readSensors+0xe0>
		if (imp_timestamp == 0) {	 //Si no había timestamp activalo
 80007ca:	4b18      	ldr	r3, [pc, #96]	; (800082c <readSensors+0x110>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d105      	bne.n	80007de <readSensors+0xc2>
			imp_timestamp = HAL_GetTick();
 80007d2:	f000 fb0f 	bl	8000df4 <HAL_GetTick>
 80007d6:	4603      	mov	r3, r0
 80007d8:	4a14      	ldr	r2, [pc, #80]	; (800082c <readSensors+0x110>)
 80007da:	6013      	str	r3, [r2, #0]
 80007dc:	e011      	b.n	8000802 <readSensors+0xe6>
		} else if (HAL_GetTick() - imp_timestamp > 100) {//Si el tiempo es mayor que 100 millis
 80007de:	f000 fb09 	bl	8000df4 <HAL_GetTick>
 80007e2:	4602      	mov	r2, r0
 80007e4:	4b11      	ldr	r3, [pc, #68]	; (800082c <readSensors+0x110>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	1ad3      	subs	r3, r2, r3
 80007ea:	2b64      	cmp	r3, #100	; 0x64
 80007ec:	d909      	bls.n	8000802 <readSensors+0xe6>
			apps.imp_flag = 1; //Activa el implausability y dejalo latched
 80007ee:	4b0d      	ldr	r3, [pc, #52]	; (8000824 <readSensors+0x108>)
 80007f0:	2201      	movs	r2, #1
 80007f2:	709a      	strb	r2, [r3, #2]
			imp_timestamp = 0; //Resetea el counter
 80007f4:	4b0d      	ldr	r3, [pc, #52]	; (800082c <readSensors+0x110>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	e002      	b.n	8000802 <readSensors+0xe6>
		}
	} else { //Si vuelve a estar bien desactiva el contador
		imp_timestamp = 0;
 80007fc:	4b0b      	ldr	r3, [pc, #44]	; (800082c <readSensors+0x110>)
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
	}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, apps.imp_flag); //Actualizamos el estado del led
 8000802:	4b08      	ldr	r3, [pc, #32]	; (8000824 <readSensors+0x108>)
 8000804:	789b      	ldrb	r3, [r3, #2]
 8000806:	461a      	mov	r2, r3
 8000808:	2108      	movs	r1, #8
 800080a:	4809      	ldr	r0, [pc, #36]	; (8000830 <readSensors+0x114>)
 800080c:	f002 f8a6 	bl	800295c <HAL_GPIO_WritePin>
}
 8000810:	bf00      	nop
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	2000053c 	.word	0x2000053c
 800081c:	20000510 	.word	0x20000510
 8000820:	20000534 	.word	0x20000534
 8000824:	20000530 	.word	0x20000530
 8000828:	20000538 	.word	0x20000538
 800082c:	2000050c 	.word	0x2000050c
 8000830:	40010800 	.word	0x40010800

08000834 <command>:




void command(uint8_t cmd, uint8_t *args) {
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	4603      	mov	r3, r0
 800083c:	6039      	str	r1, [r7, #0]
 800083e:	71fb      	strb	r3, [r7, #7]
	switch (cmd) {
 8000840:	79fb      	ldrb	r3, [r7, #7]
 8000842:	3b01      	subs	r3, #1
 8000844:	2b06      	cmp	r3, #6
 8000846:	d859      	bhi.n	80008fc <command+0xc8>
 8000848:	a201      	add	r2, pc, #4	; (adr r2, 8000850 <command+0x1c>)
 800084a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800084e:	bf00      	nop
 8000850:	0800086d 	.word	0x0800086d
 8000854:	08000889 	.word	0x08000889
 8000858:	080008a5 	.word	0x080008a5
 800085c:	080008b9 	.word	0x080008b9
 8000860:	080008cd 	.word	0x080008cd
 8000864:	080008e1 	.word	0x080008e1
 8000868:	080008f5 	.word	0x080008f5
	case 1: //Calibrate ACC 0% Pos and Store
		offset.low[2] = adcReadings[2]; //Recoje el valor actual
 800086c:	4b25      	ldr	r3, [pc, #148]	; (8000904 <command+0xd0>)
 800086e:	689b      	ldr	r3, [r3, #8]
 8000870:	4a25      	ldr	r2, [pc, #148]	; (8000908 <command+0xd4>)
 8000872:	6093      	str	r3, [r2, #8]
		offset.low[1] = adcReadings[1];
 8000874:	4b23      	ldr	r3, [pc, #140]	; (8000904 <command+0xd0>)
 8000876:	685b      	ldr	r3, [r3, #4]
 8000878:	4a23      	ldr	r2, [pc, #140]	; (8000908 <command+0xd4>)
 800087a:	6053      	str	r3, [r2, #4]
		ee_writeToRam(0, sizeof(offset), (uint8_t*) &offset); //Almacena
 800087c:	4a22      	ldr	r2, [pc, #136]	; (8000908 <command+0xd4>)
 800087e:	2120      	movs	r1, #32
 8000880:	2000      	movs	r0, #0
 8000882:	f7ff fe4f 	bl	8000524 <ee_writeToRam>
		break;
 8000886:	e039      	b.n	80008fc <command+0xc8>

	case 2: //Calibrate ACC 100% Pos and Store
		offset.high[2] = adcReadings[2]; //Recoje el valor actual
 8000888:	4b1e      	ldr	r3, [pc, #120]	; (8000904 <command+0xd0>)
 800088a:	689b      	ldr	r3, [r3, #8]
 800088c:	4a1e      	ldr	r2, [pc, #120]	; (8000908 <command+0xd4>)
 800088e:	6193      	str	r3, [r2, #24]
		offset.high[1] = adcReadings[1];
 8000890:	4b1c      	ldr	r3, [pc, #112]	; (8000904 <command+0xd0>)
 8000892:	685b      	ldr	r3, [r3, #4]
 8000894:	4a1c      	ldr	r2, [pc, #112]	; (8000908 <command+0xd4>)
 8000896:	6153      	str	r3, [r2, #20]
		ee_writeToRam(0, sizeof(offset), (uint8_t*) &offset); //Almacena
 8000898:	4a1b      	ldr	r2, [pc, #108]	; (8000908 <command+0xd4>)
 800089a:	2120      	movs	r1, #32
 800089c:	2000      	movs	r0, #0
 800089e:	f7ff fe41 	bl	8000524 <ee_writeToRam>
		break;
 80008a2:	e02b      	b.n	80008fc <command+0xc8>
	case 3: //Calibrate BPPS 0% Pos
		offset.low[3] = adcReadings[3]; //Recoje el valor actual
 80008a4:	4b17      	ldr	r3, [pc, #92]	; (8000904 <command+0xd0>)
 80008a6:	68db      	ldr	r3, [r3, #12]
 80008a8:	4a17      	ldr	r2, [pc, #92]	; (8000908 <command+0xd4>)
 80008aa:	60d3      	str	r3, [r2, #12]
		ee_writeToRam(0, sizeof(offset), (uint8_t*) &offset); //Almacena
 80008ac:	4a16      	ldr	r2, [pc, #88]	; (8000908 <command+0xd4>)
 80008ae:	2120      	movs	r1, #32
 80008b0:	2000      	movs	r0, #0
 80008b2:	f7ff fe37 	bl	8000524 <ee_writeToRam>
		break;
 80008b6:	e021      	b.n	80008fc <command+0xc8>

	case 4: //Calibrate BPPS 100% Pos
		offset.high[3] = adcReadings[3]; //Recoje el valor actual
 80008b8:	4b12      	ldr	r3, [pc, #72]	; (8000904 <command+0xd0>)
 80008ba:	68db      	ldr	r3, [r3, #12]
 80008bc:	4a12      	ldr	r2, [pc, #72]	; (8000908 <command+0xd4>)
 80008be:	61d3      	str	r3, [r2, #28]
		ee_writeToRam(0, sizeof(offset), (uint8_t*) &offset); //Almacena
 80008c0:	4a11      	ldr	r2, [pc, #68]	; (8000908 <command+0xd4>)
 80008c2:	2120      	movs	r1, #32
 80008c4:	2000      	movs	r0, #0
 80008c6:	f7ff fe2d 	bl	8000524 <ee_writeToRam>
		break;
 80008ca:	e017      	b.n	80008fc <command+0xc8>

	case 5: //Calibrate Leftest Steer Position
		offset.low[0] = adcReadings[0]; //Recoje el valor actual
 80008cc:	4b0d      	ldr	r3, [pc, #52]	; (8000904 <command+0xd0>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a0d      	ldr	r2, [pc, #52]	; (8000908 <command+0xd4>)
 80008d2:	6013      	str	r3, [r2, #0]
		ee_writeToRam(0, sizeof(offset), (uint8_t*) &offset); //Almacena
 80008d4:	4a0c      	ldr	r2, [pc, #48]	; (8000908 <command+0xd4>)
 80008d6:	2120      	movs	r1, #32
 80008d8:	2000      	movs	r0, #0
 80008da:	f7ff fe23 	bl	8000524 <ee_writeToRam>
		break;
 80008de:	e00d      	b.n	80008fc <command+0xc8>

	case 6: //Calibrate Rightest Steer Position
		offset.high[0] = adcReadings[0]; //Recoje el valor actual
 80008e0:	4b08      	ldr	r3, [pc, #32]	; (8000904 <command+0xd0>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a08      	ldr	r2, [pc, #32]	; (8000908 <command+0xd4>)
 80008e6:	6113      	str	r3, [r2, #16]
		ee_writeToRam(0, sizeof(offset), (uint8_t*) &offset); //Almacena
 80008e8:	4a07      	ldr	r2, [pc, #28]	; (8000908 <command+0xd4>)
 80008ea:	2120      	movs	r1, #32
 80008ec:	2000      	movs	r0, #0
 80008ee:	f7ff fe19 	bl	8000524 <ee_writeToRam>
		break;
 80008f2:	e003      	b.n	80008fc <command+0xc8>

	case 7: //Reset de la implausability
		apps.imp_flag = 0;
 80008f4:	4b05      	ldr	r3, [pc, #20]	; (800090c <command+0xd8>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	709a      	strb	r2, [r3, #2]
		break;
 80008fa:	bf00      	nop

	}

}
 80008fc:	bf00      	nop
 80008fe:	3708      	adds	r7, #8
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	2000053c 	.word	0x2000053c
 8000908:	20000510 	.word	0x20000510
 800090c:	20000530 	.word	0x20000530

08000910 <sendCan>:

void sendCan() {
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
	//APPS
	TxHeader.IDE = CAN_ID_STD;
 8000914:	4b2f      	ldr	r3, [pc, #188]	; (80009d4 <sendCan+0xc4>)
 8000916:	2200      	movs	r2, #0
 8000918:	609a      	str	r2, [r3, #8]
	TxHeader.StdId = TER_APPS_FRAME_ID;
 800091a:	4b2e      	ldr	r3, [pc, #184]	; (80009d4 <sendCan+0xc4>)
 800091c:	2201      	movs	r2, #1
 800091e:	601a      	str	r2, [r3, #0]
	TxHeader.RTR = CAN_RTR_DATA;
 8000920:	4b2c      	ldr	r3, [pc, #176]	; (80009d4 <sendCan+0xc4>)
 8000922:	2200      	movs	r2, #0
 8000924:	60da      	str	r2, [r3, #12]
	TxHeader.DLC = TER_APPS_LENGTH;
 8000926:	4b2b      	ldr	r3, [pc, #172]	; (80009d4 <sendCan+0xc4>)
 8000928:	2208      	movs	r2, #8
 800092a:	611a      	str	r2, [r3, #16]
	ter_apps_pack(TxData, &apps, sizeof(TxData)); //Empaquetamos
 800092c:	2208      	movs	r2, #8
 800092e:	492a      	ldr	r1, [pc, #168]	; (80009d8 <sendCan+0xc8>)
 8000930:	482a      	ldr	r0, [pc, #168]	; (80009dc <sendCan+0xcc>)
 8000932:	f000 f962 	bl	8000bfa <ter_apps_pack>
	if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK) {
 8000936:	4b2a      	ldr	r3, [pc, #168]	; (80009e0 <sendCan+0xd0>)
 8000938:	4a28      	ldr	r2, [pc, #160]	; (80009dc <sendCan+0xcc>)
 800093a:	4926      	ldr	r1, [pc, #152]	; (80009d4 <sendCan+0xc4>)
 800093c:	4829      	ldr	r0, [pc, #164]	; (80009e4 <sendCan+0xd4>)
 800093e:	f001 f85a 	bl	80019f6 <HAL_CAN_AddTxMessage>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d004      	beq.n	8000952 <sendCan+0x42>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1); //Indicate Error with light
 8000948:	2201      	movs	r2, #1
 800094a:	2108      	movs	r1, #8
 800094c:	4826      	ldr	r0, [pc, #152]	; (80009e8 <sendCan+0xd8>)
 800094e:	f002 f805 	bl	800295c <HAL_GPIO_WritePin>
	}
	//BPPS
	TxHeader.IDE = CAN_ID_STD;
 8000952:	4b20      	ldr	r3, [pc, #128]	; (80009d4 <sendCan+0xc4>)
 8000954:	2200      	movs	r2, #0
 8000956:	609a      	str	r2, [r3, #8]
	TxHeader.StdId = TER_BPPS_FRAME_ID;
 8000958:	4b1e      	ldr	r3, [pc, #120]	; (80009d4 <sendCan+0xc4>)
 800095a:	2202      	movs	r2, #2
 800095c:	601a      	str	r2, [r3, #0]
	TxHeader.RTR = CAN_RTR_DATA;
 800095e:	4b1d      	ldr	r3, [pc, #116]	; (80009d4 <sendCan+0xc4>)
 8000960:	2200      	movs	r2, #0
 8000962:	60da      	str	r2, [r3, #12]
	TxHeader.DLC = TER_BPPS_LENGTH;
 8000964:	4b1b      	ldr	r3, [pc, #108]	; (80009d4 <sendCan+0xc4>)
 8000966:	2201      	movs	r2, #1
 8000968:	611a      	str	r2, [r3, #16]
	ter_bpps_pack(TxData, &bpps, sizeof(TxData)); //Empaquetamos
 800096a:	2208      	movs	r2, #8
 800096c:	491f      	ldr	r1, [pc, #124]	; (80009ec <sendCan+0xdc>)
 800096e:	481b      	ldr	r0, [pc, #108]	; (80009dc <sendCan+0xcc>)
 8000970:	f000 f98a 	bl	8000c88 <ter_bpps_pack>
	if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK) {
 8000974:	4b1a      	ldr	r3, [pc, #104]	; (80009e0 <sendCan+0xd0>)
 8000976:	4a19      	ldr	r2, [pc, #100]	; (80009dc <sendCan+0xcc>)
 8000978:	4916      	ldr	r1, [pc, #88]	; (80009d4 <sendCan+0xc4>)
 800097a:	481a      	ldr	r0, [pc, #104]	; (80009e4 <sendCan+0xd4>)
 800097c:	f001 f83b 	bl	80019f6 <HAL_CAN_AddTxMessage>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d004      	beq.n	8000990 <sendCan+0x80>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1); //Indicate Error with light
 8000986:	2201      	movs	r2, #1
 8000988:	2108      	movs	r1, #8
 800098a:	4817      	ldr	r0, [pc, #92]	; (80009e8 <sendCan+0xd8>)
 800098c:	f001 ffe6 	bl	800295c <HAL_GPIO_WritePin>
	}
	//STEER
	//BPPS
	TxHeader.IDE = CAN_ID_STD;
 8000990:	4b10      	ldr	r3, [pc, #64]	; (80009d4 <sendCan+0xc4>)
 8000992:	2200      	movs	r2, #0
 8000994:	609a      	str	r2, [r3, #8]
	TxHeader.StdId = TER_STEER_FRAME_ID;
 8000996:	4b0f      	ldr	r3, [pc, #60]	; (80009d4 <sendCan+0xc4>)
 8000998:	2205      	movs	r2, #5
 800099a:	601a      	str	r2, [r3, #0]
	TxHeader.RTR = CAN_RTR_DATA;
 800099c:	4b0d      	ldr	r3, [pc, #52]	; (80009d4 <sendCan+0xc4>)
 800099e:	2200      	movs	r2, #0
 80009a0:	60da      	str	r2, [r3, #12]
	TxHeader.DLC = TER_STEER_LENGTH;
 80009a2:	4b0c      	ldr	r3, [pc, #48]	; (80009d4 <sendCan+0xc4>)
 80009a4:	2208      	movs	r2, #8
 80009a6:	611a      	str	r2, [r3, #16]
	ter_steer_pack(TxData, &steer, sizeof(TxData)); //Empaquetamos
 80009a8:	2208      	movs	r2, #8
 80009aa:	4911      	ldr	r1, [pc, #68]	; (80009f0 <sendCan+0xe0>)
 80009ac:	480b      	ldr	r0, [pc, #44]	; (80009dc <sendCan+0xcc>)
 80009ae:	f000 f990 	bl	8000cd2 <ter_steer_pack>
	if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK) {
 80009b2:	4b0b      	ldr	r3, [pc, #44]	; (80009e0 <sendCan+0xd0>)
 80009b4:	4a09      	ldr	r2, [pc, #36]	; (80009dc <sendCan+0xcc>)
 80009b6:	4907      	ldr	r1, [pc, #28]	; (80009d4 <sendCan+0xc4>)
 80009b8:	480a      	ldr	r0, [pc, #40]	; (80009e4 <sendCan+0xd4>)
 80009ba:	f001 f81c 	bl	80019f6 <HAL_CAN_AddTxMessage>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d004      	beq.n	80009ce <sendCan+0xbe>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1); //Indicate Error with light
 80009c4:	2201      	movs	r2, #1
 80009c6:	2108      	movs	r1, #8
 80009c8:	4807      	ldr	r0, [pc, #28]	; (80009e8 <sendCan+0xd8>)
 80009ca:	f001 ffc7 	bl	800295c <HAL_GPIO_WritePin>
	}

}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	200004c4 	.word	0x200004c4
 80009d8:	20000530 	.word	0x20000530
 80009dc:	200004dc 	.word	0x200004dc
 80009e0:	200004e4 	.word	0x200004e4
 80009e4:	2000009c 	.word	0x2000009c
 80009e8:	40010800 	.word	0x40010800
 80009ec:	20000534 	.word	0x20000534
 80009f0:	20000538 	.word	0x20000538

080009f4 <map>:

int32_t map(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min,
		int32_t out_max) {
 80009f4:	b480      	push	{r7}
 80009f6:	b087      	sub	sp, #28
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	60f8      	str	r0, [r7, #12]
 80009fc:	60b9      	str	r1, [r7, #8]
 80009fe:	607a      	str	r2, [r7, #4]
 8000a00:	603b      	str	r3, [r7, #0]
	long val = (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000a02:	68fa      	ldr	r2, [r7, #12]
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	1ad3      	subs	r3, r2, r3
 8000a08:	6a39      	ldr	r1, [r7, #32]
 8000a0a:	683a      	ldr	r2, [r7, #0]
 8000a0c:	1a8a      	subs	r2, r1, r2
 8000a0e:	fb03 f202 	mul.w	r2, r3, r2
 8000a12:	6879      	ldr	r1, [r7, #4]
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	1acb      	subs	r3, r1, r3
 8000a18:	fb92 f3f3 	sdiv	r3, r2, r3
 8000a1c:	683a      	ldr	r2, [r7, #0]
 8000a1e:	4413      	add	r3, r2
 8000a20:	617b      	str	r3, [r7, #20]
	return val;
 8000a22:	697b      	ldr	r3, [r7, #20]
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	371c      	adds	r7, #28
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bc80      	pop	{r7}
 8000a2c:	4770      	bx	lr
	...

08000a30 <HAL_CAN_RxFifo0MsgPendingCallback>:

///////////////////////////////////////////////////////////////[Interrupciones]////////////////////////////////////////////////////////////////////////////////
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData); //Recoge el mensaje
 8000a38:	4b09      	ldr	r3, [pc, #36]	; (8000a60 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000a3a:	4a0a      	ldr	r2, [pc, #40]	; (8000a64 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	6878      	ldr	r0, [r7, #4]
 8000a40:	f001 f8a8 	bl	8001b94 <HAL_CAN_GetRxMessage>
	if (RxHeader.StdId == TER_PEDAL_CMD_FRAME_ID) { //Issued Command
 8000a44:	4b07      	ldr	r3, [pc, #28]	; (8000a64 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	2b04      	cmp	r3, #4
 8000a4a:	d105      	bne.n	8000a58 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>
		command(RxData[0], &RxData[1]); //Envia comando y argumentos
 8000a4c:	4b04      	ldr	r3, [pc, #16]	; (8000a60 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	4905      	ldr	r1, [pc, #20]	; (8000a68 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8000a52:	4618      	mov	r0, r3
 8000a54:	f7ff feee 	bl	8000834 <command>
	}
}
 8000a58:	bf00      	nop
 8000a5a:	3708      	adds	r7, #8
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	20000504 	.word	0x20000504
 8000a64:	200004e8 	.word	0x200004e8
 8000a68:	20000505 	.word	0x20000505

08000a6c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a70:	b672      	cpsid	i
}
 8000a72:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000a74:	e7fe      	b.n	8000a74 <Error_Handler+0x8>
	...

08000a78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a7e:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <HAL_MspInit+0x40>)
 8000a80:	699b      	ldr	r3, [r3, #24]
 8000a82:	4a0d      	ldr	r2, [pc, #52]	; (8000ab8 <HAL_MspInit+0x40>)
 8000a84:	f043 0301 	orr.w	r3, r3, #1
 8000a88:	6193      	str	r3, [r2, #24]
 8000a8a:	4b0b      	ldr	r3, [pc, #44]	; (8000ab8 <HAL_MspInit+0x40>)
 8000a8c:	699b      	ldr	r3, [r3, #24]
 8000a8e:	f003 0301 	and.w	r3, r3, #1
 8000a92:	607b      	str	r3, [r7, #4]
 8000a94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a96:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <HAL_MspInit+0x40>)
 8000a98:	69db      	ldr	r3, [r3, #28]
 8000a9a:	4a07      	ldr	r2, [pc, #28]	; (8000ab8 <HAL_MspInit+0x40>)
 8000a9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa0:	61d3      	str	r3, [r2, #28]
 8000aa2:	4b05      	ldr	r3, [pc, #20]	; (8000ab8 <HAL_MspInit+0x40>)
 8000aa4:	69db      	ldr	r3, [r3, #28]
 8000aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aaa:	603b      	str	r3, [r7, #0]
 8000aac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	370c      	adds	r7, #12
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bc80      	pop	{r7}
 8000ab6:	4770      	bx	lr
 8000ab8:	40021000 	.word	0x40021000

08000abc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ac0:	e7fe      	b.n	8000ac0 <NMI_Handler+0x4>

08000ac2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ac6:	e7fe      	b.n	8000ac6 <HardFault_Handler+0x4>

08000ac8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000acc:	e7fe      	b.n	8000acc <MemManage_Handler+0x4>

08000ace <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ad2:	e7fe      	b.n	8000ad2 <BusFault_Handler+0x4>

08000ad4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ad8:	e7fe      	b.n	8000ad8 <UsageFault_Handler+0x4>

08000ada <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ada:	b480      	push	{r7}
 8000adc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bc80      	pop	{r7}
 8000ae4:	4770      	bx	lr

08000ae6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aea:	bf00      	nop
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bc80      	pop	{r7}
 8000af0:	4770      	bx	lr

08000af2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000af2:	b480      	push	{r7}
 8000af4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000af6:	bf00      	nop
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bc80      	pop	{r7}
 8000afc:	4770      	bx	lr

08000afe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000afe:	b580      	push	{r7, lr}
 8000b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b02:	f000 f965 	bl	8000dd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
	...

08000b0c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000b10:	4802      	ldr	r0, [pc, #8]	; (8000b1c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000b12:	f001 f985 	bl	8001e20 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	2000009c 	.word	0x2000009c

08000b20 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b24:	bf00      	nop
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bc80      	pop	{r7}
 8000b2a:	4770      	bx	lr

08000b2c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b2c:	480c      	ldr	r0, [pc, #48]	; (8000b60 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b2e:	490d      	ldr	r1, [pc, #52]	; (8000b64 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b30:	4a0d      	ldr	r2, [pc, #52]	; (8000b68 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b34:	e002      	b.n	8000b3c <LoopCopyDataInit>

08000b36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b3a:	3304      	adds	r3, #4

08000b3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b40:	d3f9      	bcc.n	8000b36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b42:	4a0a      	ldr	r2, [pc, #40]	; (8000b6c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b44:	4c0a      	ldr	r4, [pc, #40]	; (8000b70 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b48:	e001      	b.n	8000b4e <LoopFillZerobss>

08000b4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b4c:	3204      	adds	r2, #4

08000b4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b50:	d3fb      	bcc.n	8000b4a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b52:	f7ff ffe5 	bl	8000b20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b56:	f002 fbb5 	bl	80032c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b5a:	f7ff fd4f 	bl	80005fc <main>
  bx lr
 8000b5e:	4770      	bx	lr
  ldr r0, =_sdata
 8000b60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b64:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b68:	0800336c 	.word	0x0800336c
  ldr r2, =_sbss
 8000b6c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b70:	20000550 	.word	0x20000550

08000b74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b74:	e7fe      	b.n	8000b74 <ADC1_2_IRQHandler>

08000b76 <pack_left_shift_u8>:

static inline uint8_t pack_left_shift_u8(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 8000b76:	b480      	push	{r7}
 8000b78:	b083      	sub	sp, #12
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	71fb      	strb	r3, [r7, #7]
 8000b80:	460b      	mov	r3, r1
 8000b82:	71bb      	strb	r3, [r7, #6]
 8000b84:	4613      	mov	r3, r2
 8000b86:	717b      	strb	r3, [r7, #5]
    return (uint8_t)((uint8_t)(value << shift) & mask);
 8000b88:	79fa      	ldrb	r2, [r7, #7]
 8000b8a:	79bb      	ldrb	r3, [r7, #6]
 8000b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b90:	b2da      	uxtb	r2, r3
 8000b92:	797b      	ldrb	r3, [r7, #5]
 8000b94:	4013      	ands	r3, r2
 8000b96:	b2db      	uxtb	r3, r3
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	370c      	adds	r7, #12
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bc80      	pop	{r7}
 8000ba0:	4770      	bx	lr

08000ba2 <pack_left_shift_u16>:

static inline uint8_t pack_left_shift_u16(
    uint16_t value,
    uint8_t shift,
    uint8_t mask)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	b083      	sub	sp, #12
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	4603      	mov	r3, r0
 8000baa:	80fb      	strh	r3, [r7, #6]
 8000bac:	460b      	mov	r3, r1
 8000bae:	717b      	strb	r3, [r7, #5]
 8000bb0:	4613      	mov	r3, r2
 8000bb2:	713b      	strb	r3, [r7, #4]
    return (uint8_t)((uint8_t)(value << shift) & mask);
 8000bb4:	88fa      	ldrh	r2, [r7, #6]
 8000bb6:	797b      	ldrb	r3, [r7, #5]
 8000bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbc:	b2da      	uxtb	r2, r3
 8000bbe:	793b      	ldrb	r3, [r7, #4]
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	b2db      	uxtb	r3, r3
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	370c      	adds	r7, #12
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bc80      	pop	{r7}
 8000bcc:	4770      	bx	lr

08000bce <pack_right_shift_u16>:

static inline uint8_t pack_right_shift_u16(
    uint16_t value,
    uint8_t shift,
    uint8_t mask)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	b083      	sub	sp, #12
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	80fb      	strh	r3, [r7, #6]
 8000bd8:	460b      	mov	r3, r1
 8000bda:	717b      	strb	r3, [r7, #5]
 8000bdc:	4613      	mov	r3, r2
 8000bde:	713b      	strb	r3, [r7, #4]
    return (uint8_t)((uint8_t)(value >> shift) & mask);
 8000be0:	88fa      	ldrh	r2, [r7, #6]
 8000be2:	797b      	ldrb	r3, [r7, #5]
 8000be4:	fa42 f303 	asr.w	r3, r2, r3
 8000be8:	b2da      	uxtb	r2, r3
 8000bea:	793b      	ldrb	r3, [r7, #4]
 8000bec:	4013      	ands	r3, r2
 8000bee:	b2db      	uxtb	r3, r3
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	370c      	adds	r7, #12
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bc80      	pop	{r7}
 8000bf8:	4770      	bx	lr

08000bfa <ter_apps_pack>:

int ter_apps_pack(
    uint8_t *dst_p,
    const struct ter_apps_t *src_p,
    size_t size)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b084      	sub	sp, #16
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	60f8      	str	r0, [r7, #12]
 8000c02:	60b9      	str	r1, [r7, #8]
 8000c04:	607a      	str	r2, [r7, #4]
    if (size < 8u) {
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	2b07      	cmp	r3, #7
 8000c0a:	d802      	bhi.n	8000c12 <ter_apps_pack+0x18>
        return (-EINVAL);
 8000c0c:	f06f 0315 	mvn.w	r3, #21
 8000c10:	e036      	b.n	8000c80 <ter_apps_pack+0x86>
    }

    memset(&dst_p[0], 0, 8);
 8000c12:	2208      	movs	r2, #8
 8000c14:	2100      	movs	r1, #0
 8000c16:	68f8      	ldr	r0, [r7, #12]
 8000c18:	f002 fb4c 	bl	80032b4 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->apps_1, 0u, 0xffu);
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	22ff      	movs	r2, #255	; 0xff
 8000c22:	2100      	movs	r1, #0
 8000c24:	4618      	mov	r0, r3
 8000c26:	f7ff ffa6 	bl	8000b76 <pack_left_shift_u8>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	4313      	orrs	r3, r2
 8000c34:	b2da      	uxtb	r2, r3
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->apps_2, 0u, 0xffu);
 8000c3a:	68bb      	ldr	r3, [r7, #8]
 8000c3c:	785b      	ldrb	r3, [r3, #1]
 8000c3e:	22ff      	movs	r2, #255	; 0xff
 8000c40:	2100      	movs	r1, #0
 8000c42:	4618      	mov	r0, r3
 8000c44:	f7ff ff97 	bl	8000b76 <pack_left_shift_u8>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	3301      	adds	r3, #1
 8000c50:	781a      	ldrb	r2, [r3, #0]
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	3301      	adds	r3, #1
 8000c56:	430a      	orrs	r2, r1
 8000c58:	b2d2      	uxtb	r2, r2
 8000c5a:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_left_shift_u8(src_p->imp_flag, 0u, 0xffu);
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	789b      	ldrb	r3, [r3, #2]
 8000c60:	22ff      	movs	r2, #255	; 0xff
 8000c62:	2100      	movs	r1, #0
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff ff86 	bl	8000b76 <pack_left_shift_u8>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	3302      	adds	r3, #2
 8000c72:	781a      	ldrb	r2, [r3, #0]
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	3302      	adds	r3, #2
 8000c78:	430a      	orrs	r2, r1
 8000c7a:	b2d2      	uxtb	r2, r2
 8000c7c:	701a      	strb	r2, [r3, #0]

    return (8);
 8000c7e:	2308      	movs	r3, #8
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3710      	adds	r7, #16
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <ter_bpps_pack>:

int ter_bpps_pack(
    uint8_t *dst_p,
    const struct ter_bpps_t *src_p,
    size_t size)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	60f8      	str	r0, [r7, #12]
 8000c90:	60b9      	str	r1, [r7, #8]
 8000c92:	607a      	str	r2, [r7, #4]
    if (size < 1u) {
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d102      	bne.n	8000ca0 <ter_bpps_pack+0x18>
        return (-EINVAL);
 8000c9a:	f06f 0315 	mvn.w	r3, #21
 8000c9e:	e014      	b.n	8000cca <ter_bpps_pack+0x42>
    }

    memset(&dst_p[0], 0, 1);
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	68f8      	ldr	r0, [r7, #12]
 8000ca6:	f002 fb05 	bl	80032b4 <memset>

    dst_p[0] |= pack_left_shift_u8(src_p->bpps, 0u, 0xffu);
 8000caa:	68bb      	ldr	r3, [r7, #8]
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	22ff      	movs	r2, #255	; 0xff
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f7ff ff5f 	bl	8000b76 <pack_left_shift_u8>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	461a      	mov	r2, r3
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	b2da      	uxtb	r2, r3
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	701a      	strb	r2, [r3, #0]

    return (1);
 8000cc8:	2301      	movs	r3, #1
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3710      	adds	r7, #16
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <ter_steer_pack>:

int ter_steer_pack(
    uint8_t *dst_p,
    const struct ter_steer_t *src_p,
    size_t size)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	b086      	sub	sp, #24
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	60f8      	str	r0, [r7, #12]
 8000cda:	60b9      	str	r1, [r7, #8]
 8000cdc:	607a      	str	r2, [r7, #4]
    uint16_t angle;

    if (size < 8u) {
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2b07      	cmp	r3, #7
 8000ce2:	d802      	bhi.n	8000cea <ter_steer_pack+0x18>
        return (-EINVAL);
 8000ce4:	f06f 0315 	mvn.w	r3, #21
 8000ce8:	e027      	b.n	8000d3a <ter_steer_pack+0x68>
    }

    memset(&dst_p[0], 0, 8);
 8000cea:	2208      	movs	r2, #8
 8000cec:	2100      	movs	r1, #0
 8000cee:	68f8      	ldr	r0, [r7, #12]
 8000cf0:	f002 fae0 	bl	80032b4 <memset>

    angle = (uint16_t)src_p->angle;
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cfa:	82fb      	strh	r3, [r7, #22]
    dst_p[0] |= pack_right_shift_u16(angle, 8u, 0xffu);
 8000cfc:	8afb      	ldrh	r3, [r7, #22]
 8000cfe:	22ff      	movs	r2, #255	; 0xff
 8000d00:	2108      	movs	r1, #8
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff ff63 	bl	8000bce <pack_right_shift_u16>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	4313      	orrs	r3, r2
 8000d12:	b2da      	uxtb	r2, r3
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u16(angle, 0u, 0xffu);
 8000d18:	8afb      	ldrh	r3, [r7, #22]
 8000d1a:	22ff      	movs	r2, #255	; 0xff
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f7ff ff3f 	bl	8000ba2 <pack_left_shift_u16>
 8000d24:	4603      	mov	r3, r0
 8000d26:	4619      	mov	r1, r3
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	781a      	ldrb	r2, [r3, #0]
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	3301      	adds	r3, #1
 8000d32:	430a      	orrs	r2, r1
 8000d34:	b2d2      	uxtb	r2, r2
 8000d36:	701a      	strb	r2, [r3, #0]

    return (8);
 8000d38:	2308      	movs	r3, #8
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3718      	adds	r7, #24
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
	...

08000d44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d48:	4b08      	ldr	r3, [pc, #32]	; (8000d6c <HAL_Init+0x28>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a07      	ldr	r2, [pc, #28]	; (8000d6c <HAL_Init+0x28>)
 8000d4e:	f043 0310 	orr.w	r3, r3, #16
 8000d52:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d54:	2003      	movs	r0, #3
 8000d56:	f001 fb53 	bl	8002400 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d5a:	200f      	movs	r0, #15
 8000d5c:	f000 f808 	bl	8000d70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d60:	f7ff fe8a 	bl	8000a78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d64:	2300      	movs	r3, #0
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40022000 	.word	0x40022000

08000d70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d78:	4b12      	ldr	r3, [pc, #72]	; (8000dc4 <HAL_InitTick+0x54>)
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	4b12      	ldr	r3, [pc, #72]	; (8000dc8 <HAL_InitTick+0x58>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	4619      	mov	r1, r3
 8000d82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f001 fb6b 	bl	800246a <HAL_SYSTICK_Config>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e00e      	b.n	8000dbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2b0f      	cmp	r3, #15
 8000da2:	d80a      	bhi.n	8000dba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000da4:	2200      	movs	r2, #0
 8000da6:	6879      	ldr	r1, [r7, #4]
 8000da8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000dac:	f001 fb33 	bl	8002416 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000db0:	4a06      	ldr	r2, [pc, #24]	; (8000dcc <HAL_InitTick+0x5c>)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000db6:	2300      	movs	r3, #0
 8000db8:	e000      	b.n	8000dbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dba:	2301      	movs	r3, #1
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3708      	adds	r7, #8
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	20000000 	.word	0x20000000
 8000dc8:	20000008 	.word	0x20000008
 8000dcc:	20000004 	.word	0x20000004

08000dd0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dd4:	4b05      	ldr	r3, [pc, #20]	; (8000dec <HAL_IncTick+0x1c>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	461a      	mov	r2, r3
 8000dda:	4b05      	ldr	r3, [pc, #20]	; (8000df0 <HAL_IncTick+0x20>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4413      	add	r3, r2
 8000de0:	4a03      	ldr	r2, [pc, #12]	; (8000df0 <HAL_IncTick+0x20>)
 8000de2:	6013      	str	r3, [r2, #0]
}
 8000de4:	bf00      	nop
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bc80      	pop	{r7}
 8000dea:	4770      	bx	lr
 8000dec:	20000008 	.word	0x20000008
 8000df0:	2000054c 	.word	0x2000054c

08000df4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  return uwTick;
 8000df8:	4b02      	ldr	r3, [pc, #8]	; (8000e04 <HAL_GetTick+0x10>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bc80      	pop	{r7}
 8000e02:	4770      	bx	lr
 8000e04:	2000054c 	.word	0x2000054c

08000e08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e10:	f7ff fff0 	bl	8000df4 <HAL_GetTick>
 8000e14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e20:	d005      	beq.n	8000e2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e22:	4b0a      	ldr	r3, [pc, #40]	; (8000e4c <HAL_Delay+0x44>)
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	461a      	mov	r2, r3
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	4413      	add	r3, r2
 8000e2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e2e:	bf00      	nop
 8000e30:	f7ff ffe0 	bl	8000df4 <HAL_GetTick>
 8000e34:	4602      	mov	r2, r0
 8000e36:	68bb      	ldr	r3, [r7, #8]
 8000e38:	1ad3      	subs	r3, r2, r3
 8000e3a:	68fa      	ldr	r2, [r7, #12]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d8f7      	bhi.n	8000e30 <HAL_Delay+0x28>
  {
  }
}
 8000e40:	bf00      	nop
 8000e42:	bf00      	nop
 8000e44:	3710      	adds	r7, #16
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	20000008 	.word	0x20000008

08000e50 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b086      	sub	sp, #24
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000e60:	2300      	movs	r3, #0
 8000e62:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000e64:	2300      	movs	r3, #0
 8000e66:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d101      	bne.n	8000e72 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e0be      	b.n	8000ff0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	689b      	ldr	r3, [r3, #8]
 8000e76:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d109      	bne.n	8000e94 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2200      	movs	r2, #0
 8000e84:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2200      	movs	r2, #0
 8000e8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e8e:	6878      	ldr	r0, [r7, #4]
 8000e90:	f7ff f9c6 	bl	8000220 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000e94:	6878      	ldr	r0, [r7, #4]
 8000e96:	f000 faff 	bl	8001498 <ADC_ConversionStop_Disable>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ea2:	f003 0310 	and.w	r3, r3, #16
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	f040 8099 	bne.w	8000fde <HAL_ADC_Init+0x18e>
 8000eac:	7dfb      	ldrb	r3, [r7, #23]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	f040 8095 	bne.w	8000fde <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eb8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000ebc:	f023 0302 	bic.w	r3, r3, #2
 8000ec0:	f043 0202 	orr.w	r2, r3, #2
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ed0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	7b1b      	ldrb	r3, [r3, #12]
 8000ed6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000ed8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000eda:	68ba      	ldr	r2, [r7, #8]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	689b      	ldr	r3, [r3, #8]
 8000ee4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ee8:	d003      	beq.n	8000ef2 <HAL_ADC_Init+0xa2>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	689b      	ldr	r3, [r3, #8]
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d102      	bne.n	8000ef8 <HAL_ADC_Init+0xa8>
 8000ef2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ef6:	e000      	b.n	8000efa <HAL_ADC_Init+0xaa>
 8000ef8:	2300      	movs	r3, #0
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	7d1b      	ldrb	r3, [r3, #20]
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d119      	bne.n	8000f3c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	7b1b      	ldrb	r3, [r3, #12]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d109      	bne.n	8000f24 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	699b      	ldr	r3, [r3, #24]
 8000f14:	3b01      	subs	r3, #1
 8000f16:	035a      	lsls	r2, r3, #13
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f20:	613b      	str	r3, [r7, #16]
 8000f22:	e00b      	b.n	8000f3c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f28:	f043 0220 	orr.w	r2, r3, #32
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f34:	f043 0201 	orr.w	r2, r3, #1
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	430a      	orrs	r2, r1
 8000f4e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	689a      	ldr	r2, [r3, #8]
 8000f56:	4b28      	ldr	r3, [pc, #160]	; (8000ff8 <HAL_ADC_Init+0x1a8>)
 8000f58:	4013      	ands	r3, r2
 8000f5a:	687a      	ldr	r2, [r7, #4]
 8000f5c:	6812      	ldr	r2, [r2, #0]
 8000f5e:	68b9      	ldr	r1, [r7, #8]
 8000f60:	430b      	orrs	r3, r1
 8000f62:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	689b      	ldr	r3, [r3, #8]
 8000f68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f6c:	d003      	beq.n	8000f76 <HAL_ADC_Init+0x126>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d104      	bne.n	8000f80 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	691b      	ldr	r3, [r3, #16]
 8000f7a:	3b01      	subs	r3, #1
 8000f7c:	051b      	lsls	r3, r3, #20
 8000f7e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f86:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	68fa      	ldr	r2, [r7, #12]
 8000f90:	430a      	orrs	r2, r1
 8000f92:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	689a      	ldr	r2, [r3, #8]
 8000f9a:	4b18      	ldr	r3, [pc, #96]	; (8000ffc <HAL_ADC_Init+0x1ac>)
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	68ba      	ldr	r2, [r7, #8]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	d10b      	bne.n	8000fbc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fae:	f023 0303 	bic.w	r3, r3, #3
 8000fb2:	f043 0201 	orr.w	r2, r3, #1
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000fba:	e018      	b.n	8000fee <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fc0:	f023 0312 	bic.w	r3, r3, #18
 8000fc4:	f043 0210 	orr.w	r2, r3, #16
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fd0:	f043 0201 	orr.w	r2, r3, #1
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000fdc:	e007      	b.n	8000fee <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fe2:	f043 0210 	orr.w	r2, r3, #16
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000fee:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3718      	adds	r7, #24
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	ffe1f7fd 	.word	0xffe1f7fd
 8000ffc:	ff1f0efe 	.word	0xff1f0efe

08001000 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b086      	sub	sp, #24
 8001004:	af00      	add	r7, sp, #0
 8001006:	60f8      	str	r0, [r7, #12]
 8001008:	60b9      	str	r1, [r7, #8]
 800100a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800100c:	2300      	movs	r3, #0
 800100e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a64      	ldr	r2, [pc, #400]	; (80011a8 <HAL_ADC_Start_DMA+0x1a8>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d004      	beq.n	8001024 <HAL_ADC_Start_DMA+0x24>
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a63      	ldr	r2, [pc, #396]	; (80011ac <HAL_ADC_Start_DMA+0x1ac>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d106      	bne.n	8001032 <HAL_ADC_Start_DMA+0x32>
 8001024:	4b60      	ldr	r3, [pc, #384]	; (80011a8 <HAL_ADC_Start_DMA+0x1a8>)
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800102c:	2b00      	cmp	r3, #0
 800102e:	f040 80b3 	bne.w	8001198 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001038:	2b01      	cmp	r3, #1
 800103a:	d101      	bne.n	8001040 <HAL_ADC_Start_DMA+0x40>
 800103c:	2302      	movs	r3, #2
 800103e:	e0ae      	b.n	800119e <HAL_ADC_Start_DMA+0x19e>
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	2201      	movs	r2, #1
 8001044:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001048:	68f8      	ldr	r0, [r7, #12]
 800104a:	f000 f9cb 	bl	80013e4 <ADC_Enable>
 800104e:	4603      	mov	r3, r0
 8001050:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001052:	7dfb      	ldrb	r3, [r7, #23]
 8001054:	2b00      	cmp	r3, #0
 8001056:	f040 809a 	bne.w	800118e <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800105e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001062:	f023 0301 	bic.w	r3, r3, #1
 8001066:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a4e      	ldr	r2, [pc, #312]	; (80011ac <HAL_ADC_Start_DMA+0x1ac>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d105      	bne.n	8001084 <HAL_ADC_Start_DMA+0x84>
 8001078:	4b4b      	ldr	r3, [pc, #300]	; (80011a8 <HAL_ADC_Start_DMA+0x1a8>)
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001080:	2b00      	cmp	r3, #0
 8001082:	d115      	bne.n	80010b0 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001088:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800109a:	2b00      	cmp	r3, #0
 800109c:	d026      	beq.n	80010ec <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010a2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80010a6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80010ae:	e01d      	b.n	80010ec <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010b4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a39      	ldr	r2, [pc, #228]	; (80011a8 <HAL_ADC_Start_DMA+0x1a8>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d004      	beq.n	80010d0 <HAL_ADC_Start_DMA+0xd0>
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a38      	ldr	r2, [pc, #224]	; (80011ac <HAL_ADC_Start_DMA+0x1ac>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d10d      	bne.n	80010ec <HAL_ADC_Start_DMA+0xec>
 80010d0:	4b35      	ldr	r3, [pc, #212]	; (80011a8 <HAL_ADC_Start_DMA+0x1a8>)
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d007      	beq.n	80010ec <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010e0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80010e4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d006      	beq.n	8001106 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010fc:	f023 0206 	bic.w	r2, r3, #6
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	62da      	str	r2, [r3, #44]	; 0x2c
 8001104:	e002      	b.n	800110c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	2200      	movs	r2, #0
 800110a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	2200      	movs	r2, #0
 8001110:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	6a1b      	ldr	r3, [r3, #32]
 8001118:	4a25      	ldr	r2, [pc, #148]	; (80011b0 <HAL_ADC_Start_DMA+0x1b0>)
 800111a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	6a1b      	ldr	r3, [r3, #32]
 8001120:	4a24      	ldr	r2, [pc, #144]	; (80011b4 <HAL_ADC_Start_DMA+0x1b4>)
 8001122:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	6a1b      	ldr	r3, [r3, #32]
 8001128:	4a23      	ldr	r2, [pc, #140]	; (80011b8 <HAL_ADC_Start_DMA+0x1b8>)
 800112a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f06f 0202 	mvn.w	r2, #2
 8001134:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	689a      	ldr	r2, [r3, #8]
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001144:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	6a18      	ldr	r0, [r3, #32]
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	334c      	adds	r3, #76	; 0x4c
 8001150:	4619      	mov	r1, r3
 8001152:	68ba      	ldr	r2, [r7, #8]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	f001 f9ef 	bl	8002538 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001164:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001168:	d108      	bne.n	800117c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	689a      	ldr	r2, [r3, #8]
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001178:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800117a:	e00f      	b.n	800119c <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	689a      	ldr	r2, [r3, #8]
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800118a:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800118c:	e006      	b.n	800119c <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	2200      	movs	r2, #0
 8001192:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001196:	e001      	b.n	800119c <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001198:	2301      	movs	r3, #1
 800119a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800119c:	7dfb      	ldrb	r3, [r7, #23]
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3718      	adds	r7, #24
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40012400 	.word	0x40012400
 80011ac:	40012800 	.word	0x40012800
 80011b0:	0800151b 	.word	0x0800151b
 80011b4:	08001597 	.word	0x08001597
 80011b8:	080015b3 	.word	0x080015b3

080011bc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80011c4:	bf00      	nop
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bc80      	pop	{r7}
 80011cc:	4770      	bx	lr

080011ce <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80011ce:	b480      	push	{r7}
 80011d0:	b083      	sub	sp, #12
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80011d6:	bf00      	nop
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	bc80      	pop	{r7}
 80011de:	4770      	bx	lr

080011e0 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80011e8:	bf00      	nop
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bc80      	pop	{r7}
 80011f0:	4770      	bx	lr
	...

080011f4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80011f4:	b480      	push	{r7}
 80011f6:	b085      	sub	sp, #20
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011fe:	2300      	movs	r3, #0
 8001200:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001202:	2300      	movs	r3, #0
 8001204:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800120c:	2b01      	cmp	r3, #1
 800120e:	d101      	bne.n	8001214 <HAL_ADC_ConfigChannel+0x20>
 8001210:	2302      	movs	r3, #2
 8001212:	e0dc      	b.n	80013ce <HAL_ADC_ConfigChannel+0x1da>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2201      	movs	r2, #1
 8001218:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	2b06      	cmp	r3, #6
 8001222:	d81c      	bhi.n	800125e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685a      	ldr	r2, [r3, #4]
 800122e:	4613      	mov	r3, r2
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	4413      	add	r3, r2
 8001234:	3b05      	subs	r3, #5
 8001236:	221f      	movs	r2, #31
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	43db      	mvns	r3, r3
 800123e:	4019      	ands	r1, r3
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	6818      	ldr	r0, [r3, #0]
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685a      	ldr	r2, [r3, #4]
 8001248:	4613      	mov	r3, r2
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	4413      	add	r3, r2
 800124e:	3b05      	subs	r3, #5
 8001250:	fa00 f203 	lsl.w	r2, r0, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	430a      	orrs	r2, r1
 800125a:	635a      	str	r2, [r3, #52]	; 0x34
 800125c:	e03c      	b.n	80012d8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	2b0c      	cmp	r3, #12
 8001264:	d81c      	bhi.n	80012a0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685a      	ldr	r2, [r3, #4]
 8001270:	4613      	mov	r3, r2
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	4413      	add	r3, r2
 8001276:	3b23      	subs	r3, #35	; 0x23
 8001278:	221f      	movs	r2, #31
 800127a:	fa02 f303 	lsl.w	r3, r2, r3
 800127e:	43db      	mvns	r3, r3
 8001280:	4019      	ands	r1, r3
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	6818      	ldr	r0, [r3, #0]
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685a      	ldr	r2, [r3, #4]
 800128a:	4613      	mov	r3, r2
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	4413      	add	r3, r2
 8001290:	3b23      	subs	r3, #35	; 0x23
 8001292:	fa00 f203 	lsl.w	r2, r0, r3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	430a      	orrs	r2, r1
 800129c:	631a      	str	r2, [r3, #48]	; 0x30
 800129e:	e01b      	b.n	80012d8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685a      	ldr	r2, [r3, #4]
 80012aa:	4613      	mov	r3, r2
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	4413      	add	r3, r2
 80012b0:	3b41      	subs	r3, #65	; 0x41
 80012b2:	221f      	movs	r2, #31
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	43db      	mvns	r3, r3
 80012ba:	4019      	ands	r1, r3
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	6818      	ldr	r0, [r3, #0]
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685a      	ldr	r2, [r3, #4]
 80012c4:	4613      	mov	r3, r2
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	4413      	add	r3, r2
 80012ca:	3b41      	subs	r3, #65	; 0x41
 80012cc:	fa00 f203 	lsl.w	r2, r0, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	430a      	orrs	r2, r1
 80012d6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2b09      	cmp	r3, #9
 80012de:	d91c      	bls.n	800131a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	68d9      	ldr	r1, [r3, #12]
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	4613      	mov	r3, r2
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	4413      	add	r3, r2
 80012f0:	3b1e      	subs	r3, #30
 80012f2:	2207      	movs	r2, #7
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	43db      	mvns	r3, r3
 80012fa:	4019      	ands	r1, r3
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	6898      	ldr	r0, [r3, #8]
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	4613      	mov	r3, r2
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	4413      	add	r3, r2
 800130a:	3b1e      	subs	r3, #30
 800130c:	fa00 f203 	lsl.w	r2, r0, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	430a      	orrs	r2, r1
 8001316:	60da      	str	r2, [r3, #12]
 8001318:	e019      	b.n	800134e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	6919      	ldr	r1, [r3, #16]
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	4613      	mov	r3, r2
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	4413      	add	r3, r2
 800132a:	2207      	movs	r2, #7
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	43db      	mvns	r3, r3
 8001332:	4019      	ands	r1, r3
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	6898      	ldr	r0, [r3, #8]
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	4613      	mov	r3, r2
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	4413      	add	r3, r2
 8001342:	fa00 f203 	lsl.w	r2, r0, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	430a      	orrs	r2, r1
 800134c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	2b10      	cmp	r3, #16
 8001354:	d003      	beq.n	800135e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800135a:	2b11      	cmp	r3, #17
 800135c:	d132      	bne.n	80013c4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a1d      	ldr	r2, [pc, #116]	; (80013d8 <HAL_ADC_ConfigChannel+0x1e4>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d125      	bne.n	80013b4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d126      	bne.n	80013c4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	689a      	ldr	r2, [r3, #8]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001384:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	2b10      	cmp	r3, #16
 800138c:	d11a      	bne.n	80013c4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800138e:	4b13      	ldr	r3, [pc, #76]	; (80013dc <HAL_ADC_ConfigChannel+0x1e8>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a13      	ldr	r2, [pc, #76]	; (80013e0 <HAL_ADC_ConfigChannel+0x1ec>)
 8001394:	fba2 2303 	umull	r2, r3, r2, r3
 8001398:	0c9a      	lsrs	r2, r3, #18
 800139a:	4613      	mov	r3, r2
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	4413      	add	r3, r2
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80013a4:	e002      	b.n	80013ac <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	3b01      	subs	r3, #1
 80013aa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d1f9      	bne.n	80013a6 <HAL_ADC_ConfigChannel+0x1b2>
 80013b2:	e007      	b.n	80013c4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013b8:	f043 0220 	orr.w	r2, r3, #32
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2200      	movs	r2, #0
 80013c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80013cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3714      	adds	r7, #20
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bc80      	pop	{r7}
 80013d6:	4770      	bx	lr
 80013d8:	40012400 	.word	0x40012400
 80013dc:	20000000 	.word	0x20000000
 80013e0:	431bde83 	.word	0x431bde83

080013e4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80013ec:	2300      	movs	r3, #0
 80013ee:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80013f0:	2300      	movs	r3, #0
 80013f2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	f003 0301 	and.w	r3, r3, #1
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d040      	beq.n	8001484 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	689a      	ldr	r2, [r3, #8]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f042 0201 	orr.w	r2, r2, #1
 8001410:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001412:	4b1f      	ldr	r3, [pc, #124]	; (8001490 <ADC_Enable+0xac>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a1f      	ldr	r2, [pc, #124]	; (8001494 <ADC_Enable+0xb0>)
 8001418:	fba2 2303 	umull	r2, r3, r2, r3
 800141c:	0c9b      	lsrs	r3, r3, #18
 800141e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001420:	e002      	b.n	8001428 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	3b01      	subs	r3, #1
 8001426:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d1f9      	bne.n	8001422 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800142e:	f7ff fce1 	bl	8000df4 <HAL_GetTick>
 8001432:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001434:	e01f      	b.n	8001476 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001436:	f7ff fcdd 	bl	8000df4 <HAL_GetTick>
 800143a:	4602      	mov	r2, r0
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	2b02      	cmp	r3, #2
 8001442:	d918      	bls.n	8001476 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	2b01      	cmp	r3, #1
 8001450:	d011      	beq.n	8001476 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001456:	f043 0210 	orr.w	r2, r3, #16
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001462:	f043 0201 	orr.w	r2, r3, #1
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2200      	movs	r2, #0
 800146e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e007      	b.n	8001486 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	f003 0301 	and.w	r3, r3, #1
 8001480:	2b01      	cmp	r3, #1
 8001482:	d1d8      	bne.n	8001436 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001484:	2300      	movs	r3, #0
}
 8001486:	4618      	mov	r0, r3
 8001488:	3710      	adds	r7, #16
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	20000000 	.word	0x20000000
 8001494:	431bde83 	.word	0x431bde83

08001498 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80014a0:	2300      	movs	r3, #0
 80014a2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d12e      	bne.n	8001510 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	689a      	ldr	r2, [r3, #8]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f022 0201 	bic.w	r2, r2, #1
 80014c0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80014c2:	f7ff fc97 	bl	8000df4 <HAL_GetTick>
 80014c6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80014c8:	e01b      	b.n	8001502 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80014ca:	f7ff fc93 	bl	8000df4 <HAL_GetTick>
 80014ce:	4602      	mov	r2, r0
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	2b02      	cmp	r3, #2
 80014d6:	d914      	bls.n	8001502 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d10d      	bne.n	8001502 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ea:	f043 0210 	orr.w	r2, r3, #16
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f6:	f043 0201 	orr.w	r2, r3, #1
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e007      	b.n	8001512 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	f003 0301 	and.w	r3, r3, #1
 800150c:	2b01      	cmp	r3, #1
 800150e:	d0dc      	beq.n	80014ca <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001510:	2300      	movs	r3, #0
}
 8001512:	4618      	mov	r0, r3
 8001514:	3710      	adds	r7, #16
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b084      	sub	sp, #16
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001526:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800152c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001530:	2b00      	cmp	r3, #0
 8001532:	d127      	bne.n	8001584 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001538:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800154a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800154e:	d115      	bne.n	800157c <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001554:	2b00      	cmp	r3, #0
 8001556:	d111      	bne.n	800157c <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800155c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001568:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800156c:	2b00      	cmp	r3, #0
 800156e:	d105      	bne.n	800157c <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001574:	f043 0201 	orr.w	r2, r3, #1
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800157c:	68f8      	ldr	r0, [r7, #12]
 800157e:	f7ff fe1d 	bl	80011bc <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001582:	e004      	b.n	800158e <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	6a1b      	ldr	r3, [r3, #32]
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	4798      	blx	r3
}
 800158e:	bf00      	nop
 8001590:	3710      	adds	r7, #16
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}

08001596 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001596:	b580      	push	{r7, lr}
 8001598:	b084      	sub	sp, #16
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a2:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80015a4:	68f8      	ldr	r0, [r7, #12]
 80015a6:	f7ff fe12 	bl	80011ce <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80015aa:	bf00      	nop
 80015ac:	3710      	adds	r7, #16
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b084      	sub	sp, #16
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015be:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015c4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d0:	f043 0204 	orr.w	r2, r3, #4
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80015d8:	68f8      	ldr	r0, [r7, #12]
 80015da:	f7ff fe01 	bl	80011e0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80015de:	bf00      	nop
 80015e0:	3710      	adds	r7, #16
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b084      	sub	sp, #16
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d101      	bne.n	80015f8 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e0ed      	b.n	80017d4 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	2b00      	cmp	r3, #0
 8001602:	d102      	bne.n	800160a <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f7fe fedd 	bl	80003c4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f042 0201 	orr.w	r2, r2, #1
 8001618:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800161a:	f7ff fbeb 	bl	8000df4 <HAL_GetTick>
 800161e:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001620:	e012      	b.n	8001648 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001622:	f7ff fbe7 	bl	8000df4 <HAL_GetTick>
 8001626:	4602      	mov	r2, r0
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	2b0a      	cmp	r3, #10
 800162e:	d90b      	bls.n	8001648 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001634:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2205      	movs	r2, #5
 8001640:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e0c5      	b.n	80017d4 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	2b00      	cmp	r3, #0
 8001654:	d0e5      	beq.n	8001622 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f022 0202 	bic.w	r2, r2, #2
 8001664:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001666:	f7ff fbc5 	bl	8000df4 <HAL_GetTick>
 800166a:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800166c:	e012      	b.n	8001694 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800166e:	f7ff fbc1 	bl	8000df4 <HAL_GetTick>
 8001672:	4602      	mov	r2, r0
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	2b0a      	cmp	r3, #10
 800167a:	d90b      	bls.n	8001694 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001680:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2205      	movs	r2, #5
 800168c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	e09f      	b.n	80017d4 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d1e5      	bne.n	800166e <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	7e1b      	ldrb	r3, [r3, #24]
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d108      	bne.n	80016bc <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	e007      	b.n	80016cc <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016ca:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	7e5b      	ldrb	r3, [r3, #25]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d108      	bne.n	80016e6 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80016e2:	601a      	str	r2, [r3, #0]
 80016e4:	e007      	b.n	80016f6 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80016f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	7e9b      	ldrb	r3, [r3, #26]
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d108      	bne.n	8001710 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f042 0220 	orr.w	r2, r2, #32
 800170c:	601a      	str	r2, [r3, #0]
 800170e:	e007      	b.n	8001720 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f022 0220 	bic.w	r2, r2, #32
 800171e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	7edb      	ldrb	r3, [r3, #27]
 8001724:	2b01      	cmp	r3, #1
 8001726:	d108      	bne.n	800173a <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f022 0210 	bic.w	r2, r2, #16
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	e007      	b.n	800174a <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f042 0210 	orr.w	r2, r2, #16
 8001748:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	7f1b      	ldrb	r3, [r3, #28]
 800174e:	2b01      	cmp	r3, #1
 8001750:	d108      	bne.n	8001764 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f042 0208 	orr.w	r2, r2, #8
 8001760:	601a      	str	r2, [r3, #0]
 8001762:	e007      	b.n	8001774 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f022 0208 	bic.w	r2, r2, #8
 8001772:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	7f5b      	ldrb	r3, [r3, #29]
 8001778:	2b01      	cmp	r3, #1
 800177a:	d108      	bne.n	800178e <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f042 0204 	orr.w	r2, r2, #4
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	e007      	b.n	800179e <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f022 0204 	bic.w	r2, r2, #4
 800179c:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	689a      	ldr	r2, [r3, #8]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	431a      	orrs	r2, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	691b      	ldr	r3, [r3, #16]
 80017ac:	431a      	orrs	r2, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	695b      	ldr	r3, [r3, #20]
 80017b2:	ea42 0103 	orr.w	r1, r2, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	1e5a      	subs	r2, r3, #1
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	430a      	orrs	r2, r1
 80017c2:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2200      	movs	r2, #0
 80017c8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2201      	movs	r2, #1
 80017ce:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80017d2:	2300      	movs	r3, #0
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3710      	adds	r7, #16
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}

080017dc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80017dc:	b480      	push	{r7}
 80017de:	b087      	sub	sp, #28
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017f2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80017f4:	7cfb      	ldrb	r3, [r7, #19]
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d003      	beq.n	8001802 <HAL_CAN_ConfigFilter+0x26>
 80017fa:	7cfb      	ldrb	r3, [r7, #19]
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	f040 80aa 	bne.w	8001956 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001808:	f043 0201 	orr.w	r2, r3, #1
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	695b      	ldr	r3, [r3, #20]
 8001816:	f003 031f 	and.w	r3, r3, #31
 800181a:	2201      	movs	r2, #1
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	43db      	mvns	r3, r3
 800182c:	401a      	ands	r2, r3
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	69db      	ldr	r3, [r3, #28]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d123      	bne.n	8001884 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	43db      	mvns	r3, r3
 8001846:	401a      	ands	r2, r3
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	68db      	ldr	r3, [r3, #12]
 8001852:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800185a:	683a      	ldr	r2, [r7, #0]
 800185c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800185e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	3248      	adds	r2, #72	; 0x48
 8001864:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001878:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800187a:	6979      	ldr	r1, [r7, #20]
 800187c:	3348      	adds	r3, #72	; 0x48
 800187e:	00db      	lsls	r3, r3, #3
 8001880:	440b      	add	r3, r1
 8001882:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	69db      	ldr	r3, [r3, #28]
 8001888:	2b01      	cmp	r3, #1
 800188a:	d122      	bne.n	80018d2 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	431a      	orrs	r2, r3
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018a8:	683a      	ldr	r2, [r7, #0]
 80018aa:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80018ac:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	3248      	adds	r2, #72	; 0x48
 80018b2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018c6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018c8:	6979      	ldr	r1, [r7, #20]
 80018ca:	3348      	adds	r3, #72	; 0x48
 80018cc:	00db      	lsls	r3, r3, #3
 80018ce:	440b      	add	r3, r1
 80018d0:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	699b      	ldr	r3, [r3, #24]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d109      	bne.n	80018ee <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	43db      	mvns	r3, r3
 80018e4:	401a      	ands	r2, r3
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80018ec:	e007      	b.n	80018fe <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	431a      	orrs	r2, r3
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	691b      	ldr	r3, [r3, #16]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d109      	bne.n	800191a <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	43db      	mvns	r3, r3
 8001910:	401a      	ands	r2, r3
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001918:	e007      	b.n	800192a <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	431a      	orrs	r2, r3
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	6a1b      	ldr	r3, [r3, #32]
 800192e:	2b01      	cmp	r3, #1
 8001930:	d107      	bne.n	8001942 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	431a      	orrs	r2, r3
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001948:	f023 0201 	bic.w	r2, r3, #1
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001952:	2300      	movs	r3, #0
 8001954:	e006      	b.n	8001964 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
  }
}
 8001964:	4618      	mov	r0, r3
 8001966:	371c      	adds	r7, #28
 8001968:	46bd      	mov	sp, r7
 800196a:	bc80      	pop	{r7}
 800196c:	4770      	bx	lr

0800196e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800196e:	b580      	push	{r7, lr}
 8001970:	b084      	sub	sp, #16
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	f893 3020 	ldrb.w	r3, [r3, #32]
 800197c:	b2db      	uxtb	r3, r3
 800197e:	2b01      	cmp	r3, #1
 8001980:	d12e      	bne.n	80019e0 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2202      	movs	r2, #2
 8001986:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f022 0201 	bic.w	r2, r2, #1
 8001998:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800199a:	f7ff fa2b 	bl	8000df4 <HAL_GetTick>
 800199e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80019a0:	e012      	b.n	80019c8 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80019a2:	f7ff fa27 	bl	8000df4 <HAL_GetTick>
 80019a6:	4602      	mov	r2, r0
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	2b0a      	cmp	r3, #10
 80019ae:	d90b      	bls.n	80019c8 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2205      	movs	r2, #5
 80019c0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e012      	b.n	80019ee <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d1e5      	bne.n	80019a2 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2200      	movs	r2, #0
 80019da:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80019dc:	2300      	movs	r3, #0
 80019de:	e006      	b.n	80019ee <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e4:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
  }
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3710      	adds	r7, #16
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80019f6:	b480      	push	{r7}
 80019f8:	b089      	sub	sp, #36	; 0x24
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	60f8      	str	r0, [r7, #12]
 80019fe:	60b9      	str	r1, [r7, #8]
 8001a00:	607a      	str	r2, [r7, #4]
 8001a02:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a0a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a14:	7ffb      	ldrb	r3, [r7, #31]
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d003      	beq.n	8001a22 <HAL_CAN_AddTxMessage+0x2c>
 8001a1a:	7ffb      	ldrb	r3, [r7, #31]
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	f040 80ad 	bne.w	8001b7c <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d10a      	bne.n	8001a42 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d105      	bne.n	8001a42 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	f000 8095 	beq.w	8001b6c <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	0e1b      	lsrs	r3, r3, #24
 8001a46:	f003 0303 	and.w	r3, r3, #3
 8001a4a:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	409a      	lsls	r2, r3
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d10d      	bne.n	8001a7a <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001a68:	68f9      	ldr	r1, [r7, #12]
 8001a6a:	6809      	ldr	r1, [r1, #0]
 8001a6c:	431a      	orrs	r2, r3
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	3318      	adds	r3, #24
 8001a72:	011b      	lsls	r3, r3, #4
 8001a74:	440b      	add	r3, r1
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	e00f      	b.n	8001a9a <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a84:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a8a:	68f9      	ldr	r1, [r7, #12]
 8001a8c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001a8e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	3318      	adds	r3, #24
 8001a94:	011b      	lsls	r3, r3, #4
 8001a96:	440b      	add	r3, r1
 8001a98:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	6819      	ldr	r1, [r3, #0]
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	691a      	ldr	r2, [r3, #16]
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	3318      	adds	r3, #24
 8001aa6:	011b      	lsls	r3, r3, #4
 8001aa8:	440b      	add	r3, r1
 8001aaa:	3304      	adds	r3, #4
 8001aac:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	7d1b      	ldrb	r3, [r3, #20]
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d111      	bne.n	8001ada <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	3318      	adds	r3, #24
 8001abe:	011b      	lsls	r3, r3, #4
 8001ac0:	4413      	add	r3, r2
 8001ac2:	3304      	adds	r3, #4
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	68fa      	ldr	r2, [r7, #12]
 8001ac8:	6811      	ldr	r1, [r2, #0]
 8001aca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	3318      	adds	r3, #24
 8001ad2:	011b      	lsls	r3, r3, #4
 8001ad4:	440b      	add	r3, r1
 8001ad6:	3304      	adds	r3, #4
 8001ad8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	3307      	adds	r3, #7
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	061a      	lsls	r2, r3, #24
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	3306      	adds	r3, #6
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	041b      	lsls	r3, r3, #16
 8001aea:	431a      	orrs	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	3305      	adds	r3, #5
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	021b      	lsls	r3, r3, #8
 8001af4:	4313      	orrs	r3, r2
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	3204      	adds	r2, #4
 8001afa:	7812      	ldrb	r2, [r2, #0]
 8001afc:	4610      	mov	r0, r2
 8001afe:	68fa      	ldr	r2, [r7, #12]
 8001b00:	6811      	ldr	r1, [r2, #0]
 8001b02:	ea43 0200 	orr.w	r2, r3, r0
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	011b      	lsls	r3, r3, #4
 8001b0a:	440b      	add	r3, r1
 8001b0c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001b10:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	3303      	adds	r3, #3
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	061a      	lsls	r2, r3, #24
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	3302      	adds	r3, #2
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	041b      	lsls	r3, r3, #16
 8001b22:	431a      	orrs	r2, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	3301      	adds	r3, #1
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	021b      	lsls	r3, r3, #8
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	7812      	ldrb	r2, [r2, #0]
 8001b32:	4610      	mov	r0, r2
 8001b34:	68fa      	ldr	r2, [r7, #12]
 8001b36:	6811      	ldr	r1, [r2, #0]
 8001b38:	ea43 0200 	orr.w	r2, r3, r0
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	011b      	lsls	r3, r3, #4
 8001b40:	440b      	add	r3, r1
 8001b42:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001b46:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	3318      	adds	r3, #24
 8001b50:	011b      	lsls	r3, r3, #4
 8001b52:	4413      	add	r3, r2
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	68fa      	ldr	r2, [r7, #12]
 8001b58:	6811      	ldr	r1, [r2, #0]
 8001b5a:	f043 0201 	orr.w	r2, r3, #1
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	3318      	adds	r3, #24
 8001b62:	011b      	lsls	r3, r3, #4
 8001b64:	440b      	add	r3, r1
 8001b66:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	e00e      	b.n	8001b8a <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b70:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e006      	b.n	8001b8a <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b80:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
  }
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3724      	adds	r7, #36	; 0x24
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bc80      	pop	{r7}
 8001b92:	4770      	bx	lr

08001b94 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001b94:	b480      	push	{r7}
 8001b96:	b087      	sub	sp, #28
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	60f8      	str	r0, [r7, #12]
 8001b9c:	60b9      	str	r1, [r7, #8]
 8001b9e:	607a      	str	r2, [r7, #4]
 8001ba0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ba8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001baa:	7dfb      	ldrb	r3, [r7, #23]
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d003      	beq.n	8001bb8 <HAL_CAN_GetRxMessage+0x24>
 8001bb0:	7dfb      	ldrb	r3, [r7, #23]
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	f040 8103 	bne.w	8001dbe <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d10e      	bne.n	8001bdc <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	f003 0303 	and.w	r3, r3, #3
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d116      	bne.n	8001bfa <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e0f7      	b.n	8001dcc <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	691b      	ldr	r3, [r3, #16]
 8001be2:	f003 0303 	and.w	r3, r3, #3
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d107      	bne.n	8001bfa <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e0e8      	b.n	8001dcc <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	331b      	adds	r3, #27
 8001c02:	011b      	lsls	r3, r3, #4
 8001c04:	4413      	add	r3, r2
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0204 	and.w	r2, r3, #4
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d10c      	bne.n	8001c32 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	331b      	adds	r3, #27
 8001c20:	011b      	lsls	r3, r3, #4
 8001c22:	4413      	add	r3, r2
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	0d5b      	lsrs	r3, r3, #21
 8001c28:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	e00b      	b.n	8001c4a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	331b      	adds	r3, #27
 8001c3a:	011b      	lsls	r3, r3, #4
 8001c3c:	4413      	add	r3, r2
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	08db      	lsrs	r3, r3, #3
 8001c42:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	331b      	adds	r3, #27
 8001c52:	011b      	lsls	r3, r3, #4
 8001c54:	4413      	add	r3, r2
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0202 	and.w	r2, r3, #2
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	331b      	adds	r3, #27
 8001c68:	011b      	lsls	r3, r3, #4
 8001c6a:	4413      	add	r3, r2
 8001c6c:	3304      	adds	r3, #4
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0308 	and.w	r3, r3, #8
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d003      	beq.n	8001c80 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2208      	movs	r2, #8
 8001c7c:	611a      	str	r2, [r3, #16]
 8001c7e:	e00b      	b.n	8001c98 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	331b      	adds	r3, #27
 8001c88:	011b      	lsls	r3, r3, #4
 8001c8a:	4413      	add	r3, r2
 8001c8c:	3304      	adds	r3, #4
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 020f 	and.w	r2, r3, #15
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	331b      	adds	r3, #27
 8001ca0:	011b      	lsls	r3, r3, #4
 8001ca2:	4413      	add	r3, r2
 8001ca4:	3304      	adds	r3, #4
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	0a1b      	lsrs	r3, r3, #8
 8001caa:	b2da      	uxtb	r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	331b      	adds	r3, #27
 8001cb8:	011b      	lsls	r3, r3, #4
 8001cba:	4413      	add	r3, r2
 8001cbc:	3304      	adds	r3, #4
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	0c1b      	lsrs	r3, r3, #16
 8001cc2:	b29a      	uxth	r2, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	011b      	lsls	r3, r3, #4
 8001cd0:	4413      	add	r3, r2
 8001cd2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	b2da      	uxtb	r2, r3
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	011b      	lsls	r3, r3, #4
 8001ce6:	4413      	add	r3, r2
 8001ce8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	0a1a      	lsrs	r2, r3, #8
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	b2d2      	uxtb	r2, r2
 8001cf6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	011b      	lsls	r3, r3, #4
 8001d00:	4413      	add	r3, r2
 8001d02:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	0c1a      	lsrs	r2, r3, #16
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	3302      	adds	r3, #2
 8001d0e:	b2d2      	uxtb	r2, r2
 8001d10:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	011b      	lsls	r3, r3, #4
 8001d1a:	4413      	add	r3, r2
 8001d1c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	0e1a      	lsrs	r2, r3, #24
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	3303      	adds	r3, #3
 8001d28:	b2d2      	uxtb	r2, r2
 8001d2a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	011b      	lsls	r3, r3, #4
 8001d34:	4413      	add	r3, r2
 8001d36:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	3304      	adds	r3, #4
 8001d40:	b2d2      	uxtb	r2, r2
 8001d42:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	011b      	lsls	r3, r3, #4
 8001d4c:	4413      	add	r3, r2
 8001d4e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	0a1a      	lsrs	r2, r3, #8
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	3305      	adds	r3, #5
 8001d5a:	b2d2      	uxtb	r2, r2
 8001d5c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	011b      	lsls	r3, r3, #4
 8001d66:	4413      	add	r3, r2
 8001d68:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	0c1a      	lsrs	r2, r3, #16
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	3306      	adds	r3, #6
 8001d74:	b2d2      	uxtb	r2, r2
 8001d76:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	011b      	lsls	r3, r3, #4
 8001d80:	4413      	add	r3, r2
 8001d82:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	0e1a      	lsrs	r2, r3, #24
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	3307      	adds	r3, #7
 8001d8e:	b2d2      	uxtb	r2, r2
 8001d90:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d108      	bne.n	8001daa <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	68da      	ldr	r2, [r3, #12]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f042 0220 	orr.w	r2, r2, #32
 8001da6:	60da      	str	r2, [r3, #12]
 8001da8:	e007      	b.n	8001dba <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	691a      	ldr	r2, [r3, #16]
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f042 0220 	orr.w	r2, r2, #32
 8001db8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	e006      	b.n	8001dcc <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
  }
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	371c      	adds	r7, #28
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bc80      	pop	{r7}
 8001dd4:	4770      	bx	lr

08001dd6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	b085      	sub	sp, #20
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
 8001dde:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001de6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001de8:	7bfb      	ldrb	r3, [r7, #15]
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d002      	beq.n	8001df4 <HAL_CAN_ActivateNotification+0x1e>
 8001dee:	7bfb      	ldrb	r3, [r7, #15]
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d109      	bne.n	8001e08 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	6959      	ldr	r1, [r3, #20]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	683a      	ldr	r2, [r7, #0]
 8001e00:	430a      	orrs	r2, r1
 8001e02:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001e04:	2300      	movs	r3, #0
 8001e06:	e006      	b.n	8001e16 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
  }
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3714      	adds	r7, #20
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bc80      	pop	{r7}
 8001e1e:	4770      	bx	lr

08001e20 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b08a      	sub	sp, #40	; 0x28
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	695b      	ldr	r3, [r3, #20]
 8001e32:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	691b      	ldr	r3, [r3, #16]
 8001e52:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	699b      	ldr	r3, [r3, #24]
 8001e5a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001e5c:	6a3b      	ldr	r3, [r7, #32]
 8001e5e:	f003 0301 	and.w	r3, r3, #1
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d07c      	beq.n	8001f60 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	f003 0301 	and.w	r3, r3, #1
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d023      	beq.n	8001eb8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2201      	movs	r2, #1
 8001e76:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d003      	beq.n	8001e8a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f000 f983 	bl	800218e <HAL_CAN_TxMailbox0CompleteCallback>
 8001e88:	e016      	b.n	8001eb8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	f003 0304 	and.w	r3, r3, #4
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d004      	beq.n	8001e9e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e96:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e9a:	627b      	str	r3, [r7, #36]	; 0x24
 8001e9c:	e00c      	b.n	8001eb8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001e9e:	69bb      	ldr	r3, [r7, #24]
 8001ea0:	f003 0308 	and.w	r3, r3, #8
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d004      	beq.n	8001eb2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eaa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001eae:	627b      	str	r3, [r7, #36]	; 0x24
 8001eb0:	e002      	b.n	8001eb8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f000 f986 	bl	80021c4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d024      	beq.n	8001f0c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001eca:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d003      	beq.n	8001ede <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f000 f962 	bl	80021a0 <HAL_CAN_TxMailbox1CompleteCallback>
 8001edc:	e016      	b.n	8001f0c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d004      	beq.n	8001ef2 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001eee:	627b      	str	r3, [r7, #36]	; 0x24
 8001ef0:	e00c      	b.n	8001f0c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d004      	beq.n	8001f06 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f02:	627b      	str	r3, [r7, #36]	; 0x24
 8001f04:	e002      	b.n	8001f0c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f000 f965 	bl	80021d6 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d024      	beq.n	8001f60 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001f1e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d003      	beq.n	8001f32 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f000 f941 	bl	80021b2 <HAL_CAN_TxMailbox2CompleteCallback>
 8001f30:	e016      	b.n	8001f60 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d004      	beq.n	8001f46 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f42:	627b      	str	r3, [r7, #36]	; 0x24
 8001f44:	e00c      	b.n	8001f60 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d004      	beq.n	8001f5a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f56:	627b      	str	r3, [r7, #36]	; 0x24
 8001f58:	e002      	b.n	8001f60 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f000 f944 	bl	80021e8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001f60:	6a3b      	ldr	r3, [r7, #32]
 8001f62:	f003 0308 	and.w	r3, r3, #8
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d00c      	beq.n	8001f84 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	f003 0310 	and.w	r3, r3, #16
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d007      	beq.n	8001f84 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f7a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2210      	movs	r2, #16
 8001f82:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001f84:	6a3b      	ldr	r3, [r7, #32]
 8001f86:	f003 0304 	and.w	r3, r3, #4
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d00b      	beq.n	8001fa6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	f003 0308 	and.w	r3, r3, #8
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d006      	beq.n	8001fa6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2208      	movs	r2, #8
 8001f9e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f000 f92a 	bl	80021fa <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001fa6:	6a3b      	ldr	r3, [r7, #32]
 8001fa8:	f003 0302 	and.w	r3, r3, #2
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d009      	beq.n	8001fc4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	68db      	ldr	r3, [r3, #12]
 8001fb6:	f003 0303 	and.w	r3, r3, #3
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d002      	beq.n	8001fc4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f7fe fd36 	bl	8000a30 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001fc4:	6a3b      	ldr	r3, [r7, #32]
 8001fc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d00c      	beq.n	8001fe8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	f003 0310 	and.w	r3, r3, #16
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d007      	beq.n	8001fe8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fde:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	2210      	movs	r2, #16
 8001fe6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001fe8:	6a3b      	ldr	r3, [r7, #32]
 8001fea:	f003 0320 	and.w	r3, r3, #32
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d00b      	beq.n	800200a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	f003 0308 	and.w	r3, r3, #8
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d006      	beq.n	800200a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2208      	movs	r2, #8
 8002002:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f000 f90a 	bl	800221e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800200a:	6a3b      	ldr	r3, [r7, #32]
 800200c:	f003 0310 	and.w	r3, r3, #16
 8002010:	2b00      	cmp	r3, #0
 8002012:	d009      	beq.n	8002028 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	691b      	ldr	r3, [r3, #16]
 800201a:	f003 0303 	and.w	r3, r3, #3
 800201e:	2b00      	cmp	r3, #0
 8002020:	d002      	beq.n	8002028 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f000 f8f2 	bl	800220c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002028:	6a3b      	ldr	r3, [r7, #32]
 800202a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d00b      	beq.n	800204a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	f003 0310 	and.w	r3, r3, #16
 8002038:	2b00      	cmp	r3, #0
 800203a:	d006      	beq.n	800204a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2210      	movs	r2, #16
 8002042:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f000 f8f3 	bl	8002230 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800204a:	6a3b      	ldr	r3, [r7, #32]
 800204c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d00b      	beq.n	800206c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	f003 0308 	and.w	r3, r3, #8
 800205a:	2b00      	cmp	r3, #0
 800205c:	d006      	beq.n	800206c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	2208      	movs	r2, #8
 8002064:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f000 f8eb 	bl	8002242 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800206c:	6a3b      	ldr	r3, [r7, #32]
 800206e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d07b      	beq.n	800216e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	f003 0304 	and.w	r3, r3, #4
 800207c:	2b00      	cmp	r3, #0
 800207e:	d072      	beq.n	8002166 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002080:	6a3b      	ldr	r3, [r7, #32]
 8002082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002086:	2b00      	cmp	r3, #0
 8002088:	d008      	beq.n	800209c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002090:	2b00      	cmp	r3, #0
 8002092:	d003      	beq.n	800209c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002096:	f043 0301 	orr.w	r3, r3, #1
 800209a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800209c:	6a3b      	ldr	r3, [r7, #32]
 800209e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d008      	beq.n	80020b8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d003      	beq.n	80020b8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80020b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b2:	f043 0302 	orr.w	r3, r3, #2
 80020b6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80020b8:	6a3b      	ldr	r3, [r7, #32]
 80020ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d008      	beq.n	80020d4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d003      	beq.n	80020d4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80020cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ce:	f043 0304 	orr.w	r3, r3, #4
 80020d2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80020d4:	6a3b      	ldr	r3, [r7, #32]
 80020d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d043      	beq.n	8002166 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d03e      	beq.n	8002166 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80020ee:	2b60      	cmp	r3, #96	; 0x60
 80020f0:	d02b      	beq.n	800214a <HAL_CAN_IRQHandler+0x32a>
 80020f2:	2b60      	cmp	r3, #96	; 0x60
 80020f4:	d82e      	bhi.n	8002154 <HAL_CAN_IRQHandler+0x334>
 80020f6:	2b50      	cmp	r3, #80	; 0x50
 80020f8:	d022      	beq.n	8002140 <HAL_CAN_IRQHandler+0x320>
 80020fa:	2b50      	cmp	r3, #80	; 0x50
 80020fc:	d82a      	bhi.n	8002154 <HAL_CAN_IRQHandler+0x334>
 80020fe:	2b40      	cmp	r3, #64	; 0x40
 8002100:	d019      	beq.n	8002136 <HAL_CAN_IRQHandler+0x316>
 8002102:	2b40      	cmp	r3, #64	; 0x40
 8002104:	d826      	bhi.n	8002154 <HAL_CAN_IRQHandler+0x334>
 8002106:	2b30      	cmp	r3, #48	; 0x30
 8002108:	d010      	beq.n	800212c <HAL_CAN_IRQHandler+0x30c>
 800210a:	2b30      	cmp	r3, #48	; 0x30
 800210c:	d822      	bhi.n	8002154 <HAL_CAN_IRQHandler+0x334>
 800210e:	2b10      	cmp	r3, #16
 8002110:	d002      	beq.n	8002118 <HAL_CAN_IRQHandler+0x2f8>
 8002112:	2b20      	cmp	r3, #32
 8002114:	d005      	beq.n	8002122 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002116:	e01d      	b.n	8002154 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211a:	f043 0308 	orr.w	r3, r3, #8
 800211e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002120:	e019      	b.n	8002156 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002124:	f043 0310 	orr.w	r3, r3, #16
 8002128:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800212a:	e014      	b.n	8002156 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800212c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212e:	f043 0320 	orr.w	r3, r3, #32
 8002132:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002134:	e00f      	b.n	8002156 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002138:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800213c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800213e:	e00a      	b.n	8002156 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002142:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002146:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002148:	e005      	b.n	8002156 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800214a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002150:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002152:	e000      	b.n	8002156 <HAL_CAN_IRQHandler+0x336>
            break;
 8002154:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	699a      	ldr	r2, [r3, #24]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002164:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2204      	movs	r2, #4
 800216c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800216e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002170:	2b00      	cmp	r3, #0
 8002172:	d008      	beq.n	8002186 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217a:	431a      	orrs	r2, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f000 f867 	bl	8002254 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002186:	bf00      	nop
 8002188:	3728      	adds	r7, #40	; 0x28
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800218e:	b480      	push	{r7}
 8002190:	b083      	sub	sp, #12
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002196:	bf00      	nop
 8002198:	370c      	adds	r7, #12
 800219a:	46bd      	mov	sp, r7
 800219c:	bc80      	pop	{r7}
 800219e:	4770      	bx	lr

080021a0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80021a8:	bf00      	nop
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bc80      	pop	{r7}
 80021b0:	4770      	bx	lr

080021b2 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80021b2:	b480      	push	{r7}
 80021b4:	b083      	sub	sp, #12
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80021ba:	bf00      	nop
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	bc80      	pop	{r7}
 80021c2:	4770      	bx	lr

080021c4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80021cc:	bf00      	nop
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bc80      	pop	{r7}
 80021d4:	4770      	bx	lr

080021d6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80021d6:	b480      	push	{r7}
 80021d8:	b083      	sub	sp, #12
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80021de:	bf00      	nop
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bc80      	pop	{r7}
 80021e6:	4770      	bx	lr

080021e8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bc80      	pop	{r7}
 80021f8:	4770      	bx	lr

080021fa <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80021fa:	b480      	push	{r7}
 80021fc:	b083      	sub	sp, #12
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002202:	bf00      	nop
 8002204:	370c      	adds	r7, #12
 8002206:	46bd      	mov	sp, r7
 8002208:	bc80      	pop	{r7}
 800220a:	4770      	bx	lr

0800220c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	bc80      	pop	{r7}
 800221c:	4770      	bx	lr

0800221e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800221e:	b480      	push	{r7}
 8002220:	b083      	sub	sp, #12
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002226:	bf00      	nop
 8002228:	370c      	adds	r7, #12
 800222a:	46bd      	mov	sp, r7
 800222c:	bc80      	pop	{r7}
 800222e:	4770      	bx	lr

08002230 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002238:	bf00      	nop
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	bc80      	pop	{r7}
 8002240:	4770      	bx	lr

08002242 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002242:	b480      	push	{r7}
 8002244:	b083      	sub	sp, #12
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800224a:	bf00      	nop
 800224c:	370c      	adds	r7, #12
 800224e:	46bd      	mov	sp, r7
 8002250:	bc80      	pop	{r7}
 8002252:	4770      	bx	lr

08002254 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	bc80      	pop	{r7}
 8002264:	4770      	bx	lr
	...

08002268 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002268:	b480      	push	{r7}
 800226a:	b085      	sub	sp, #20
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f003 0307 	and.w	r3, r3, #7
 8002276:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002278:	4b0c      	ldr	r3, [pc, #48]	; (80022ac <__NVIC_SetPriorityGrouping+0x44>)
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800227e:	68ba      	ldr	r2, [r7, #8]
 8002280:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002284:	4013      	ands	r3, r2
 8002286:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002290:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002294:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002298:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800229a:	4a04      	ldr	r2, [pc, #16]	; (80022ac <__NVIC_SetPriorityGrouping+0x44>)
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	60d3      	str	r3, [r2, #12]
}
 80022a0:	bf00      	nop
 80022a2:	3714      	adds	r7, #20
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bc80      	pop	{r7}
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	e000ed00 	.word	0xe000ed00

080022b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022b4:	4b04      	ldr	r3, [pc, #16]	; (80022c8 <__NVIC_GetPriorityGrouping+0x18>)
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	0a1b      	lsrs	r3, r3, #8
 80022ba:	f003 0307 	and.w	r3, r3, #7
}
 80022be:	4618      	mov	r0, r3
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bc80      	pop	{r7}
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	e000ed00 	.word	0xe000ed00

080022cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	4603      	mov	r3, r0
 80022d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	db0b      	blt.n	80022f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022de:	79fb      	ldrb	r3, [r7, #7]
 80022e0:	f003 021f 	and.w	r2, r3, #31
 80022e4:	4906      	ldr	r1, [pc, #24]	; (8002300 <__NVIC_EnableIRQ+0x34>)
 80022e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ea:	095b      	lsrs	r3, r3, #5
 80022ec:	2001      	movs	r0, #1
 80022ee:	fa00 f202 	lsl.w	r2, r0, r2
 80022f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022f6:	bf00      	nop
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bc80      	pop	{r7}
 80022fe:	4770      	bx	lr
 8002300:	e000e100 	.word	0xe000e100

08002304 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	4603      	mov	r3, r0
 800230c:	6039      	str	r1, [r7, #0]
 800230e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002314:	2b00      	cmp	r3, #0
 8002316:	db0a      	blt.n	800232e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	b2da      	uxtb	r2, r3
 800231c:	490c      	ldr	r1, [pc, #48]	; (8002350 <__NVIC_SetPriority+0x4c>)
 800231e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002322:	0112      	lsls	r2, r2, #4
 8002324:	b2d2      	uxtb	r2, r2
 8002326:	440b      	add	r3, r1
 8002328:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800232c:	e00a      	b.n	8002344 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	b2da      	uxtb	r2, r3
 8002332:	4908      	ldr	r1, [pc, #32]	; (8002354 <__NVIC_SetPriority+0x50>)
 8002334:	79fb      	ldrb	r3, [r7, #7]
 8002336:	f003 030f 	and.w	r3, r3, #15
 800233a:	3b04      	subs	r3, #4
 800233c:	0112      	lsls	r2, r2, #4
 800233e:	b2d2      	uxtb	r2, r2
 8002340:	440b      	add	r3, r1
 8002342:	761a      	strb	r2, [r3, #24]
}
 8002344:	bf00      	nop
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	bc80      	pop	{r7}
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	e000e100 	.word	0xe000e100
 8002354:	e000ed00 	.word	0xe000ed00

08002358 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002358:	b480      	push	{r7}
 800235a:	b089      	sub	sp, #36	; 0x24
 800235c:	af00      	add	r7, sp, #0
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	60b9      	str	r1, [r7, #8]
 8002362:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f003 0307 	and.w	r3, r3, #7
 800236a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	f1c3 0307 	rsb	r3, r3, #7
 8002372:	2b04      	cmp	r3, #4
 8002374:	bf28      	it	cs
 8002376:	2304      	movcs	r3, #4
 8002378:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	3304      	adds	r3, #4
 800237e:	2b06      	cmp	r3, #6
 8002380:	d902      	bls.n	8002388 <NVIC_EncodePriority+0x30>
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	3b03      	subs	r3, #3
 8002386:	e000      	b.n	800238a <NVIC_EncodePriority+0x32>
 8002388:	2300      	movs	r3, #0
 800238a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800238c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002390:	69bb      	ldr	r3, [r7, #24]
 8002392:	fa02 f303 	lsl.w	r3, r2, r3
 8002396:	43da      	mvns	r2, r3
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	401a      	ands	r2, r3
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	fa01 f303 	lsl.w	r3, r1, r3
 80023aa:	43d9      	mvns	r1, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023b0:	4313      	orrs	r3, r2
         );
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3724      	adds	r7, #36	; 0x24
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bc80      	pop	{r7}
 80023ba:	4770      	bx	lr

080023bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	3b01      	subs	r3, #1
 80023c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023cc:	d301      	bcc.n	80023d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023ce:	2301      	movs	r3, #1
 80023d0:	e00f      	b.n	80023f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023d2:	4a0a      	ldr	r2, [pc, #40]	; (80023fc <SysTick_Config+0x40>)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	3b01      	subs	r3, #1
 80023d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023da:	210f      	movs	r1, #15
 80023dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80023e0:	f7ff ff90 	bl	8002304 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023e4:	4b05      	ldr	r3, [pc, #20]	; (80023fc <SysTick_Config+0x40>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023ea:	4b04      	ldr	r3, [pc, #16]	; (80023fc <SysTick_Config+0x40>)
 80023ec:	2207      	movs	r2, #7
 80023ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	e000e010 	.word	0xe000e010

08002400 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f7ff ff2d 	bl	8002268 <__NVIC_SetPriorityGrouping>
}
 800240e:	bf00      	nop
 8002410:	3708      	adds	r7, #8
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}

08002416 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002416:	b580      	push	{r7, lr}
 8002418:	b086      	sub	sp, #24
 800241a:	af00      	add	r7, sp, #0
 800241c:	4603      	mov	r3, r0
 800241e:	60b9      	str	r1, [r7, #8]
 8002420:	607a      	str	r2, [r7, #4]
 8002422:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002424:	2300      	movs	r3, #0
 8002426:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002428:	f7ff ff42 	bl	80022b0 <__NVIC_GetPriorityGrouping>
 800242c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	68b9      	ldr	r1, [r7, #8]
 8002432:	6978      	ldr	r0, [r7, #20]
 8002434:	f7ff ff90 	bl	8002358 <NVIC_EncodePriority>
 8002438:	4602      	mov	r2, r0
 800243a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800243e:	4611      	mov	r1, r2
 8002440:	4618      	mov	r0, r3
 8002442:	f7ff ff5f 	bl	8002304 <__NVIC_SetPriority>
}
 8002446:	bf00      	nop
 8002448:	3718      	adds	r7, #24
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}

0800244e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800244e:	b580      	push	{r7, lr}
 8002450:	b082      	sub	sp, #8
 8002452:	af00      	add	r7, sp, #0
 8002454:	4603      	mov	r3, r0
 8002456:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245c:	4618      	mov	r0, r3
 800245e:	f7ff ff35 	bl	80022cc <__NVIC_EnableIRQ>
}
 8002462:	bf00      	nop
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}

0800246a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800246a:	b580      	push	{r7, lr}
 800246c:	b082      	sub	sp, #8
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f7ff ffa2 	bl	80023bc <SysTick_Config>
 8002478:	4603      	mov	r3, r0
}
 800247a:	4618      	mov	r0, r3
 800247c:	3708      	adds	r7, #8
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
	...

08002484 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002484:	b480      	push	{r7}
 8002486:	b085      	sub	sp, #20
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800248c:	2300      	movs	r3, #0
 800248e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d101      	bne.n	800249a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e043      	b.n	8002522 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	461a      	mov	r2, r3
 80024a0:	4b22      	ldr	r3, [pc, #136]	; (800252c <HAL_DMA_Init+0xa8>)
 80024a2:	4413      	add	r3, r2
 80024a4:	4a22      	ldr	r2, [pc, #136]	; (8002530 <HAL_DMA_Init+0xac>)
 80024a6:	fba2 2303 	umull	r2, r3, r2, r3
 80024aa:	091b      	lsrs	r3, r3, #4
 80024ac:	009a      	lsls	r2, r3, #2
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a1f      	ldr	r2, [pc, #124]	; (8002534 <HAL_DMA_Init+0xb0>)
 80024b6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2202      	movs	r2, #2
 80024bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80024ce:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80024d2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80024dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	695b      	ldr	r3, [r3, #20]
 80024ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	69db      	ldr	r3, [r3, #28]
 80024fa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80024fc:	68fa      	ldr	r2, [r7, #12]
 80024fe:	4313      	orrs	r3, r2
 8002500:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	68fa      	ldr	r2, [r7, #12]
 8002508:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2200      	movs	r2, #0
 800251c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002520:	2300      	movs	r3, #0
}
 8002522:	4618      	mov	r0, r3
 8002524:	3714      	adds	r7, #20
 8002526:	46bd      	mov	sp, r7
 8002528:	bc80      	pop	{r7}
 800252a:	4770      	bx	lr
 800252c:	bffdfff8 	.word	0xbffdfff8
 8002530:	cccccccd 	.word	0xcccccccd
 8002534:	40020000 	.word	0x40020000

08002538 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b086      	sub	sp, #24
 800253c:	af00      	add	r7, sp, #0
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	607a      	str	r2, [r7, #4]
 8002544:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002546:	2300      	movs	r3, #0
 8002548:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002550:	2b01      	cmp	r3, #1
 8002552:	d101      	bne.n	8002558 <HAL_DMA_Start_IT+0x20>
 8002554:	2302      	movs	r3, #2
 8002556:	e04b      	b.n	80025f0 <HAL_DMA_Start_IT+0xb8>
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002566:	b2db      	uxtb	r3, r3
 8002568:	2b01      	cmp	r3, #1
 800256a:	d13a      	bne.n	80025e2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2202      	movs	r2, #2
 8002570:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2200      	movs	r2, #0
 8002578:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f022 0201 	bic.w	r2, r2, #1
 8002588:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	68b9      	ldr	r1, [r7, #8]
 8002590:	68f8      	ldr	r0, [r7, #12]
 8002592:	f000 f831 	bl	80025f8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800259a:	2b00      	cmp	r3, #0
 800259c:	d008      	beq.n	80025b0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f042 020e 	orr.w	r2, r2, #14
 80025ac:	601a      	str	r2, [r3, #0]
 80025ae:	e00f      	b.n	80025d0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f022 0204 	bic.w	r2, r2, #4
 80025be:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f042 020a 	orr.w	r2, r2, #10
 80025ce:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f042 0201 	orr.w	r2, r2, #1
 80025de:	601a      	str	r2, [r3, #0]
 80025e0:	e005      	b.n	80025ee <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80025ea:	2302      	movs	r3, #2
 80025ec:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80025ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3718      	adds	r7, #24
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b085      	sub	sp, #20
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	60b9      	str	r1, [r7, #8]
 8002602:	607a      	str	r2, [r7, #4]
 8002604:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800260e:	2101      	movs	r1, #1
 8002610:	fa01 f202 	lsl.w	r2, r1, r2
 8002614:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	683a      	ldr	r2, [r7, #0]
 800261c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	2b10      	cmp	r3, #16
 8002624:	d108      	bne.n	8002638 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	68ba      	ldr	r2, [r7, #8]
 8002634:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002636:	e007      	b.n	8002648 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	68ba      	ldr	r2, [r7, #8]
 800263e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	60da      	str	r2, [r3, #12]
}
 8002648:	bf00      	nop
 800264a:	3714      	adds	r7, #20
 800264c:	46bd      	mov	sp, r7
 800264e:	bc80      	pop	{r7}
 8002650:	4770      	bx	lr
	...

08002654 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002654:	b480      	push	{r7}
 8002656:	b08b      	sub	sp, #44	; 0x2c
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800265e:	2300      	movs	r3, #0
 8002660:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002662:	2300      	movs	r3, #0
 8002664:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002666:	e169      	b.n	800293c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002668:	2201      	movs	r2, #1
 800266a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266c:	fa02 f303 	lsl.w	r3, r2, r3
 8002670:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	69fa      	ldr	r2, [r7, #28]
 8002678:	4013      	ands	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	429a      	cmp	r2, r3
 8002682:	f040 8158 	bne.w	8002936 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	4a9a      	ldr	r2, [pc, #616]	; (80028f4 <HAL_GPIO_Init+0x2a0>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d05e      	beq.n	800274e <HAL_GPIO_Init+0xfa>
 8002690:	4a98      	ldr	r2, [pc, #608]	; (80028f4 <HAL_GPIO_Init+0x2a0>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d875      	bhi.n	8002782 <HAL_GPIO_Init+0x12e>
 8002696:	4a98      	ldr	r2, [pc, #608]	; (80028f8 <HAL_GPIO_Init+0x2a4>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d058      	beq.n	800274e <HAL_GPIO_Init+0xfa>
 800269c:	4a96      	ldr	r2, [pc, #600]	; (80028f8 <HAL_GPIO_Init+0x2a4>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d86f      	bhi.n	8002782 <HAL_GPIO_Init+0x12e>
 80026a2:	4a96      	ldr	r2, [pc, #600]	; (80028fc <HAL_GPIO_Init+0x2a8>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d052      	beq.n	800274e <HAL_GPIO_Init+0xfa>
 80026a8:	4a94      	ldr	r2, [pc, #592]	; (80028fc <HAL_GPIO_Init+0x2a8>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d869      	bhi.n	8002782 <HAL_GPIO_Init+0x12e>
 80026ae:	4a94      	ldr	r2, [pc, #592]	; (8002900 <HAL_GPIO_Init+0x2ac>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d04c      	beq.n	800274e <HAL_GPIO_Init+0xfa>
 80026b4:	4a92      	ldr	r2, [pc, #584]	; (8002900 <HAL_GPIO_Init+0x2ac>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d863      	bhi.n	8002782 <HAL_GPIO_Init+0x12e>
 80026ba:	4a92      	ldr	r2, [pc, #584]	; (8002904 <HAL_GPIO_Init+0x2b0>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d046      	beq.n	800274e <HAL_GPIO_Init+0xfa>
 80026c0:	4a90      	ldr	r2, [pc, #576]	; (8002904 <HAL_GPIO_Init+0x2b0>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d85d      	bhi.n	8002782 <HAL_GPIO_Init+0x12e>
 80026c6:	2b12      	cmp	r3, #18
 80026c8:	d82a      	bhi.n	8002720 <HAL_GPIO_Init+0xcc>
 80026ca:	2b12      	cmp	r3, #18
 80026cc:	d859      	bhi.n	8002782 <HAL_GPIO_Init+0x12e>
 80026ce:	a201      	add	r2, pc, #4	; (adr r2, 80026d4 <HAL_GPIO_Init+0x80>)
 80026d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026d4:	0800274f 	.word	0x0800274f
 80026d8:	08002729 	.word	0x08002729
 80026dc:	0800273b 	.word	0x0800273b
 80026e0:	0800277d 	.word	0x0800277d
 80026e4:	08002783 	.word	0x08002783
 80026e8:	08002783 	.word	0x08002783
 80026ec:	08002783 	.word	0x08002783
 80026f0:	08002783 	.word	0x08002783
 80026f4:	08002783 	.word	0x08002783
 80026f8:	08002783 	.word	0x08002783
 80026fc:	08002783 	.word	0x08002783
 8002700:	08002783 	.word	0x08002783
 8002704:	08002783 	.word	0x08002783
 8002708:	08002783 	.word	0x08002783
 800270c:	08002783 	.word	0x08002783
 8002710:	08002783 	.word	0x08002783
 8002714:	08002783 	.word	0x08002783
 8002718:	08002731 	.word	0x08002731
 800271c:	08002745 	.word	0x08002745
 8002720:	4a79      	ldr	r2, [pc, #484]	; (8002908 <HAL_GPIO_Init+0x2b4>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d013      	beq.n	800274e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002726:	e02c      	b.n	8002782 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	623b      	str	r3, [r7, #32]
          break;
 800272e:	e029      	b.n	8002784 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	3304      	adds	r3, #4
 8002736:	623b      	str	r3, [r7, #32]
          break;
 8002738:	e024      	b.n	8002784 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	3308      	adds	r3, #8
 8002740:	623b      	str	r3, [r7, #32]
          break;
 8002742:	e01f      	b.n	8002784 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	330c      	adds	r3, #12
 800274a:	623b      	str	r3, [r7, #32]
          break;
 800274c:	e01a      	b.n	8002784 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d102      	bne.n	800275c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002756:	2304      	movs	r3, #4
 8002758:	623b      	str	r3, [r7, #32]
          break;
 800275a:	e013      	b.n	8002784 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	2b01      	cmp	r3, #1
 8002762:	d105      	bne.n	8002770 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002764:	2308      	movs	r3, #8
 8002766:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	69fa      	ldr	r2, [r7, #28]
 800276c:	611a      	str	r2, [r3, #16]
          break;
 800276e:	e009      	b.n	8002784 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002770:	2308      	movs	r3, #8
 8002772:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	69fa      	ldr	r2, [r7, #28]
 8002778:	615a      	str	r2, [r3, #20]
          break;
 800277a:	e003      	b.n	8002784 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800277c:	2300      	movs	r3, #0
 800277e:	623b      	str	r3, [r7, #32]
          break;
 8002780:	e000      	b.n	8002784 <HAL_GPIO_Init+0x130>
          break;
 8002782:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	2bff      	cmp	r3, #255	; 0xff
 8002788:	d801      	bhi.n	800278e <HAL_GPIO_Init+0x13a>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	e001      	b.n	8002792 <HAL_GPIO_Init+0x13e>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	3304      	adds	r3, #4
 8002792:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	2bff      	cmp	r3, #255	; 0xff
 8002798:	d802      	bhi.n	80027a0 <HAL_GPIO_Init+0x14c>
 800279a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	e002      	b.n	80027a6 <HAL_GPIO_Init+0x152>
 80027a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a2:	3b08      	subs	r3, #8
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	210f      	movs	r1, #15
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	fa01 f303 	lsl.w	r3, r1, r3
 80027b4:	43db      	mvns	r3, r3
 80027b6:	401a      	ands	r2, r3
 80027b8:	6a39      	ldr	r1, [r7, #32]
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	fa01 f303 	lsl.w	r3, r1, r3
 80027c0:	431a      	orrs	r2, r3
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	f000 80b1 	beq.w	8002936 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80027d4:	4b4d      	ldr	r3, [pc, #308]	; (800290c <HAL_GPIO_Init+0x2b8>)
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	4a4c      	ldr	r2, [pc, #304]	; (800290c <HAL_GPIO_Init+0x2b8>)
 80027da:	f043 0301 	orr.w	r3, r3, #1
 80027de:	6193      	str	r3, [r2, #24]
 80027e0:	4b4a      	ldr	r3, [pc, #296]	; (800290c <HAL_GPIO_Init+0x2b8>)
 80027e2:	699b      	ldr	r3, [r3, #24]
 80027e4:	f003 0301 	and.w	r3, r3, #1
 80027e8:	60bb      	str	r3, [r7, #8]
 80027ea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80027ec:	4a48      	ldr	r2, [pc, #288]	; (8002910 <HAL_GPIO_Init+0x2bc>)
 80027ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f0:	089b      	lsrs	r3, r3, #2
 80027f2:	3302      	adds	r3, #2
 80027f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027f8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80027fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fc:	f003 0303 	and.w	r3, r3, #3
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	220f      	movs	r2, #15
 8002804:	fa02 f303 	lsl.w	r3, r2, r3
 8002808:	43db      	mvns	r3, r3
 800280a:	68fa      	ldr	r2, [r7, #12]
 800280c:	4013      	ands	r3, r2
 800280e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4a40      	ldr	r2, [pc, #256]	; (8002914 <HAL_GPIO_Init+0x2c0>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d013      	beq.n	8002840 <HAL_GPIO_Init+0x1ec>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4a3f      	ldr	r2, [pc, #252]	; (8002918 <HAL_GPIO_Init+0x2c4>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d00d      	beq.n	800283c <HAL_GPIO_Init+0x1e8>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	4a3e      	ldr	r2, [pc, #248]	; (800291c <HAL_GPIO_Init+0x2c8>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d007      	beq.n	8002838 <HAL_GPIO_Init+0x1e4>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	4a3d      	ldr	r2, [pc, #244]	; (8002920 <HAL_GPIO_Init+0x2cc>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d101      	bne.n	8002834 <HAL_GPIO_Init+0x1e0>
 8002830:	2303      	movs	r3, #3
 8002832:	e006      	b.n	8002842 <HAL_GPIO_Init+0x1ee>
 8002834:	2304      	movs	r3, #4
 8002836:	e004      	b.n	8002842 <HAL_GPIO_Init+0x1ee>
 8002838:	2302      	movs	r3, #2
 800283a:	e002      	b.n	8002842 <HAL_GPIO_Init+0x1ee>
 800283c:	2301      	movs	r3, #1
 800283e:	e000      	b.n	8002842 <HAL_GPIO_Init+0x1ee>
 8002840:	2300      	movs	r3, #0
 8002842:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002844:	f002 0203 	and.w	r2, r2, #3
 8002848:	0092      	lsls	r2, r2, #2
 800284a:	4093      	lsls	r3, r2
 800284c:	68fa      	ldr	r2, [r7, #12]
 800284e:	4313      	orrs	r3, r2
 8002850:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002852:	492f      	ldr	r1, [pc, #188]	; (8002910 <HAL_GPIO_Init+0x2bc>)
 8002854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002856:	089b      	lsrs	r3, r3, #2
 8002858:	3302      	adds	r3, #2
 800285a:	68fa      	ldr	r2, [r7, #12]
 800285c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d006      	beq.n	800287a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800286c:	4b2d      	ldr	r3, [pc, #180]	; (8002924 <HAL_GPIO_Init+0x2d0>)
 800286e:	689a      	ldr	r2, [r3, #8]
 8002870:	492c      	ldr	r1, [pc, #176]	; (8002924 <HAL_GPIO_Init+0x2d0>)
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	4313      	orrs	r3, r2
 8002876:	608b      	str	r3, [r1, #8]
 8002878:	e006      	b.n	8002888 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800287a:	4b2a      	ldr	r3, [pc, #168]	; (8002924 <HAL_GPIO_Init+0x2d0>)
 800287c:	689a      	ldr	r2, [r3, #8]
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	43db      	mvns	r3, r3
 8002882:	4928      	ldr	r1, [pc, #160]	; (8002924 <HAL_GPIO_Init+0x2d0>)
 8002884:	4013      	ands	r3, r2
 8002886:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d006      	beq.n	80028a2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002894:	4b23      	ldr	r3, [pc, #140]	; (8002924 <HAL_GPIO_Init+0x2d0>)
 8002896:	68da      	ldr	r2, [r3, #12]
 8002898:	4922      	ldr	r1, [pc, #136]	; (8002924 <HAL_GPIO_Init+0x2d0>)
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	4313      	orrs	r3, r2
 800289e:	60cb      	str	r3, [r1, #12]
 80028a0:	e006      	b.n	80028b0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80028a2:	4b20      	ldr	r3, [pc, #128]	; (8002924 <HAL_GPIO_Init+0x2d0>)
 80028a4:	68da      	ldr	r2, [r3, #12]
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	43db      	mvns	r3, r3
 80028aa:	491e      	ldr	r1, [pc, #120]	; (8002924 <HAL_GPIO_Init+0x2d0>)
 80028ac:	4013      	ands	r3, r2
 80028ae:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d006      	beq.n	80028ca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80028bc:	4b19      	ldr	r3, [pc, #100]	; (8002924 <HAL_GPIO_Init+0x2d0>)
 80028be:	685a      	ldr	r2, [r3, #4]
 80028c0:	4918      	ldr	r1, [pc, #96]	; (8002924 <HAL_GPIO_Init+0x2d0>)
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	604b      	str	r3, [r1, #4]
 80028c8:	e006      	b.n	80028d8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80028ca:	4b16      	ldr	r3, [pc, #88]	; (8002924 <HAL_GPIO_Init+0x2d0>)
 80028cc:	685a      	ldr	r2, [r3, #4]
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	43db      	mvns	r3, r3
 80028d2:	4914      	ldr	r1, [pc, #80]	; (8002924 <HAL_GPIO_Init+0x2d0>)
 80028d4:	4013      	ands	r3, r2
 80028d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d021      	beq.n	8002928 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80028e4:	4b0f      	ldr	r3, [pc, #60]	; (8002924 <HAL_GPIO_Init+0x2d0>)
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	490e      	ldr	r1, [pc, #56]	; (8002924 <HAL_GPIO_Init+0x2d0>)
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	600b      	str	r3, [r1, #0]
 80028f0:	e021      	b.n	8002936 <HAL_GPIO_Init+0x2e2>
 80028f2:	bf00      	nop
 80028f4:	10320000 	.word	0x10320000
 80028f8:	10310000 	.word	0x10310000
 80028fc:	10220000 	.word	0x10220000
 8002900:	10210000 	.word	0x10210000
 8002904:	10120000 	.word	0x10120000
 8002908:	10110000 	.word	0x10110000
 800290c:	40021000 	.word	0x40021000
 8002910:	40010000 	.word	0x40010000
 8002914:	40010800 	.word	0x40010800
 8002918:	40010c00 	.word	0x40010c00
 800291c:	40011000 	.word	0x40011000
 8002920:	40011400 	.word	0x40011400
 8002924:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002928:	4b0b      	ldr	r3, [pc, #44]	; (8002958 <HAL_GPIO_Init+0x304>)
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	43db      	mvns	r3, r3
 8002930:	4909      	ldr	r1, [pc, #36]	; (8002958 <HAL_GPIO_Init+0x304>)
 8002932:	4013      	ands	r3, r2
 8002934:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002938:	3301      	adds	r3, #1
 800293a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002942:	fa22 f303 	lsr.w	r3, r2, r3
 8002946:	2b00      	cmp	r3, #0
 8002948:	f47f ae8e 	bne.w	8002668 <HAL_GPIO_Init+0x14>
  }
}
 800294c:	bf00      	nop
 800294e:	bf00      	nop
 8002950:	372c      	adds	r7, #44	; 0x2c
 8002952:	46bd      	mov	sp, r7
 8002954:	bc80      	pop	{r7}
 8002956:	4770      	bx	lr
 8002958:	40010400 	.word	0x40010400

0800295c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	460b      	mov	r3, r1
 8002966:	807b      	strh	r3, [r7, #2]
 8002968:	4613      	mov	r3, r2
 800296a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800296c:	787b      	ldrb	r3, [r7, #1]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d003      	beq.n	800297a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002972:	887a      	ldrh	r2, [r7, #2]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002978:	e003      	b.n	8002982 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800297a:	887b      	ldrh	r3, [r7, #2]
 800297c:	041a      	lsls	r2, r3, #16
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	611a      	str	r2, [r3, #16]
}
 8002982:	bf00      	nop
 8002984:	370c      	adds	r7, #12
 8002986:	46bd      	mov	sp, r7
 8002988:	bc80      	pop	{r7}
 800298a:	4770      	bx	lr

0800298c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b086      	sub	sp, #24
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d101      	bne.n	800299e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e272      	b.n	8002e84 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0301 	and.w	r3, r3, #1
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	f000 8087 	beq.w	8002aba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029ac:	4b92      	ldr	r3, [pc, #584]	; (8002bf8 <HAL_RCC_OscConfig+0x26c>)
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f003 030c 	and.w	r3, r3, #12
 80029b4:	2b04      	cmp	r3, #4
 80029b6:	d00c      	beq.n	80029d2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80029b8:	4b8f      	ldr	r3, [pc, #572]	; (8002bf8 <HAL_RCC_OscConfig+0x26c>)
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f003 030c 	and.w	r3, r3, #12
 80029c0:	2b08      	cmp	r3, #8
 80029c2:	d112      	bne.n	80029ea <HAL_RCC_OscConfig+0x5e>
 80029c4:	4b8c      	ldr	r3, [pc, #560]	; (8002bf8 <HAL_RCC_OscConfig+0x26c>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029d0:	d10b      	bne.n	80029ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029d2:	4b89      	ldr	r3, [pc, #548]	; (8002bf8 <HAL_RCC_OscConfig+0x26c>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d06c      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x12c>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d168      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e24c      	b.n	8002e84 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029f2:	d106      	bne.n	8002a02 <HAL_RCC_OscConfig+0x76>
 80029f4:	4b80      	ldr	r3, [pc, #512]	; (8002bf8 <HAL_RCC_OscConfig+0x26c>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a7f      	ldr	r2, [pc, #508]	; (8002bf8 <HAL_RCC_OscConfig+0x26c>)
 80029fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029fe:	6013      	str	r3, [r2, #0]
 8002a00:	e02e      	b.n	8002a60 <HAL_RCC_OscConfig+0xd4>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d10c      	bne.n	8002a24 <HAL_RCC_OscConfig+0x98>
 8002a0a:	4b7b      	ldr	r3, [pc, #492]	; (8002bf8 <HAL_RCC_OscConfig+0x26c>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a7a      	ldr	r2, [pc, #488]	; (8002bf8 <HAL_RCC_OscConfig+0x26c>)
 8002a10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a14:	6013      	str	r3, [r2, #0]
 8002a16:	4b78      	ldr	r3, [pc, #480]	; (8002bf8 <HAL_RCC_OscConfig+0x26c>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a77      	ldr	r2, [pc, #476]	; (8002bf8 <HAL_RCC_OscConfig+0x26c>)
 8002a1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a20:	6013      	str	r3, [r2, #0]
 8002a22:	e01d      	b.n	8002a60 <HAL_RCC_OscConfig+0xd4>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a2c:	d10c      	bne.n	8002a48 <HAL_RCC_OscConfig+0xbc>
 8002a2e:	4b72      	ldr	r3, [pc, #456]	; (8002bf8 <HAL_RCC_OscConfig+0x26c>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a71      	ldr	r2, [pc, #452]	; (8002bf8 <HAL_RCC_OscConfig+0x26c>)
 8002a34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a38:	6013      	str	r3, [r2, #0]
 8002a3a:	4b6f      	ldr	r3, [pc, #444]	; (8002bf8 <HAL_RCC_OscConfig+0x26c>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a6e      	ldr	r2, [pc, #440]	; (8002bf8 <HAL_RCC_OscConfig+0x26c>)
 8002a40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a44:	6013      	str	r3, [r2, #0]
 8002a46:	e00b      	b.n	8002a60 <HAL_RCC_OscConfig+0xd4>
 8002a48:	4b6b      	ldr	r3, [pc, #428]	; (8002bf8 <HAL_RCC_OscConfig+0x26c>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a6a      	ldr	r2, [pc, #424]	; (8002bf8 <HAL_RCC_OscConfig+0x26c>)
 8002a4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a52:	6013      	str	r3, [r2, #0]
 8002a54:	4b68      	ldr	r3, [pc, #416]	; (8002bf8 <HAL_RCC_OscConfig+0x26c>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a67      	ldr	r2, [pc, #412]	; (8002bf8 <HAL_RCC_OscConfig+0x26c>)
 8002a5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a5e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d013      	beq.n	8002a90 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a68:	f7fe f9c4 	bl	8000df4 <HAL_GetTick>
 8002a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a6e:	e008      	b.n	8002a82 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a70:	f7fe f9c0 	bl	8000df4 <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	2b64      	cmp	r3, #100	; 0x64
 8002a7c:	d901      	bls.n	8002a82 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e200      	b.n	8002e84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a82:	4b5d      	ldr	r3, [pc, #372]	; (8002bf8 <HAL_RCC_OscConfig+0x26c>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d0f0      	beq.n	8002a70 <HAL_RCC_OscConfig+0xe4>
 8002a8e:	e014      	b.n	8002aba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a90:	f7fe f9b0 	bl	8000df4 <HAL_GetTick>
 8002a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a96:	e008      	b.n	8002aaa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a98:	f7fe f9ac 	bl	8000df4 <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	2b64      	cmp	r3, #100	; 0x64
 8002aa4:	d901      	bls.n	8002aaa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e1ec      	b.n	8002e84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aaa:	4b53      	ldr	r3, [pc, #332]	; (8002bf8 <HAL_RCC_OscConfig+0x26c>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d1f0      	bne.n	8002a98 <HAL_RCC_OscConfig+0x10c>
 8002ab6:	e000      	b.n	8002aba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ab8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d063      	beq.n	8002b8e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ac6:	4b4c      	ldr	r3, [pc, #304]	; (8002bf8 <HAL_RCC_OscConfig+0x26c>)
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f003 030c 	and.w	r3, r3, #12
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d00b      	beq.n	8002aea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002ad2:	4b49      	ldr	r3, [pc, #292]	; (8002bf8 <HAL_RCC_OscConfig+0x26c>)
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f003 030c 	and.w	r3, r3, #12
 8002ada:	2b08      	cmp	r3, #8
 8002adc:	d11c      	bne.n	8002b18 <HAL_RCC_OscConfig+0x18c>
 8002ade:	4b46      	ldr	r3, [pc, #280]	; (8002bf8 <HAL_RCC_OscConfig+0x26c>)
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d116      	bne.n	8002b18 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aea:	4b43      	ldr	r3, [pc, #268]	; (8002bf8 <HAL_RCC_OscConfig+0x26c>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0302 	and.w	r3, r3, #2
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d005      	beq.n	8002b02 <HAL_RCC_OscConfig+0x176>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	691b      	ldr	r3, [r3, #16]
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d001      	beq.n	8002b02 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e1c0      	b.n	8002e84 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b02:	4b3d      	ldr	r3, [pc, #244]	; (8002bf8 <HAL_RCC_OscConfig+0x26c>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	695b      	ldr	r3, [r3, #20]
 8002b0e:	00db      	lsls	r3, r3, #3
 8002b10:	4939      	ldr	r1, [pc, #228]	; (8002bf8 <HAL_RCC_OscConfig+0x26c>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b16:	e03a      	b.n	8002b8e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	691b      	ldr	r3, [r3, #16]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d020      	beq.n	8002b62 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b20:	4b36      	ldr	r3, [pc, #216]	; (8002bfc <HAL_RCC_OscConfig+0x270>)
 8002b22:	2201      	movs	r2, #1
 8002b24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b26:	f7fe f965 	bl	8000df4 <HAL_GetTick>
 8002b2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b2c:	e008      	b.n	8002b40 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b2e:	f7fe f961 	bl	8000df4 <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d901      	bls.n	8002b40 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e1a1      	b.n	8002e84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b40:	4b2d      	ldr	r3, [pc, #180]	; (8002bf8 <HAL_RCC_OscConfig+0x26c>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0302 	and.w	r3, r3, #2
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d0f0      	beq.n	8002b2e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b4c:	4b2a      	ldr	r3, [pc, #168]	; (8002bf8 <HAL_RCC_OscConfig+0x26c>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	695b      	ldr	r3, [r3, #20]
 8002b58:	00db      	lsls	r3, r3, #3
 8002b5a:	4927      	ldr	r1, [pc, #156]	; (8002bf8 <HAL_RCC_OscConfig+0x26c>)
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	600b      	str	r3, [r1, #0]
 8002b60:	e015      	b.n	8002b8e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b62:	4b26      	ldr	r3, [pc, #152]	; (8002bfc <HAL_RCC_OscConfig+0x270>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b68:	f7fe f944 	bl	8000df4 <HAL_GetTick>
 8002b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b6e:	e008      	b.n	8002b82 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b70:	f7fe f940 	bl	8000df4 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e180      	b.n	8002e84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b82:	4b1d      	ldr	r3, [pc, #116]	; (8002bf8 <HAL_RCC_OscConfig+0x26c>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0302 	and.w	r3, r3, #2
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d1f0      	bne.n	8002b70 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0308 	and.w	r3, r3, #8
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d03a      	beq.n	8002c10 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	699b      	ldr	r3, [r3, #24]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d019      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ba2:	4b17      	ldr	r3, [pc, #92]	; (8002c00 <HAL_RCC_OscConfig+0x274>)
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ba8:	f7fe f924 	bl	8000df4 <HAL_GetTick>
 8002bac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bae:	e008      	b.n	8002bc2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bb0:	f7fe f920 	bl	8000df4 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e160      	b.n	8002e84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bc2:	4b0d      	ldr	r3, [pc, #52]	; (8002bf8 <HAL_RCC_OscConfig+0x26c>)
 8002bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d0f0      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002bce:	2001      	movs	r0, #1
 8002bd0:	f000 fa9c 	bl	800310c <RCC_Delay>
 8002bd4:	e01c      	b.n	8002c10 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bd6:	4b0a      	ldr	r3, [pc, #40]	; (8002c00 <HAL_RCC_OscConfig+0x274>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bdc:	f7fe f90a 	bl	8000df4 <HAL_GetTick>
 8002be0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002be2:	e00f      	b.n	8002c04 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002be4:	f7fe f906 	bl	8000df4 <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d908      	bls.n	8002c04 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e146      	b.n	8002e84 <HAL_RCC_OscConfig+0x4f8>
 8002bf6:	bf00      	nop
 8002bf8:	40021000 	.word	0x40021000
 8002bfc:	42420000 	.word	0x42420000
 8002c00:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c04:	4b92      	ldr	r3, [pc, #584]	; (8002e50 <HAL_RCC_OscConfig+0x4c4>)
 8002c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c08:	f003 0302 	and.w	r3, r3, #2
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d1e9      	bne.n	8002be4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0304 	and.w	r3, r3, #4
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	f000 80a6 	beq.w	8002d6a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c22:	4b8b      	ldr	r3, [pc, #556]	; (8002e50 <HAL_RCC_OscConfig+0x4c4>)
 8002c24:	69db      	ldr	r3, [r3, #28]
 8002c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d10d      	bne.n	8002c4a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c2e:	4b88      	ldr	r3, [pc, #544]	; (8002e50 <HAL_RCC_OscConfig+0x4c4>)
 8002c30:	69db      	ldr	r3, [r3, #28]
 8002c32:	4a87      	ldr	r2, [pc, #540]	; (8002e50 <HAL_RCC_OscConfig+0x4c4>)
 8002c34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c38:	61d3      	str	r3, [r2, #28]
 8002c3a:	4b85      	ldr	r3, [pc, #532]	; (8002e50 <HAL_RCC_OscConfig+0x4c4>)
 8002c3c:	69db      	ldr	r3, [r3, #28]
 8002c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c42:	60bb      	str	r3, [r7, #8]
 8002c44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c46:	2301      	movs	r3, #1
 8002c48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c4a:	4b82      	ldr	r3, [pc, #520]	; (8002e54 <HAL_RCC_OscConfig+0x4c8>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d118      	bne.n	8002c88 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c56:	4b7f      	ldr	r3, [pc, #508]	; (8002e54 <HAL_RCC_OscConfig+0x4c8>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a7e      	ldr	r2, [pc, #504]	; (8002e54 <HAL_RCC_OscConfig+0x4c8>)
 8002c5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c62:	f7fe f8c7 	bl	8000df4 <HAL_GetTick>
 8002c66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c68:	e008      	b.n	8002c7c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c6a:	f7fe f8c3 	bl	8000df4 <HAL_GetTick>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	2b64      	cmp	r3, #100	; 0x64
 8002c76:	d901      	bls.n	8002c7c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	e103      	b.n	8002e84 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c7c:	4b75      	ldr	r3, [pc, #468]	; (8002e54 <HAL_RCC_OscConfig+0x4c8>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d0f0      	beq.n	8002c6a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d106      	bne.n	8002c9e <HAL_RCC_OscConfig+0x312>
 8002c90:	4b6f      	ldr	r3, [pc, #444]	; (8002e50 <HAL_RCC_OscConfig+0x4c4>)
 8002c92:	6a1b      	ldr	r3, [r3, #32]
 8002c94:	4a6e      	ldr	r2, [pc, #440]	; (8002e50 <HAL_RCC_OscConfig+0x4c4>)
 8002c96:	f043 0301 	orr.w	r3, r3, #1
 8002c9a:	6213      	str	r3, [r2, #32]
 8002c9c:	e02d      	b.n	8002cfa <HAL_RCC_OscConfig+0x36e>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d10c      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x334>
 8002ca6:	4b6a      	ldr	r3, [pc, #424]	; (8002e50 <HAL_RCC_OscConfig+0x4c4>)
 8002ca8:	6a1b      	ldr	r3, [r3, #32]
 8002caa:	4a69      	ldr	r2, [pc, #420]	; (8002e50 <HAL_RCC_OscConfig+0x4c4>)
 8002cac:	f023 0301 	bic.w	r3, r3, #1
 8002cb0:	6213      	str	r3, [r2, #32]
 8002cb2:	4b67      	ldr	r3, [pc, #412]	; (8002e50 <HAL_RCC_OscConfig+0x4c4>)
 8002cb4:	6a1b      	ldr	r3, [r3, #32]
 8002cb6:	4a66      	ldr	r2, [pc, #408]	; (8002e50 <HAL_RCC_OscConfig+0x4c4>)
 8002cb8:	f023 0304 	bic.w	r3, r3, #4
 8002cbc:	6213      	str	r3, [r2, #32]
 8002cbe:	e01c      	b.n	8002cfa <HAL_RCC_OscConfig+0x36e>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	2b05      	cmp	r3, #5
 8002cc6:	d10c      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x356>
 8002cc8:	4b61      	ldr	r3, [pc, #388]	; (8002e50 <HAL_RCC_OscConfig+0x4c4>)
 8002cca:	6a1b      	ldr	r3, [r3, #32]
 8002ccc:	4a60      	ldr	r2, [pc, #384]	; (8002e50 <HAL_RCC_OscConfig+0x4c4>)
 8002cce:	f043 0304 	orr.w	r3, r3, #4
 8002cd2:	6213      	str	r3, [r2, #32]
 8002cd4:	4b5e      	ldr	r3, [pc, #376]	; (8002e50 <HAL_RCC_OscConfig+0x4c4>)
 8002cd6:	6a1b      	ldr	r3, [r3, #32]
 8002cd8:	4a5d      	ldr	r2, [pc, #372]	; (8002e50 <HAL_RCC_OscConfig+0x4c4>)
 8002cda:	f043 0301 	orr.w	r3, r3, #1
 8002cde:	6213      	str	r3, [r2, #32]
 8002ce0:	e00b      	b.n	8002cfa <HAL_RCC_OscConfig+0x36e>
 8002ce2:	4b5b      	ldr	r3, [pc, #364]	; (8002e50 <HAL_RCC_OscConfig+0x4c4>)
 8002ce4:	6a1b      	ldr	r3, [r3, #32]
 8002ce6:	4a5a      	ldr	r2, [pc, #360]	; (8002e50 <HAL_RCC_OscConfig+0x4c4>)
 8002ce8:	f023 0301 	bic.w	r3, r3, #1
 8002cec:	6213      	str	r3, [r2, #32]
 8002cee:	4b58      	ldr	r3, [pc, #352]	; (8002e50 <HAL_RCC_OscConfig+0x4c4>)
 8002cf0:	6a1b      	ldr	r3, [r3, #32]
 8002cf2:	4a57      	ldr	r2, [pc, #348]	; (8002e50 <HAL_RCC_OscConfig+0x4c4>)
 8002cf4:	f023 0304 	bic.w	r3, r3, #4
 8002cf8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d015      	beq.n	8002d2e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d02:	f7fe f877 	bl	8000df4 <HAL_GetTick>
 8002d06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d08:	e00a      	b.n	8002d20 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d0a:	f7fe f873 	bl	8000df4 <HAL_GetTick>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d901      	bls.n	8002d20 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e0b1      	b.n	8002e84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d20:	4b4b      	ldr	r3, [pc, #300]	; (8002e50 <HAL_RCC_OscConfig+0x4c4>)
 8002d22:	6a1b      	ldr	r3, [r3, #32]
 8002d24:	f003 0302 	and.w	r3, r3, #2
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d0ee      	beq.n	8002d0a <HAL_RCC_OscConfig+0x37e>
 8002d2c:	e014      	b.n	8002d58 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d2e:	f7fe f861 	bl	8000df4 <HAL_GetTick>
 8002d32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d34:	e00a      	b.n	8002d4c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d36:	f7fe f85d 	bl	8000df4 <HAL_GetTick>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d901      	bls.n	8002d4c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	e09b      	b.n	8002e84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d4c:	4b40      	ldr	r3, [pc, #256]	; (8002e50 <HAL_RCC_OscConfig+0x4c4>)
 8002d4e:	6a1b      	ldr	r3, [r3, #32]
 8002d50:	f003 0302 	and.w	r3, r3, #2
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d1ee      	bne.n	8002d36 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d58:	7dfb      	ldrb	r3, [r7, #23]
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d105      	bne.n	8002d6a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d5e:	4b3c      	ldr	r3, [pc, #240]	; (8002e50 <HAL_RCC_OscConfig+0x4c4>)
 8002d60:	69db      	ldr	r3, [r3, #28]
 8002d62:	4a3b      	ldr	r2, [pc, #236]	; (8002e50 <HAL_RCC_OscConfig+0x4c4>)
 8002d64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d68:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	69db      	ldr	r3, [r3, #28]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	f000 8087 	beq.w	8002e82 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d74:	4b36      	ldr	r3, [pc, #216]	; (8002e50 <HAL_RCC_OscConfig+0x4c4>)
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f003 030c 	and.w	r3, r3, #12
 8002d7c:	2b08      	cmp	r3, #8
 8002d7e:	d061      	beq.n	8002e44 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	69db      	ldr	r3, [r3, #28]
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d146      	bne.n	8002e16 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d88:	4b33      	ldr	r3, [pc, #204]	; (8002e58 <HAL_RCC_OscConfig+0x4cc>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d8e:	f7fe f831 	bl	8000df4 <HAL_GetTick>
 8002d92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d94:	e008      	b.n	8002da8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d96:	f7fe f82d 	bl	8000df4 <HAL_GetTick>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d901      	bls.n	8002da8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	e06d      	b.n	8002e84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002da8:	4b29      	ldr	r3, [pc, #164]	; (8002e50 <HAL_RCC_OscConfig+0x4c4>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d1f0      	bne.n	8002d96 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6a1b      	ldr	r3, [r3, #32]
 8002db8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dbc:	d108      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002dbe:	4b24      	ldr	r3, [pc, #144]	; (8002e50 <HAL_RCC_OscConfig+0x4c4>)
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	4921      	ldr	r1, [pc, #132]	; (8002e50 <HAL_RCC_OscConfig+0x4c4>)
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dd0:	4b1f      	ldr	r3, [pc, #124]	; (8002e50 <HAL_RCC_OscConfig+0x4c4>)
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a19      	ldr	r1, [r3, #32]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de0:	430b      	orrs	r3, r1
 8002de2:	491b      	ldr	r1, [pc, #108]	; (8002e50 <HAL_RCC_OscConfig+0x4c4>)
 8002de4:	4313      	orrs	r3, r2
 8002de6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002de8:	4b1b      	ldr	r3, [pc, #108]	; (8002e58 <HAL_RCC_OscConfig+0x4cc>)
 8002dea:	2201      	movs	r2, #1
 8002dec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dee:	f7fe f801 	bl	8000df4 <HAL_GetTick>
 8002df2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002df4:	e008      	b.n	8002e08 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002df6:	f7fd fffd 	bl	8000df4 <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d901      	bls.n	8002e08 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e03d      	b.n	8002e84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e08:	4b11      	ldr	r3, [pc, #68]	; (8002e50 <HAL_RCC_OscConfig+0x4c4>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d0f0      	beq.n	8002df6 <HAL_RCC_OscConfig+0x46a>
 8002e14:	e035      	b.n	8002e82 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e16:	4b10      	ldr	r3, [pc, #64]	; (8002e58 <HAL_RCC_OscConfig+0x4cc>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e1c:	f7fd ffea 	bl	8000df4 <HAL_GetTick>
 8002e20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e22:	e008      	b.n	8002e36 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e24:	f7fd ffe6 	bl	8000df4 <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d901      	bls.n	8002e36 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e026      	b.n	8002e84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e36:	4b06      	ldr	r3, [pc, #24]	; (8002e50 <HAL_RCC_OscConfig+0x4c4>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d1f0      	bne.n	8002e24 <HAL_RCC_OscConfig+0x498>
 8002e42:	e01e      	b.n	8002e82 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	69db      	ldr	r3, [r3, #28]
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d107      	bne.n	8002e5c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e019      	b.n	8002e84 <HAL_RCC_OscConfig+0x4f8>
 8002e50:	40021000 	.word	0x40021000
 8002e54:	40007000 	.word	0x40007000
 8002e58:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e5c:	4b0b      	ldr	r3, [pc, #44]	; (8002e8c <HAL_RCC_OscConfig+0x500>)
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a1b      	ldr	r3, [r3, #32]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d106      	bne.n	8002e7e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d001      	beq.n	8002e82 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e000      	b.n	8002e84 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3718      	adds	r7, #24
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	40021000 	.word	0x40021000

08002e90 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b084      	sub	sp, #16
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d101      	bne.n	8002ea4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e0d0      	b.n	8003046 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ea4:	4b6a      	ldr	r3, [pc, #424]	; (8003050 <HAL_RCC_ClockConfig+0x1c0>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0307 	and.w	r3, r3, #7
 8002eac:	683a      	ldr	r2, [r7, #0]
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d910      	bls.n	8002ed4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eb2:	4b67      	ldr	r3, [pc, #412]	; (8003050 <HAL_RCC_ClockConfig+0x1c0>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f023 0207 	bic.w	r2, r3, #7
 8002eba:	4965      	ldr	r1, [pc, #404]	; (8003050 <HAL_RCC_ClockConfig+0x1c0>)
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ec2:	4b63      	ldr	r3, [pc, #396]	; (8003050 <HAL_RCC_ClockConfig+0x1c0>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0307 	and.w	r3, r3, #7
 8002eca:	683a      	ldr	r2, [r7, #0]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d001      	beq.n	8002ed4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e0b8      	b.n	8003046 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0302 	and.w	r3, r3, #2
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d020      	beq.n	8002f22 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0304 	and.w	r3, r3, #4
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d005      	beq.n	8002ef8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002eec:	4b59      	ldr	r3, [pc, #356]	; (8003054 <HAL_RCC_ClockConfig+0x1c4>)
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	4a58      	ldr	r2, [pc, #352]	; (8003054 <HAL_RCC_ClockConfig+0x1c4>)
 8002ef2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002ef6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0308 	and.w	r3, r3, #8
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d005      	beq.n	8002f10 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f04:	4b53      	ldr	r3, [pc, #332]	; (8003054 <HAL_RCC_ClockConfig+0x1c4>)
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	4a52      	ldr	r2, [pc, #328]	; (8003054 <HAL_RCC_ClockConfig+0x1c4>)
 8002f0a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002f0e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f10:	4b50      	ldr	r3, [pc, #320]	; (8003054 <HAL_RCC_ClockConfig+0x1c4>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	494d      	ldr	r1, [pc, #308]	; (8003054 <HAL_RCC_ClockConfig+0x1c4>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0301 	and.w	r3, r3, #1
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d040      	beq.n	8002fb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d107      	bne.n	8002f46 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f36:	4b47      	ldr	r3, [pc, #284]	; (8003054 <HAL_RCC_ClockConfig+0x1c4>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d115      	bne.n	8002f6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e07f      	b.n	8003046 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d107      	bne.n	8002f5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f4e:	4b41      	ldr	r3, [pc, #260]	; (8003054 <HAL_RCC_ClockConfig+0x1c4>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d109      	bne.n	8002f6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e073      	b.n	8003046 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f5e:	4b3d      	ldr	r3, [pc, #244]	; (8003054 <HAL_RCC_ClockConfig+0x1c4>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d101      	bne.n	8002f6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e06b      	b.n	8003046 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f6e:	4b39      	ldr	r3, [pc, #228]	; (8003054 <HAL_RCC_ClockConfig+0x1c4>)
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f023 0203 	bic.w	r2, r3, #3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	4936      	ldr	r1, [pc, #216]	; (8003054 <HAL_RCC_ClockConfig+0x1c4>)
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f80:	f7fd ff38 	bl	8000df4 <HAL_GetTick>
 8002f84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f86:	e00a      	b.n	8002f9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f88:	f7fd ff34 	bl	8000df4 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d901      	bls.n	8002f9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e053      	b.n	8003046 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f9e:	4b2d      	ldr	r3, [pc, #180]	; (8003054 <HAL_RCC_ClockConfig+0x1c4>)
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f003 020c 	and.w	r2, r3, #12
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d1eb      	bne.n	8002f88 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fb0:	4b27      	ldr	r3, [pc, #156]	; (8003050 <HAL_RCC_ClockConfig+0x1c0>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0307 	and.w	r3, r3, #7
 8002fb8:	683a      	ldr	r2, [r7, #0]
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d210      	bcs.n	8002fe0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fbe:	4b24      	ldr	r3, [pc, #144]	; (8003050 <HAL_RCC_ClockConfig+0x1c0>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f023 0207 	bic.w	r2, r3, #7
 8002fc6:	4922      	ldr	r1, [pc, #136]	; (8003050 <HAL_RCC_ClockConfig+0x1c0>)
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fce:	4b20      	ldr	r3, [pc, #128]	; (8003050 <HAL_RCC_ClockConfig+0x1c0>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0307 	and.w	r3, r3, #7
 8002fd6:	683a      	ldr	r2, [r7, #0]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d001      	beq.n	8002fe0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e032      	b.n	8003046 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0304 	and.w	r3, r3, #4
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d008      	beq.n	8002ffe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fec:	4b19      	ldr	r3, [pc, #100]	; (8003054 <HAL_RCC_ClockConfig+0x1c4>)
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	4916      	ldr	r1, [pc, #88]	; (8003054 <HAL_RCC_ClockConfig+0x1c4>)
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0308 	and.w	r3, r3, #8
 8003006:	2b00      	cmp	r3, #0
 8003008:	d009      	beq.n	800301e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800300a:	4b12      	ldr	r3, [pc, #72]	; (8003054 <HAL_RCC_ClockConfig+0x1c4>)
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	691b      	ldr	r3, [r3, #16]
 8003016:	00db      	lsls	r3, r3, #3
 8003018:	490e      	ldr	r1, [pc, #56]	; (8003054 <HAL_RCC_ClockConfig+0x1c4>)
 800301a:	4313      	orrs	r3, r2
 800301c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800301e:	f000 f821 	bl	8003064 <HAL_RCC_GetSysClockFreq>
 8003022:	4602      	mov	r2, r0
 8003024:	4b0b      	ldr	r3, [pc, #44]	; (8003054 <HAL_RCC_ClockConfig+0x1c4>)
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	091b      	lsrs	r3, r3, #4
 800302a:	f003 030f 	and.w	r3, r3, #15
 800302e:	490a      	ldr	r1, [pc, #40]	; (8003058 <HAL_RCC_ClockConfig+0x1c8>)
 8003030:	5ccb      	ldrb	r3, [r1, r3]
 8003032:	fa22 f303 	lsr.w	r3, r2, r3
 8003036:	4a09      	ldr	r2, [pc, #36]	; (800305c <HAL_RCC_ClockConfig+0x1cc>)
 8003038:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800303a:	4b09      	ldr	r3, [pc, #36]	; (8003060 <HAL_RCC_ClockConfig+0x1d0>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4618      	mov	r0, r3
 8003040:	f7fd fe96 	bl	8000d70 <HAL_InitTick>

  return HAL_OK;
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	3710      	adds	r7, #16
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	40022000 	.word	0x40022000
 8003054:	40021000 	.word	0x40021000
 8003058:	08003340 	.word	0x08003340
 800305c:	20000000 	.word	0x20000000
 8003060:	20000004 	.word	0x20000004

08003064 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003064:	b480      	push	{r7}
 8003066:	b087      	sub	sp, #28
 8003068:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800306a:	2300      	movs	r3, #0
 800306c:	60fb      	str	r3, [r7, #12]
 800306e:	2300      	movs	r3, #0
 8003070:	60bb      	str	r3, [r7, #8]
 8003072:	2300      	movs	r3, #0
 8003074:	617b      	str	r3, [r7, #20]
 8003076:	2300      	movs	r3, #0
 8003078:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800307a:	2300      	movs	r3, #0
 800307c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800307e:	4b1e      	ldr	r3, [pc, #120]	; (80030f8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f003 030c 	and.w	r3, r3, #12
 800308a:	2b04      	cmp	r3, #4
 800308c:	d002      	beq.n	8003094 <HAL_RCC_GetSysClockFreq+0x30>
 800308e:	2b08      	cmp	r3, #8
 8003090:	d003      	beq.n	800309a <HAL_RCC_GetSysClockFreq+0x36>
 8003092:	e027      	b.n	80030e4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003094:	4b19      	ldr	r3, [pc, #100]	; (80030fc <HAL_RCC_GetSysClockFreq+0x98>)
 8003096:	613b      	str	r3, [r7, #16]
      break;
 8003098:	e027      	b.n	80030ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	0c9b      	lsrs	r3, r3, #18
 800309e:	f003 030f 	and.w	r3, r3, #15
 80030a2:	4a17      	ldr	r2, [pc, #92]	; (8003100 <HAL_RCC_GetSysClockFreq+0x9c>)
 80030a4:	5cd3      	ldrb	r3, [r2, r3]
 80030a6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d010      	beq.n	80030d4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80030b2:	4b11      	ldr	r3, [pc, #68]	; (80030f8 <HAL_RCC_GetSysClockFreq+0x94>)
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	0c5b      	lsrs	r3, r3, #17
 80030b8:	f003 0301 	and.w	r3, r3, #1
 80030bc:	4a11      	ldr	r2, [pc, #68]	; (8003104 <HAL_RCC_GetSysClockFreq+0xa0>)
 80030be:	5cd3      	ldrb	r3, [r2, r3]
 80030c0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a0d      	ldr	r2, [pc, #52]	; (80030fc <HAL_RCC_GetSysClockFreq+0x98>)
 80030c6:	fb03 f202 	mul.w	r2, r3, r2
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80030d0:	617b      	str	r3, [r7, #20]
 80030d2:	e004      	b.n	80030de <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	4a0c      	ldr	r2, [pc, #48]	; (8003108 <HAL_RCC_GetSysClockFreq+0xa4>)
 80030d8:	fb02 f303 	mul.w	r3, r2, r3
 80030dc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	613b      	str	r3, [r7, #16]
      break;
 80030e2:	e002      	b.n	80030ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80030e4:	4b05      	ldr	r3, [pc, #20]	; (80030fc <HAL_RCC_GetSysClockFreq+0x98>)
 80030e6:	613b      	str	r3, [r7, #16]
      break;
 80030e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030ea:	693b      	ldr	r3, [r7, #16]
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	371c      	adds	r7, #28
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bc80      	pop	{r7}
 80030f4:	4770      	bx	lr
 80030f6:	bf00      	nop
 80030f8:	40021000 	.word	0x40021000
 80030fc:	007a1200 	.word	0x007a1200
 8003100:	08003350 	.word	0x08003350
 8003104:	08003360 	.word	0x08003360
 8003108:	003d0900 	.word	0x003d0900

0800310c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800310c:	b480      	push	{r7}
 800310e:	b085      	sub	sp, #20
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003114:	4b0a      	ldr	r3, [pc, #40]	; (8003140 <RCC_Delay+0x34>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a0a      	ldr	r2, [pc, #40]	; (8003144 <RCC_Delay+0x38>)
 800311a:	fba2 2303 	umull	r2, r3, r2, r3
 800311e:	0a5b      	lsrs	r3, r3, #9
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	fb02 f303 	mul.w	r3, r2, r3
 8003126:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003128:	bf00      	nop
  }
  while (Delay --);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	1e5a      	subs	r2, r3, #1
 800312e:	60fa      	str	r2, [r7, #12]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d1f9      	bne.n	8003128 <RCC_Delay+0x1c>
}
 8003134:	bf00      	nop
 8003136:	bf00      	nop
 8003138:	3714      	adds	r7, #20
 800313a:	46bd      	mov	sp, r7
 800313c:	bc80      	pop	{r7}
 800313e:	4770      	bx	lr
 8003140:	20000000 	.word	0x20000000
 8003144:	10624dd3 	.word	0x10624dd3

08003148 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b086      	sub	sp, #24
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003150:	2300      	movs	r3, #0
 8003152:	613b      	str	r3, [r7, #16]
 8003154:	2300      	movs	r3, #0
 8003156:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0301 	and.w	r3, r3, #1
 8003160:	2b00      	cmp	r3, #0
 8003162:	d07d      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003164:	2300      	movs	r3, #0
 8003166:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003168:	4b4f      	ldr	r3, [pc, #316]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800316a:	69db      	ldr	r3, [r3, #28]
 800316c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d10d      	bne.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003174:	4b4c      	ldr	r3, [pc, #304]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003176:	69db      	ldr	r3, [r3, #28]
 8003178:	4a4b      	ldr	r2, [pc, #300]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800317a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800317e:	61d3      	str	r3, [r2, #28]
 8003180:	4b49      	ldr	r3, [pc, #292]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003182:	69db      	ldr	r3, [r3, #28]
 8003184:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003188:	60bb      	str	r3, [r7, #8]
 800318a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800318c:	2301      	movs	r3, #1
 800318e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003190:	4b46      	ldr	r3, [pc, #280]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003198:	2b00      	cmp	r3, #0
 800319a:	d118      	bne.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800319c:	4b43      	ldr	r3, [pc, #268]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a42      	ldr	r2, [pc, #264]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031a8:	f7fd fe24 	bl	8000df4 <HAL_GetTick>
 80031ac:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ae:	e008      	b.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031b0:	f7fd fe20 	bl	8000df4 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	2b64      	cmp	r3, #100	; 0x64
 80031bc:	d901      	bls.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e06d      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031c2:	4b3a      	ldr	r3, [pc, #232]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d0f0      	beq.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80031ce:	4b36      	ldr	r3, [pc, #216]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031d0:	6a1b      	ldr	r3, [r3, #32]
 80031d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031d6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d02e      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031e6:	68fa      	ldr	r2, [r7, #12]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d027      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80031ec:	4b2e      	ldr	r3, [pc, #184]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031ee:	6a1b      	ldr	r3, [r3, #32]
 80031f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031f4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80031f6:	4b2e      	ldr	r3, [pc, #184]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80031f8:	2201      	movs	r2, #1
 80031fa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80031fc:	4b2c      	ldr	r3, [pc, #176]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80031fe:	2200      	movs	r2, #0
 8003200:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003202:	4a29      	ldr	r2, [pc, #164]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	2b00      	cmp	r3, #0
 8003210:	d014      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003212:	f7fd fdef 	bl	8000df4 <HAL_GetTick>
 8003216:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003218:	e00a      	b.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800321a:	f7fd fdeb 	bl	8000df4 <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	f241 3288 	movw	r2, #5000	; 0x1388
 8003228:	4293      	cmp	r3, r2
 800322a:	d901      	bls.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	e036      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003230:	4b1d      	ldr	r3, [pc, #116]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003232:	6a1b      	ldr	r3, [r3, #32]
 8003234:	f003 0302 	and.w	r3, r3, #2
 8003238:	2b00      	cmp	r3, #0
 800323a:	d0ee      	beq.n	800321a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800323c:	4b1a      	ldr	r3, [pc, #104]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800323e:	6a1b      	ldr	r3, [r3, #32]
 8003240:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	4917      	ldr	r1, [pc, #92]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800324a:	4313      	orrs	r3, r2
 800324c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800324e:	7dfb      	ldrb	r3, [r7, #23]
 8003250:	2b01      	cmp	r3, #1
 8003252:	d105      	bne.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003254:	4b14      	ldr	r3, [pc, #80]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003256:	69db      	ldr	r3, [r3, #28]
 8003258:	4a13      	ldr	r2, [pc, #76]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800325a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800325e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0302 	and.w	r3, r3, #2
 8003268:	2b00      	cmp	r3, #0
 800326a:	d008      	beq.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800326c:	4b0e      	ldr	r3, [pc, #56]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	490b      	ldr	r1, [pc, #44]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800327a:	4313      	orrs	r3, r2
 800327c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0310 	and.w	r3, r3, #16
 8003286:	2b00      	cmp	r3, #0
 8003288:	d008      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800328a:	4b07      	ldr	r3, [pc, #28]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	4904      	ldr	r1, [pc, #16]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003298:	4313      	orrs	r3, r2
 800329a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3718      	adds	r7, #24
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	40021000 	.word	0x40021000
 80032ac:	40007000 	.word	0x40007000
 80032b0:	42420440 	.word	0x42420440

080032b4 <memset>:
 80032b4:	4603      	mov	r3, r0
 80032b6:	4402      	add	r2, r0
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d100      	bne.n	80032be <memset+0xa>
 80032bc:	4770      	bx	lr
 80032be:	f803 1b01 	strb.w	r1, [r3], #1
 80032c2:	e7f9      	b.n	80032b8 <memset+0x4>

080032c4 <__libc_init_array>:
 80032c4:	b570      	push	{r4, r5, r6, lr}
 80032c6:	2600      	movs	r6, #0
 80032c8:	4d0c      	ldr	r5, [pc, #48]	; (80032fc <__libc_init_array+0x38>)
 80032ca:	4c0d      	ldr	r4, [pc, #52]	; (8003300 <__libc_init_array+0x3c>)
 80032cc:	1b64      	subs	r4, r4, r5
 80032ce:	10a4      	asrs	r4, r4, #2
 80032d0:	42a6      	cmp	r6, r4
 80032d2:	d109      	bne.n	80032e8 <__libc_init_array+0x24>
 80032d4:	f000 f828 	bl	8003328 <_init>
 80032d8:	2600      	movs	r6, #0
 80032da:	4d0a      	ldr	r5, [pc, #40]	; (8003304 <__libc_init_array+0x40>)
 80032dc:	4c0a      	ldr	r4, [pc, #40]	; (8003308 <__libc_init_array+0x44>)
 80032de:	1b64      	subs	r4, r4, r5
 80032e0:	10a4      	asrs	r4, r4, #2
 80032e2:	42a6      	cmp	r6, r4
 80032e4:	d105      	bne.n	80032f2 <__libc_init_array+0x2e>
 80032e6:	bd70      	pop	{r4, r5, r6, pc}
 80032e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80032ec:	4798      	blx	r3
 80032ee:	3601      	adds	r6, #1
 80032f0:	e7ee      	b.n	80032d0 <__libc_init_array+0xc>
 80032f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80032f6:	4798      	blx	r3
 80032f8:	3601      	adds	r6, #1
 80032fa:	e7f2      	b.n	80032e2 <__libc_init_array+0x1e>
 80032fc:	08003364 	.word	0x08003364
 8003300:	08003364 	.word	0x08003364
 8003304:	08003364 	.word	0x08003364
 8003308:	08003368 	.word	0x08003368

0800330c <memcpy>:
 800330c:	440a      	add	r2, r1
 800330e:	4291      	cmp	r1, r2
 8003310:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003314:	d100      	bne.n	8003318 <memcpy+0xc>
 8003316:	4770      	bx	lr
 8003318:	b510      	push	{r4, lr}
 800331a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800331e:	4291      	cmp	r1, r2
 8003320:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003324:	d1f9      	bne.n	800331a <memcpy+0xe>
 8003326:	bd10      	pop	{r4, pc}

08003328 <_init>:
 8003328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800332a:	bf00      	nop
 800332c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800332e:	bc08      	pop	{r3}
 8003330:	469e      	mov	lr, r3
 8003332:	4770      	bx	lr

08003334 <_fini>:
 8003334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003336:	bf00      	nop
 8003338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800333a:	bc08      	pop	{r3}
 800333c:	469e      	mov	lr, r3
 800333e:	4770      	bx	lr
